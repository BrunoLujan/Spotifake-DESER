/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class Track : TBase
{
  private short _trackNumber;
  private double _duartionSeconds;
  private string _storagePath;
  private string _title;
  private MusicGender _gender;
  private ContentCreator _interpreter;
  private string _featuring;

  public short IdTrack { get; set; }

  public short TrackNumber
  {
    get
    {
      return _trackNumber;
    }
    set
    {
      __isset.trackNumber = true;
      this._trackNumber = value;
    }
  }

  public double DuartionSeconds
  {
    get
    {
      return _duartionSeconds;
    }
    set
    {
      __isset.duartionSeconds = true;
      this._duartionSeconds = value;
    }
  }

  public string StoragePath
  {
    get
    {
      return _storagePath;
    }
    set
    {
      __isset.storagePath = true;
      this._storagePath = value;
    }
  }

  public string Title
  {
    get
    {
      return _title;
    }
    set
    {
      __isset.title = true;
      this._title = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="MusicGender"/>
  /// </summary>
  public MusicGender Gender
  {
    get
    {
      return _gender;
    }
    set
    {
      __isset.gender = true;
      this._gender = value;
    }
  }

  public ContentCreator Interpreter
  {
    get
    {
      return _interpreter;
    }
    set
    {
      __isset.interpreter = true;
      this._interpreter = value;
    }
  }

  public string Featuring
  {
    get
    {
      return _featuring;
    }
    set
    {
      __isset.featuring = true;
      this._featuring = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool trackNumber;
    public bool duartionSeconds;
    public bool storagePath;
    public bool title;
    public bool gender;
    public bool interpreter;
    public bool featuring;
  }

  public Track()
  {
  }

  public Track(short idTrack) : this()
  {
    this.IdTrack = idTrack;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_idTrack = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16)
            {
              IdTrack = await iprot.ReadI16Async(cancellationToken);
              isset_idTrack = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I16)
            {
              TrackNumber = await iprot.ReadI16Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Double)
            {
              DuartionSeconds = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              StoragePath = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Title = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              Gender = (MusicGender)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.Struct)
            {
              Interpreter = new ContentCreator();
              await Interpreter.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.String)
            {
              Featuring = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_idTrack)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Track");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "idTrack";
      field.Type = TType.I16;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI16Async(IdTrack, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (__isset.trackNumber)
      {
        field.Name = "trackNumber";
        field.Type = TType.I16;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI16Async(TrackNumber, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.duartionSeconds)
      {
        field.Name = "duartionSeconds";
        field.Type = TType.Double;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(DuartionSeconds, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (StoragePath != null && __isset.storagePath)
      {
        field.Name = "storagePath";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(StoragePath, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Title != null && __isset.title)
      {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Title, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.gender)
      {
        field.Name = "gender";
        field.Type = TType.I32;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Gender, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Interpreter != null && __isset.interpreter)
      {
        field.Name = "interpreter";
        field.Type = TType.Struct;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Interpreter.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Featuring != null && __isset.featuring)
      {
        field.Name = "featuring";
        field.Type = TType.String;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Featuring, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Track;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(IdTrack, other.IdTrack)
      && ((__isset.trackNumber == other.__isset.trackNumber) && ((!__isset.trackNumber) || (System.Object.Equals(TrackNumber, other.TrackNumber))))
      && ((__isset.duartionSeconds == other.__isset.duartionSeconds) && ((!__isset.duartionSeconds) || (System.Object.Equals(DuartionSeconds, other.DuartionSeconds))))
      && ((__isset.storagePath == other.__isset.storagePath) && ((!__isset.storagePath) || (System.Object.Equals(StoragePath, other.StoragePath))))
      && ((__isset.title == other.__isset.title) && ((!__isset.title) || (System.Object.Equals(Title, other.Title))))
      && ((__isset.gender == other.__isset.gender) && ((!__isset.gender) || (System.Object.Equals(Gender, other.Gender))))
      && ((__isset.interpreter == other.__isset.interpreter) && ((!__isset.interpreter) || (System.Object.Equals(Interpreter, other.Interpreter))))
      && ((__isset.featuring == other.__isset.featuring) && ((!__isset.featuring) || (System.Object.Equals(Featuring, other.Featuring))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + IdTrack.GetHashCode();
      if(__isset.trackNumber)
        hashcode = (hashcode * 397) + TrackNumber.GetHashCode();
      if(__isset.duartionSeconds)
        hashcode = (hashcode * 397) + DuartionSeconds.GetHashCode();
      if(__isset.storagePath)
        hashcode = (hashcode * 397) + StoragePath.GetHashCode();
      if(__isset.title)
        hashcode = (hashcode * 397) + Title.GetHashCode();
      if(__isset.gender)
        hashcode = (hashcode * 397) + Gender.GetHashCode();
      if(__isset.interpreter)
        hashcode = (hashcode * 397) + Interpreter.GetHashCode();
      if(__isset.featuring)
        hashcode = (hashcode * 397) + Featuring.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Track(");
    sb.Append(", IdTrack: ");
    sb.Append(IdTrack);
    if (__isset.trackNumber)
    {
      sb.Append(", TrackNumber: ");
      sb.Append(TrackNumber);
    }
    if (__isset.duartionSeconds)
    {
      sb.Append(", DuartionSeconds: ");
      sb.Append(DuartionSeconds);
    }
    if (StoragePath != null && __isset.storagePath)
    {
      sb.Append(", StoragePath: ");
      sb.Append(StoragePath);
    }
    if (Title != null && __isset.title)
    {
      sb.Append(", Title: ");
      sb.Append(Title);
    }
    if (__isset.gender)
    {
      sb.Append(", Gender: ");
      sb.Append(Gender);
    }
    if (Interpreter != null && __isset.interpreter)
    {
      sb.Append(", Interpreter: ");
      sb.Append(Interpreter== null ? "<null>" : Interpreter.ToString());
    }
    if (Featuring != null && __isset.featuring)
    {
      sb.Append(", Featuring: ");
      sb.Append(Featuring);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

