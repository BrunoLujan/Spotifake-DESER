/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class Playlist : TBase
{
  private string _name;
  private string _description;
  private Date _creationDate;
  private string _coverPath;

  public short IdPlaylist { get; set; }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Description
  {
    get
    {
      return _description;
    }
    set
    {
      __isset.description = true;
      this._description = value;
    }
  }

  public Date CreationDate
  {
    get
    {
      return _creationDate;
    }
    set
    {
      __isset.creationDate = true;
      this._creationDate = value;
    }
  }

  public string CoverPath
  {
    get
    {
      return _coverPath;
    }
    set
    {
      __isset.coverPath = true;
      this._coverPath = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool name;
    public bool description;
    public bool creationDate;
    public bool coverPath;
  }

  public Playlist()
  {
  }

  public Playlist(short idPlaylist) : this()
  {
    this.IdPlaylist = idPlaylist;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_idPlaylist = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16)
            {
              IdPlaylist = await iprot.ReadI16Async(cancellationToken);
              isset_idPlaylist = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Description = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Struct)
            {
              CreationDate = new Date();
              await CreationDate.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              CoverPath = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_idPlaylist)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Playlist");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "idPlaylist";
      field.Type = TType.I16;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI16Async(IdPlaylist, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (Name != null && __isset.name)
      {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Description != null && __isset.description)
      {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Description, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CreationDate != null && __isset.creationDate)
      {
        field.Name = "creationDate";
        field.Type = TType.Struct;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await CreationDate.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CoverPath != null && __isset.coverPath)
      {
        field.Name = "coverPath";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(CoverPath, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Playlist;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(IdPlaylist, other.IdPlaylist)
      && ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
      && ((__isset.description == other.__isset.description) && ((!__isset.description) || (System.Object.Equals(Description, other.Description))))
      && ((__isset.creationDate == other.__isset.creationDate) && ((!__isset.creationDate) || (System.Object.Equals(CreationDate, other.CreationDate))))
      && ((__isset.coverPath == other.__isset.coverPath) && ((!__isset.coverPath) || (System.Object.Equals(CoverPath, other.CoverPath))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + IdPlaylist.GetHashCode();
      if(__isset.name)
        hashcode = (hashcode * 397) + Name.GetHashCode();
      if(__isset.description)
        hashcode = (hashcode * 397) + Description.GetHashCode();
      if(__isset.creationDate)
        hashcode = (hashcode * 397) + CreationDate.GetHashCode();
      if(__isset.coverPath)
        hashcode = (hashcode * 397) + CoverPath.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Playlist(");
    sb.Append(", IdPlaylist: ");
    sb.Append(IdPlaylist);
    if (Name != null && __isset.name)
    {
      sb.Append(", Name: ");
      sb.Append(Name);
    }
    if (Description != null && __isset.description)
    {
      sb.Append(", Description: ");
      sb.Append(Description);
    }
    if (CreationDate != null && __isset.creationDate)
    {
      sb.Append(", CreationDate: ");
      sb.Append(CreationDate== null ? "<null>" : CreationDate.ToString());
    }
    if (CoverPath != null && __isset.coverPath)
    {
      sb.Append(", CoverPath: ");
      sb.Append(CoverPath);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

