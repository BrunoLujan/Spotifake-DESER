/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


public partial class PlaylistService
{
  public interface IAsync
  {
    /// <summary>
    /// Get Playlist by Title
    /// 
    /// @param title
    ///     The Playlist Title to be obtained
    /// 
    /// @return Playlist
    ///     Playlist object
    /// 
    /// </summary>
    /// <param name="title"></param>
    Task<Playlist> GetPlaylistByTitleAsync(string title, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get Playlist by idLibrary
    /// 
    /// @param idLibrary
    ///     The Library Id to be obtained
    /// 
    /// @return Playlist list
    ///     list<Playlist>
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    Task<List<Playlist>> GetPlaylistByLibraryIdAsync(string idLibrary, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Add a Playlist to Library.
    /// 
    /// @param idLibrary
    ///     The Library Id to which a playlist will be added
    /// 
    /// @param newPlaylist
    /// 
    /// @return Playlist
    ///     Playlist object added
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    /// <param name="newPlaylist"></param>
    Task<Playlist> AddPlaylistToLibraryAsync(short idLibrary, Playlist newPlaylist, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Delete a Playlist from a Library
    /// 
    /// @param idLibrary
    ///     The Library Id which a playlist will be deleted.
    /// 
    /// @param idPlaylist
    ///     The Playlist Id which will be deleted
    /// 
    /// @return Id
    ///     The Playlist Id of the Playlist deleted.
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    /// <param name="idPlaylist"></param>
    Task<short> DeleteLibraryPlaylistAsync(short idLibrary, short idPlaylist, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Playlist title.
    /// 
    /// @param playlistId
    ///     The Playlist Id of the Playlist which require an update title.
    /// 
    /// @return Playlist
    ///     Modified Playlist obejct.
    /// 
    /// </summary>
    /// <param name="idPlaylist"></param>
    /// <param name="newPlaylistTitle"></param>
    Task<Playlist> UpdatePlaylistTitleAsync(short idPlaylist, string newPlaylistTitle, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Playlist cover.
    /// 
    /// @param playlistId
    ///     The Playlist Id of the Playlist which require an update cover.
    /// 
    /// @return Playlist
    ///     Modified Playlist obejct.
    /// 
    /// </summary>
    /// <param name="idPlaylist"></param>
    /// <param name="newImageStoragePath"></param>
    Task<Playlist> UpdatePlaylistCoverAsync(short idPlaylist, string newImageStoragePath, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Playlist description.
    /// 
    /// @param playlistId
    ///     The Playlist Id of the Playlist which require an update description.
    /// 
    /// @return Playlist
    ///     Modified Playlist obejct.
    /// 
    /// </summary>
    /// <param name="idPlaylist"></param>
    /// <param name="newDescription"></param>
    Task<Playlist> UpdatePlaylistDescriptionAsync(short idPlaylist, string newDescription, CancellationToken cancellationToken = default(CancellationToken));

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)    {
    }
    public async Task<Playlist> GetPlaylistByTitleAsync(string title, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetPlaylistByTitle", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetPlaylistByTitleArgs();
      args.Title = title;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetPlaylistByTitleResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystem)
      {
        throw result.SErrorSystem;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPlaylistByTitle failed: unknown result");
    }

    public async Task<List<Playlist>> GetPlaylistByLibraryIdAsync(string idLibrary, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetPlaylistByLibraryId", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetPlaylistByLibraryIdArgs();
      args.IdLibrary = idLibrary;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetPlaylistByLibraryIdResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystem)
      {
        throw result.SErrorSystem;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPlaylistByLibraryId failed: unknown result");
    }

    public async Task<Playlist> AddPlaylistToLibraryAsync(short idLibrary, Playlist newPlaylist, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddPlaylistToLibrary", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddPlaylistToLibraryArgs();
      args.IdLibrary = idLibrary;
      args.NewPlaylist = newPlaylist;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddPlaylistToLibraryResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddPlaylistToLibrary failed: unknown result");
    }

    public async Task<short> DeleteLibraryPlaylistAsync(short idLibrary, short idPlaylist, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DeleteLibraryPlaylist", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new DeleteLibraryPlaylistArgs();
      args.IdLibrary = idLibrary;
      args.IdPlaylist = idPlaylist;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new DeleteLibraryPlaylistResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteLibraryPlaylist failed: unknown result");
    }

    public async Task<Playlist> UpdatePlaylistTitleAsync(short idPlaylist, string newPlaylistTitle, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdatePlaylistTitle", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdatePlaylistTitleArgs();
      args.IdPlaylist = idPlaylist;
      args.NewPlaylistTitle = newPlaylistTitle;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdatePlaylistTitleResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdatePlaylistTitle failed: unknown result");
    }

    public async Task<Playlist> UpdatePlaylistCoverAsync(short idPlaylist, string newImageStoragePath, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdatePlaylistCover", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdatePlaylistCoverArgs();
      args.IdPlaylist = idPlaylist;
      args.NewImageStoragePath = newImageStoragePath;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdatePlaylistCoverResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdatePlaylistCover failed: unknown result");
    }

    public async Task<Playlist> UpdatePlaylistDescriptionAsync(short idPlaylist, string newDescription, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdatePlaylistDescription", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdatePlaylistDescriptionArgs();
      args.IdPlaylist = idPlaylist;
      args.NewDescription = newDescription;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdatePlaylistDescriptionResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdatePlaylistDescription failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private IAsync _iAsync;

    public AsyncProcessor(IAsync iAsync)
    {
      if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

      _iAsync = iAsync;
      processMap_["GetPlaylistByTitle"] = GetPlaylistByTitle_ProcessAsync;
      processMap_["GetPlaylistByLibraryId"] = GetPlaylistByLibraryId_ProcessAsync;
      processMap_["AddPlaylistToLibrary"] = AddPlaylistToLibrary_ProcessAsync;
      processMap_["DeleteLibraryPlaylist"] = DeleteLibraryPlaylist_ProcessAsync;
      processMap_["UpdatePlaylistTitle"] = UpdatePlaylistTitle_ProcessAsync;
      processMap_["UpdatePlaylistCover"] = UpdatePlaylistCover_ProcessAsync;
      processMap_["UpdatePlaylistDescription"] = UpdatePlaylistDescription_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async Task GetPlaylistByTitle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetPlaylistByTitleArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetPlaylistByTitleResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetPlaylistByTitleAsync(args.Title, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystem)
        {
          result.SErrorSystem = sErrorSystem;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetPlaylistByTitle", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetPlaylistByTitle", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetPlaylistByLibraryId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetPlaylistByLibraryIdArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetPlaylistByLibraryIdResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetPlaylistByLibraryIdAsync(args.IdLibrary, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystem)
        {
          result.SErrorSystem = sErrorSystem;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetPlaylistByLibraryId", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetPlaylistByLibraryId", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddPlaylistToLibrary_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddPlaylistToLibraryArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddPlaylistToLibraryResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddPlaylistToLibraryAsync(args.IdLibrary, args.NewPlaylist, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddPlaylistToLibrary", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddPlaylistToLibrary", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task DeleteLibraryPlaylist_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new DeleteLibraryPlaylistArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new DeleteLibraryPlaylistResult();
      try
      {
        try
        {
          result.Success = await _iAsync.DeleteLibraryPlaylistAsync(args.IdLibrary, args.IdPlaylist, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteLibraryPlaylist", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteLibraryPlaylist", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdatePlaylistTitle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdatePlaylistTitleArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdatePlaylistTitleResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdatePlaylistTitleAsync(args.IdPlaylist, args.NewPlaylistTitle, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdatePlaylistTitle", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdatePlaylistTitle", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdatePlaylistCover_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdatePlaylistCoverArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdatePlaylistCoverResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdatePlaylistCoverAsync(args.IdPlaylist, args.NewImageStoragePath, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdatePlaylistCover", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdatePlaylistCover", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdatePlaylistDescription_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdatePlaylistDescriptionArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdatePlaylistDescriptionResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdatePlaylistDescriptionAsync(args.IdPlaylist, args.NewDescription, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdatePlaylistDescription", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdatePlaylistDescription", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }


  public partial class GetPlaylistByTitleArgs : TBase
  {
    private string _title;

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool title;
    }

    public GetPlaylistByTitleArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Title = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetPlaylistByTitle_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Title != null && __isset.title)
        {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Title, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetPlaylistByTitleArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.title == other.__isset.title) && ((!__isset.title) || (System.Object.Equals(Title, other.Title))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.title)
          hashcode = (hashcode * 397) + Title.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetPlaylistByTitle_args(");
      bool __first = true;
      if (Title != null && __isset.title)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Title: ");
        sb.Append(Title);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetPlaylistByTitleResult : TBase
  {
    private Playlist _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystem;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public Playlist Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystem
    {
      get
      {
        return _sErrorSystem;
      }
      set
      {
        __isset.sErrorSystem = true;
        this._sErrorSystem = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystem;
      public bool sErrorInvalidRequestE;
    }

    public GetPlaylistByTitleResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Playlist();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystem = new SErrorSystemException();
                await SErrorSystem.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetPlaylistByTitle_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystem)
        {
          if (SErrorSystem != null)
          {
            field.Name = "SErrorSystem";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystem.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetPlaylistByTitleResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystem == other.__isset.sErrorSystem) && ((!__isset.sErrorSystem) || (System.Object.Equals(SErrorSystem, other.SErrorSystem))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystem)
          hashcode = (hashcode * 397) + SErrorSystem.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetPlaylistByTitle_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystem != null && __isset.sErrorSystem)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystem: ");
        sb.Append(SErrorSystem== null ? "<null>" : SErrorSystem.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetPlaylistByLibraryIdArgs : TBase
  {
    private string _idLibrary;

    public string IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
    }

    public GetPlaylistByLibraryIdArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                IdLibrary = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetPlaylistByLibraryId_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (IdLibrary != null && __isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetPlaylistByLibraryIdArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetPlaylistByLibraryId_args(");
      bool __first = true;
      if (IdLibrary != null && __isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetPlaylistByLibraryIdResult : TBase
  {
    private List<Playlist> _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystem;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public List<Playlist> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystem
    {
      get
      {
        return _sErrorSystem;
      }
      set
      {
        __isset.sErrorSystem = true;
        this._sErrorSystem = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystem;
      public bool sErrorInvalidRequestE;
    }

    public GetPlaylistByLibraryIdResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list32 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<Playlist>(_list32.Count);
                  for(int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    Playlist _elem34;
                    _elem34 = new Playlist();
                    await _elem34.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem34);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystem = new SErrorSystemException();
                await SErrorSystem.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetPlaylistByLibraryId_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Playlist _iter35 in Success)
              {
                await _iter35.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystem)
        {
          if (SErrorSystem != null)
          {
            field.Name = "SErrorSystem";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystem.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetPlaylistByLibraryIdResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystem == other.__isset.sErrorSystem) && ((!__isset.sErrorSystem) || (System.Object.Equals(SErrorSystem, other.SErrorSystem))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystem)
          hashcode = (hashcode * 397) + SErrorSystem.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetPlaylistByLibraryId_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystem != null && __isset.sErrorSystem)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystem: ");
        sb.Append(SErrorSystem== null ? "<null>" : SErrorSystem.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddPlaylistToLibraryArgs : TBase
  {
    private short _idLibrary;
    private Playlist _newPlaylist;

    public short IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }

    public Playlist NewPlaylist
    {
      get
      {
        return _newPlaylist;
      }
      set
      {
        __isset.newPlaylist = true;
        this._newPlaylist = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
      public bool newPlaylist;
    }

    public AddPlaylistToLibraryArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdLibrary = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                NewPlaylist = new Playlist();
                await NewPlaylist.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddPlaylistToLibrary_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewPlaylist != null && __isset.newPlaylist)
        {
          field.Name = "newPlaylist";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NewPlaylist.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddPlaylistToLibraryArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))))
        && ((__isset.newPlaylist == other.__isset.newPlaylist) && ((!__isset.newPlaylist) || (System.Object.Equals(NewPlaylist, other.NewPlaylist))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
        if(__isset.newPlaylist)
          hashcode = (hashcode * 397) + NewPlaylist.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddPlaylistToLibrary_args(");
      bool __first = true;
      if (__isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      if (NewPlaylist != null && __isset.newPlaylist)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewPlaylist: ");
        sb.Append(NewPlaylist== null ? "<null>" : NewPlaylist.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddPlaylistToLibraryResult : TBase
  {
    private Playlist _success;
    private SErrorSystemException _sErrorSystemE;

    public Playlist Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddPlaylistToLibraryResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Playlist();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddPlaylistToLibrary_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddPlaylistToLibraryResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddPlaylistToLibrary_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteLibraryPlaylistArgs : TBase
  {
    private short _idLibrary;
    private short _idPlaylist;

    public short IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }

    public short IdPlaylist
    {
      get
      {
        return _idPlaylist;
      }
      set
      {
        __isset.idPlaylist = true;
        this._idPlaylist = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
      public bool idPlaylist;
    }

    public DeleteLibraryPlaylistArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdLibrary = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                IdPlaylist = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteLibraryPlaylist_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.idPlaylist)
        {
          field.Name = "idPlaylist";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdPlaylist, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteLibraryPlaylistArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))))
        && ((__isset.idPlaylist == other.__isset.idPlaylist) && ((!__isset.idPlaylist) || (System.Object.Equals(IdPlaylist, other.IdPlaylist))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
        if(__isset.idPlaylist)
          hashcode = (hashcode * 397) + IdPlaylist.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteLibraryPlaylist_args(");
      bool __first = true;
      if (__isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      if (__isset.idPlaylist)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdPlaylist: ");
        sb.Append(IdPlaylist);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteLibraryPlaylistResult : TBase
  {
    private short _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public DeleteLibraryPlaylistResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteLibraryPlaylist_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteLibraryPlaylistResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteLibraryPlaylist_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdatePlaylistTitleArgs : TBase
  {
    private short _idPlaylist;
    private string _newPlaylistTitle;

    public short IdPlaylist
    {
      get
      {
        return _idPlaylist;
      }
      set
      {
        __isset.idPlaylist = true;
        this._idPlaylist = value;
      }
    }

    public string NewPlaylistTitle
    {
      get
      {
        return _newPlaylistTitle;
      }
      set
      {
        __isset.newPlaylistTitle = true;
        this._newPlaylistTitle = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idPlaylist;
      public bool newPlaylistTitle;
    }

    public UpdatePlaylistTitleArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdPlaylist = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                NewPlaylistTitle = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdatePlaylistTitle_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idPlaylist)
        {
          field.Name = "idPlaylist";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdPlaylist, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewPlaylistTitle != null && __isset.newPlaylistTitle)
        {
          field.Name = "newPlaylistTitle";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewPlaylistTitle, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdatePlaylistTitleArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idPlaylist == other.__isset.idPlaylist) && ((!__isset.idPlaylist) || (System.Object.Equals(IdPlaylist, other.IdPlaylist))))
        && ((__isset.newPlaylistTitle == other.__isset.newPlaylistTitle) && ((!__isset.newPlaylistTitle) || (System.Object.Equals(NewPlaylistTitle, other.NewPlaylistTitle))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idPlaylist)
          hashcode = (hashcode * 397) + IdPlaylist.GetHashCode();
        if(__isset.newPlaylistTitle)
          hashcode = (hashcode * 397) + NewPlaylistTitle.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdatePlaylistTitle_args(");
      bool __first = true;
      if (__isset.idPlaylist)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdPlaylist: ");
        sb.Append(IdPlaylist);
      }
      if (NewPlaylistTitle != null && __isset.newPlaylistTitle)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewPlaylistTitle: ");
        sb.Append(NewPlaylistTitle);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdatePlaylistTitleResult : TBase
  {
    private Playlist _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public Playlist Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public UpdatePlaylistTitleResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Playlist();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdatePlaylistTitle_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdatePlaylistTitleResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdatePlaylistTitle_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdatePlaylistCoverArgs : TBase
  {
    private short _idPlaylist;
    private string _newImageStoragePath;

    public short IdPlaylist
    {
      get
      {
        return _idPlaylist;
      }
      set
      {
        __isset.idPlaylist = true;
        this._idPlaylist = value;
      }
    }

    public string NewImageStoragePath
    {
      get
      {
        return _newImageStoragePath;
      }
      set
      {
        __isset.newImageStoragePath = true;
        this._newImageStoragePath = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idPlaylist;
      public bool newImageStoragePath;
    }

    public UpdatePlaylistCoverArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdPlaylist = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                NewImageStoragePath = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdatePlaylistCover_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idPlaylist)
        {
          field.Name = "idPlaylist";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdPlaylist, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewImageStoragePath != null && __isset.newImageStoragePath)
        {
          field.Name = "newImageStoragePath";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewImageStoragePath, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdatePlaylistCoverArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idPlaylist == other.__isset.idPlaylist) && ((!__isset.idPlaylist) || (System.Object.Equals(IdPlaylist, other.IdPlaylist))))
        && ((__isset.newImageStoragePath == other.__isset.newImageStoragePath) && ((!__isset.newImageStoragePath) || (System.Object.Equals(NewImageStoragePath, other.NewImageStoragePath))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idPlaylist)
          hashcode = (hashcode * 397) + IdPlaylist.GetHashCode();
        if(__isset.newImageStoragePath)
          hashcode = (hashcode * 397) + NewImageStoragePath.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdatePlaylistCover_args(");
      bool __first = true;
      if (__isset.idPlaylist)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdPlaylist: ");
        sb.Append(IdPlaylist);
      }
      if (NewImageStoragePath != null && __isset.newImageStoragePath)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewImageStoragePath: ");
        sb.Append(NewImageStoragePath);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdatePlaylistCoverResult : TBase
  {
    private Playlist _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public Playlist Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public UpdatePlaylistCoverResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Playlist();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdatePlaylistCover_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdatePlaylistCoverResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdatePlaylistCover_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdatePlaylistDescriptionArgs : TBase
  {
    private short _idPlaylist;
    private string _newDescription;

    public short IdPlaylist
    {
      get
      {
        return _idPlaylist;
      }
      set
      {
        __isset.idPlaylist = true;
        this._idPlaylist = value;
      }
    }

    public string NewDescription
    {
      get
      {
        return _newDescription;
      }
      set
      {
        __isset.newDescription = true;
        this._newDescription = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idPlaylist;
      public bool newDescription;
    }

    public UpdatePlaylistDescriptionArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdPlaylist = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                NewDescription = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdatePlaylistDescription_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idPlaylist)
        {
          field.Name = "idPlaylist";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdPlaylist, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewDescription != null && __isset.newDescription)
        {
          field.Name = "newDescription";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewDescription, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdatePlaylistDescriptionArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idPlaylist == other.__isset.idPlaylist) && ((!__isset.idPlaylist) || (System.Object.Equals(IdPlaylist, other.IdPlaylist))))
        && ((__isset.newDescription == other.__isset.newDescription) && ((!__isset.newDescription) || (System.Object.Equals(NewDescription, other.NewDescription))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idPlaylist)
          hashcode = (hashcode * 397) + IdPlaylist.GetHashCode();
        if(__isset.newDescription)
          hashcode = (hashcode * 397) + NewDescription.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdatePlaylistDescription_args(");
      bool __first = true;
      if (__isset.idPlaylist)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdPlaylist: ");
        sb.Append(IdPlaylist);
      }
      if (NewDescription != null && __isset.newDescription)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewDescription: ");
        sb.Append(NewDescription);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdatePlaylistDescriptionResult : TBase
  {
    private Playlist _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public Playlist Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public UpdatePlaylistDescriptionResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Playlist();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdatePlaylistDescription_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdatePlaylistDescriptionResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdatePlaylistDescription_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
