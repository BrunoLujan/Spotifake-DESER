#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def GetTrackByTitle(self, title):
        """
        Get Track by Title

        @param title
            The Track Title to be obtained

        @return Track
            Track object


        Parameters:
         - title

        """
        pass

    def GetTrackByAlbumId(self, idAlbum):
        """
        Get Track by idAlbum

        @param idAlbum
            The Track Title to be obtained

        @return Track
            list<Track>


        Parameters:
         - idAlbum

        """
        pass

    def GetTrackByPlaylistId(self, idPlaylist):
        """
        Get Track by idAlbum

        @param idAlbum
            The Track Title to be obtained

        @return Track
            list<Track>


        Parameters:
         - idPlaylist

        """
        pass

    def GetTrackByLibraryId(self, idLibrary):
        """
        Get Track by idLibrary

        @param idLibrary
            The Library Id to be obtained

        @return Track
            list<Track>


        Parameters:
         - idLibrary

        """
        pass

    def AddTrackToAlbum(self, idAlbum, newTrack, idContentCreator):
        """
        Add a Track to an Album.

        @param idAlbum
            The Album Id which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idAlbum
         - newTrack
         - idContentCreator

        """
        pass

    def AddFeaturingTrack(self, idNewTrack, idContenCreator):
        """
        Register a featuring Track

        @param newTrack

        @return idNewTrack
          Featuring added


        Parameters:
         - idNewTrack
         - idContenCreator

        """
        pass

    def DeleteAlbumTrack(self, idAlbum, trackNumber):
        """
        Delete a Track from an Album

        @param idAlbum
            The Album Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idAlbum
         - trackNumber

        """
        pass

    def GetTrackByQuery(self, query):
        """
        Get Track by Query

        @param query
            The query to be obtained

        @return Track
            list<Track>


        Parameters:
         - query

        """
        pass

    def UpdateAlbumTrackTitle(self, idAlbum, trackNumber, newAlbumTrackTitle):
        """
         
        Update previously registered Album track title.

        @param idAlbum
            The Album Id of the Album which require an update track title.

        @param trackNumber
            The Track number of the Track which require an update title

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - trackNumber
         - newAlbumTrackTitle

        """
        pass

    def UpdateAlbumTrackFeaturing(self, idAlbum, trackNumber, newFeaturing):
        """
         
        Update previously registered Album track featuring.

        @param idAlbum
            The Album Id of the Album which require an update track featuring.

        @param trackNumber
            The Track number of the Track which require an update featuring

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - trackNumber
         - newFeaturing

        """
        pass

    def AddTrackToLibrary(self, idLibrary, newTrack):
        """
        Add a Track to Library.

        @param idLibrary
            The Library Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idLibrary
         - newTrack

        """
        pass

    def DeleteLibraryTrack(self, idLibrary, trackNumber):
        """
        Delete a Track from a Library

        @param idLibrary
            The Library Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idLibrary
         - trackNumber

        """
        pass

    def AddTrackToPlaylist(self, idPlaylist, newtrack):
        """
        Add a Track to Playlist.

        @param idPlaylist
            The Playlist Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idPlaylist
         - newtrack

        """
        pass

    def DeletePlaylistTrack(self, idPlaylist, trackNumber):
        """
        Delete a Track from a Playlist

        @param idPlaylist
            The Playlist Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idPlaylist
         - trackNumber

        """
        pass

    def AddTrackToPlayQueue(self, idPlayQueu, newTrack):
        """
        Add a Track to PlayQueue.

        @param idPlayQueue
            The PlayQueue Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idPlayQueu
         - newTrack

        """
        pass

    def DeletePlayQueueTrack(self, idPlayQueu, trackNumber):
        """
        Delete a Track from a PlayQueue

        @param idPlayQueue
            The PlayQueue Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idPlayQueu
         - trackNumber

        """
        pass

    def GenerateRadioStation(self, gender):
        """
        Generate a Radio Station

        @param gender
            The gender which the radio station will be generated.

        @return tracks
            List of tracks which belong to the gender entered.


        Parameters:
         - gender

        """
        pass

    def AddTrackToMedia(self, fileName, audio):
        """
        Add track file binary

        @param binary
            The binary number that will be keep.

        @return bool
            true or false.


        Parameters:
         - fileName
         - audio

        """
        pass

    def GetTrackToMedia(self, fileName, audio):
        """
        Get track file binary

        @param fileName
            The fileName that will be get.

        @return binary
            binary number audio.


        Parameters:
         - fileName
         - audio

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def GetTrackByTitle(self, title):
        """
        Get Track by Title

        @param title
            The Track Title to be obtained

        @return Track
            Track object


        Parameters:
         - title

        """
        self.send_GetTrackByTitle(title)
        return self.recv_GetTrackByTitle()

    def send_GetTrackByTitle(self, title):
        self._oprot.writeMessageBegin('GetTrackByTitle', TMessageType.CALL, self._seqid)
        args = GetTrackByTitle_args()
        args.title = title
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTrackByTitle(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTrackByTitle_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTrackByTitle failed: unknown result")

    def GetTrackByAlbumId(self, idAlbum):
        """
        Get Track by idAlbum

        @param idAlbum
            The Track Title to be obtained

        @return Track
            list<Track>


        Parameters:
         - idAlbum

        """
        self.send_GetTrackByAlbumId(idAlbum)
        return self.recv_GetTrackByAlbumId()

    def send_GetTrackByAlbumId(self, idAlbum):
        self._oprot.writeMessageBegin('GetTrackByAlbumId', TMessageType.CALL, self._seqid)
        args = GetTrackByAlbumId_args()
        args.idAlbum = idAlbum
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTrackByAlbumId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTrackByAlbumId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTrackByAlbumId failed: unknown result")

    def GetTrackByPlaylistId(self, idPlaylist):
        """
        Get Track by idAlbum

        @param idAlbum
            The Track Title to be obtained

        @return Track
            list<Track>


        Parameters:
         - idPlaylist

        """
        self.send_GetTrackByPlaylistId(idPlaylist)
        return self.recv_GetTrackByPlaylistId()

    def send_GetTrackByPlaylistId(self, idPlaylist):
        self._oprot.writeMessageBegin('GetTrackByPlaylistId', TMessageType.CALL, self._seqid)
        args = GetTrackByPlaylistId_args()
        args.idPlaylist = idPlaylist
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTrackByPlaylistId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTrackByPlaylistId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTrackByPlaylistId failed: unknown result")

    def GetTrackByLibraryId(self, idLibrary):
        """
        Get Track by idLibrary

        @param idLibrary
            The Library Id to be obtained

        @return Track
            list<Track>


        Parameters:
         - idLibrary

        """
        self.send_GetTrackByLibraryId(idLibrary)
        return self.recv_GetTrackByLibraryId()

    def send_GetTrackByLibraryId(self, idLibrary):
        self._oprot.writeMessageBegin('GetTrackByLibraryId', TMessageType.CALL, self._seqid)
        args = GetTrackByLibraryId_args()
        args.idLibrary = idLibrary
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTrackByLibraryId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTrackByLibraryId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTrackByLibraryId failed: unknown result")

    def AddTrackToAlbum(self, idAlbum, newTrack, idContentCreator):
        """
        Add a Track to an Album.

        @param idAlbum
            The Album Id which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idAlbum
         - newTrack
         - idContentCreator

        """
        self.send_AddTrackToAlbum(idAlbum, newTrack, idContentCreator)
        return self.recv_AddTrackToAlbum()

    def send_AddTrackToAlbum(self, idAlbum, newTrack, idContentCreator):
        self._oprot.writeMessageBegin('AddTrackToAlbum', TMessageType.CALL, self._seqid)
        args = AddTrackToAlbum_args()
        args.idAlbum = idAlbum
        args.newTrack = newTrack
        args.idContentCreator = idContentCreator
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddTrackToAlbum(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddTrackToAlbum_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddTrackToAlbum failed: unknown result")

    def AddFeaturingTrack(self, idNewTrack, idContenCreator):
        """
        Register a featuring Track

        @param newTrack

        @return idNewTrack
          Featuring added


        Parameters:
         - idNewTrack
         - idContenCreator

        """
        self.send_AddFeaturingTrack(idNewTrack, idContenCreator)
        return self.recv_AddFeaturingTrack()

    def send_AddFeaturingTrack(self, idNewTrack, idContenCreator):
        self._oprot.writeMessageBegin('AddFeaturingTrack', TMessageType.CALL, self._seqid)
        args = AddFeaturingTrack_args()
        args.idNewTrack = idNewTrack
        args.idContenCreator = idContenCreator
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddFeaturingTrack(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddFeaturingTrack_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddFeaturingTrack failed: unknown result")

    def DeleteAlbumTrack(self, idAlbum, trackNumber):
        """
        Delete a Track from an Album

        @param idAlbum
            The Album Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idAlbum
         - trackNumber

        """
        self.send_DeleteAlbumTrack(idAlbum, trackNumber)
        return self.recv_DeleteAlbumTrack()

    def send_DeleteAlbumTrack(self, idAlbum, trackNumber):
        self._oprot.writeMessageBegin('DeleteAlbumTrack', TMessageType.CALL, self._seqid)
        args = DeleteAlbumTrack_args()
        args.idAlbum = idAlbum
        args.trackNumber = trackNumber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteAlbumTrack(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteAlbumTrack_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteAlbumTrack failed: unknown result")

    def GetTrackByQuery(self, query):
        """
        Get Track by Query

        @param query
            The query to be obtained

        @return Track
            list<Track>


        Parameters:
         - query

        """
        self.send_GetTrackByQuery(query)
        return self.recv_GetTrackByQuery()

    def send_GetTrackByQuery(self, query):
        self._oprot.writeMessageBegin('GetTrackByQuery', TMessageType.CALL, self._seqid)
        args = GetTrackByQuery_args()
        args.query = query
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTrackByQuery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTrackByQuery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTrackByQuery failed: unknown result")

    def UpdateAlbumTrackTitle(self, idAlbum, trackNumber, newAlbumTrackTitle):
        """
         
        Update previously registered Album track title.

        @param idAlbum
            The Album Id of the Album which require an update track title.

        @param trackNumber
            The Track number of the Track which require an update title

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - trackNumber
         - newAlbumTrackTitle

        """
        self.send_UpdateAlbumTrackTitle(idAlbum, trackNumber, newAlbumTrackTitle)
        return self.recv_UpdateAlbumTrackTitle()

    def send_UpdateAlbumTrackTitle(self, idAlbum, trackNumber, newAlbumTrackTitle):
        self._oprot.writeMessageBegin('UpdateAlbumTrackTitle', TMessageType.CALL, self._seqid)
        args = UpdateAlbumTrackTitle_args()
        args.idAlbum = idAlbum
        args.trackNumber = trackNumber
        args.newAlbumTrackTitle = newAlbumTrackTitle
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateAlbumTrackTitle(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateAlbumTrackTitle_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateAlbumTrackTitle failed: unknown result")

    def UpdateAlbumTrackFeaturing(self, idAlbum, trackNumber, newFeaturing):
        """
         
        Update previously registered Album track featuring.

        @param idAlbum
            The Album Id of the Album which require an update track featuring.

        @param trackNumber
            The Track number of the Track which require an update featuring

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - trackNumber
         - newFeaturing

        """
        self.send_UpdateAlbumTrackFeaturing(idAlbum, trackNumber, newFeaturing)
        return self.recv_UpdateAlbumTrackFeaturing()

    def send_UpdateAlbumTrackFeaturing(self, idAlbum, trackNumber, newFeaturing):
        self._oprot.writeMessageBegin('UpdateAlbumTrackFeaturing', TMessageType.CALL, self._seqid)
        args = UpdateAlbumTrackFeaturing_args()
        args.idAlbum = idAlbum
        args.trackNumber = trackNumber
        args.newFeaturing = newFeaturing
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateAlbumTrackFeaturing(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateAlbumTrackFeaturing_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateAlbumTrackFeaturing failed: unknown result")

    def AddTrackToLibrary(self, idLibrary, newTrack):
        """
        Add a Track to Library.

        @param idLibrary
            The Library Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idLibrary
         - newTrack

        """
        self.send_AddTrackToLibrary(idLibrary, newTrack)
        return self.recv_AddTrackToLibrary()

    def send_AddTrackToLibrary(self, idLibrary, newTrack):
        self._oprot.writeMessageBegin('AddTrackToLibrary', TMessageType.CALL, self._seqid)
        args = AddTrackToLibrary_args()
        args.idLibrary = idLibrary
        args.newTrack = newTrack
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddTrackToLibrary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddTrackToLibrary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddTrackToLibrary failed: unknown result")

    def DeleteLibraryTrack(self, idLibrary, trackNumber):
        """
        Delete a Track from a Library

        @param idLibrary
            The Library Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idLibrary
         - trackNumber

        """
        self.send_DeleteLibraryTrack(idLibrary, trackNumber)
        return self.recv_DeleteLibraryTrack()

    def send_DeleteLibraryTrack(self, idLibrary, trackNumber):
        self._oprot.writeMessageBegin('DeleteLibraryTrack', TMessageType.CALL, self._seqid)
        args = DeleteLibraryTrack_args()
        args.idLibrary = idLibrary
        args.trackNumber = trackNumber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteLibraryTrack(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteLibraryTrack_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteLibraryTrack failed: unknown result")

    def AddTrackToPlaylist(self, idPlaylist, newtrack):
        """
        Add a Track to Playlist.

        @param idPlaylist
            The Playlist Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idPlaylist
         - newtrack

        """
        self.send_AddTrackToPlaylist(idPlaylist, newtrack)
        return self.recv_AddTrackToPlaylist()

    def send_AddTrackToPlaylist(self, idPlaylist, newtrack):
        self._oprot.writeMessageBegin('AddTrackToPlaylist', TMessageType.CALL, self._seqid)
        args = AddTrackToPlaylist_args()
        args.idPlaylist = idPlaylist
        args.newtrack = newtrack
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddTrackToPlaylist(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddTrackToPlaylist_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddTrackToPlaylist failed: unknown result")

    def DeletePlaylistTrack(self, idPlaylist, trackNumber):
        """
        Delete a Track from a Playlist

        @param idPlaylist
            The Playlist Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idPlaylist
         - trackNumber

        """
        self.send_DeletePlaylistTrack(idPlaylist, trackNumber)
        return self.recv_DeletePlaylistTrack()

    def send_DeletePlaylistTrack(self, idPlaylist, trackNumber):
        self._oprot.writeMessageBegin('DeletePlaylistTrack', TMessageType.CALL, self._seqid)
        args = DeletePlaylistTrack_args()
        args.idPlaylist = idPlaylist
        args.trackNumber = trackNumber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeletePlaylistTrack(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeletePlaylistTrack_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeletePlaylistTrack failed: unknown result")

    def AddTrackToPlayQueue(self, idPlayQueu, newTrack):
        """
        Add a Track to PlayQueue.

        @param idPlayQueue
            The PlayQueue Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idPlayQueu
         - newTrack

        """
        self.send_AddTrackToPlayQueue(idPlayQueu, newTrack)
        return self.recv_AddTrackToPlayQueue()

    def send_AddTrackToPlayQueue(self, idPlayQueu, newTrack):
        self._oprot.writeMessageBegin('AddTrackToPlayQueue', TMessageType.CALL, self._seqid)
        args = AddTrackToPlayQueue_args()
        args.idPlayQueu = idPlayQueu
        args.newTrack = newTrack
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddTrackToPlayQueue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddTrackToPlayQueue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddTrackToPlayQueue failed: unknown result")

    def DeletePlayQueueTrack(self, idPlayQueu, trackNumber):
        """
        Delete a Track from a PlayQueue

        @param idPlayQueue
            The PlayQueue Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idPlayQueu
         - trackNumber

        """
        self.send_DeletePlayQueueTrack(idPlayQueu, trackNumber)
        return self.recv_DeletePlayQueueTrack()

    def send_DeletePlayQueueTrack(self, idPlayQueu, trackNumber):
        self._oprot.writeMessageBegin('DeletePlayQueueTrack', TMessageType.CALL, self._seqid)
        args = DeletePlayQueueTrack_args()
        args.idPlayQueu = idPlayQueu
        args.trackNumber = trackNumber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeletePlayQueueTrack(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeletePlayQueueTrack_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeletePlayQueueTrack failed: unknown result")

    def GenerateRadioStation(self, gender):
        """
        Generate a Radio Station

        @param gender
            The gender which the radio station will be generated.

        @return tracks
            List of tracks which belong to the gender entered.


        Parameters:
         - gender

        """
        self.send_GenerateRadioStation(gender)
        return self.recv_GenerateRadioStation()

    def send_GenerateRadioStation(self, gender):
        self._oprot.writeMessageBegin('GenerateRadioStation', TMessageType.CALL, self._seqid)
        args = GenerateRadioStation_args()
        args.gender = gender
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GenerateRadioStation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GenerateRadioStation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GenerateRadioStation failed: unknown result")

    def AddTrackToMedia(self, fileName, audio):
        """
        Add track file binary

        @param binary
            The binary number that will be keep.

        @return bool
            true or false.


        Parameters:
         - fileName
         - audio

        """
        self.send_AddTrackToMedia(fileName, audio)
        return self.recv_AddTrackToMedia()

    def send_AddTrackToMedia(self, fileName, audio):
        self._oprot.writeMessageBegin('AddTrackToMedia', TMessageType.CALL, self._seqid)
        args = AddTrackToMedia_args()
        args.fileName = fileName
        args.audio = audio
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddTrackToMedia(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddTrackToMedia_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddTrackToMedia failed: unknown result")

    def GetTrackToMedia(self, fileName, audio):
        """
        Get track file binary

        @param fileName
            The fileName that will be get.

        @return binary
            binary number audio.


        Parameters:
         - fileName
         - audio

        """
        self.send_GetTrackToMedia(fileName, audio)
        return self.recv_GetTrackToMedia()

    def send_GetTrackToMedia(self, fileName, audio):
        self._oprot.writeMessageBegin('GetTrackToMedia', TMessageType.CALL, self._seqid)
        args = GetTrackToMedia_args()
        args.fileName = fileName
        args.audio = audio
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTrackToMedia(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTrackToMedia_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTrackToMedia failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["GetTrackByTitle"] = Processor.process_GetTrackByTitle
        self._processMap["GetTrackByAlbumId"] = Processor.process_GetTrackByAlbumId
        self._processMap["GetTrackByPlaylistId"] = Processor.process_GetTrackByPlaylistId
        self._processMap["GetTrackByLibraryId"] = Processor.process_GetTrackByLibraryId
        self._processMap["AddTrackToAlbum"] = Processor.process_AddTrackToAlbum
        self._processMap["AddFeaturingTrack"] = Processor.process_AddFeaturingTrack
        self._processMap["DeleteAlbumTrack"] = Processor.process_DeleteAlbumTrack
        self._processMap["GetTrackByQuery"] = Processor.process_GetTrackByQuery
        self._processMap["UpdateAlbumTrackTitle"] = Processor.process_UpdateAlbumTrackTitle
        self._processMap["UpdateAlbumTrackFeaturing"] = Processor.process_UpdateAlbumTrackFeaturing
        self._processMap["AddTrackToLibrary"] = Processor.process_AddTrackToLibrary
        self._processMap["DeleteLibraryTrack"] = Processor.process_DeleteLibraryTrack
        self._processMap["AddTrackToPlaylist"] = Processor.process_AddTrackToPlaylist
        self._processMap["DeletePlaylistTrack"] = Processor.process_DeletePlaylistTrack
        self._processMap["AddTrackToPlayQueue"] = Processor.process_AddTrackToPlayQueue
        self._processMap["DeletePlayQueueTrack"] = Processor.process_DeletePlayQueueTrack
        self._processMap["GenerateRadioStation"] = Processor.process_GenerateRadioStation
        self._processMap["AddTrackToMedia"] = Processor.process_AddTrackToMedia
        self._processMap["GetTrackToMedia"] = Processor.process_GetTrackToMedia
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_GetTrackByTitle(self, seqid, iprot, oprot):
        args = GetTrackByTitle_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTrackByTitle_result()
        try:
            result.success = self._handler.GetTrackByTitle(args.title)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTrackByTitle", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetTrackByAlbumId(self, seqid, iprot, oprot):
        args = GetTrackByAlbumId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTrackByAlbumId_result()
        try:
            result.success = self._handler.GetTrackByAlbumId(args.idAlbum)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTrackByAlbumId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetTrackByPlaylistId(self, seqid, iprot, oprot):
        args = GetTrackByPlaylistId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTrackByPlaylistId_result()
        try:
            result.success = self._handler.GetTrackByPlaylistId(args.idPlaylist)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTrackByPlaylistId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetTrackByLibraryId(self, seqid, iprot, oprot):
        args = GetTrackByLibraryId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTrackByLibraryId_result()
        try:
            result.success = self._handler.GetTrackByLibraryId(args.idLibrary)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTrackByLibraryId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddTrackToAlbum(self, seqid, iprot, oprot):
        args = AddTrackToAlbum_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddTrackToAlbum_result()
        try:
            result.success = self._handler.AddTrackToAlbum(args.idAlbum, args.newTrack, args.idContentCreator)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddTrackToAlbum", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddFeaturingTrack(self, seqid, iprot, oprot):
        args = AddFeaturingTrack_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddFeaturingTrack_result()
        try:
            result.success = self._handler.AddFeaturingTrack(args.idNewTrack, args.idContenCreator)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddFeaturingTrack", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteAlbumTrack(self, seqid, iprot, oprot):
        args = DeleteAlbumTrack_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteAlbumTrack_result()
        try:
            result.success = self._handler.DeleteAlbumTrack(args.idAlbum, args.trackNumber)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteAlbumTrack", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetTrackByQuery(self, seqid, iprot, oprot):
        args = GetTrackByQuery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTrackByQuery_result()
        try:
            result.success = self._handler.GetTrackByQuery(args.query)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTrackByQuery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateAlbumTrackTitle(self, seqid, iprot, oprot):
        args = UpdateAlbumTrackTitle_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateAlbumTrackTitle_result()
        try:
            result.success = self._handler.UpdateAlbumTrackTitle(args.idAlbum, args.trackNumber, args.newAlbumTrackTitle)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateAlbumTrackTitle", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateAlbumTrackFeaturing(self, seqid, iprot, oprot):
        args = UpdateAlbumTrackFeaturing_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateAlbumTrackFeaturing_result()
        try:
            result.success = self._handler.UpdateAlbumTrackFeaturing(args.idAlbum, args.trackNumber, args.newFeaturing)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateAlbumTrackFeaturing", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddTrackToLibrary(self, seqid, iprot, oprot):
        args = AddTrackToLibrary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddTrackToLibrary_result()
        try:
            result.success = self._handler.AddTrackToLibrary(args.idLibrary, args.newTrack)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddTrackToLibrary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteLibraryTrack(self, seqid, iprot, oprot):
        args = DeleteLibraryTrack_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteLibraryTrack_result()
        try:
            result.success = self._handler.DeleteLibraryTrack(args.idLibrary, args.trackNumber)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteLibraryTrack", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddTrackToPlaylist(self, seqid, iprot, oprot):
        args = AddTrackToPlaylist_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddTrackToPlaylist_result()
        try:
            result.success = self._handler.AddTrackToPlaylist(args.idPlaylist, args.newtrack)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddTrackToPlaylist", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeletePlaylistTrack(self, seqid, iprot, oprot):
        args = DeletePlaylistTrack_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeletePlaylistTrack_result()
        try:
            result.success = self._handler.DeletePlaylistTrack(args.idPlaylist, args.trackNumber)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeletePlaylistTrack", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddTrackToPlayQueue(self, seqid, iprot, oprot):
        args = AddTrackToPlayQueue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddTrackToPlayQueue_result()
        try:
            result.success = self._handler.AddTrackToPlayQueue(args.idPlayQueu, args.newTrack)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddTrackToPlayQueue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeletePlayQueueTrack(self, seqid, iprot, oprot):
        args = DeletePlayQueueTrack_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeletePlayQueueTrack_result()
        try:
            result.success = self._handler.DeletePlayQueueTrack(args.idPlayQueu, args.trackNumber)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeletePlayQueueTrack", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GenerateRadioStation(self, seqid, iprot, oprot):
        args = GenerateRadioStation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GenerateRadioStation_result()
        try:
            result.success = self._handler.GenerateRadioStation(args.gender)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GenerateRadioStation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddTrackToMedia(self, seqid, iprot, oprot):
        args = AddTrackToMedia_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddTrackToMedia_result()
        try:
            result.success = self._handler.AddTrackToMedia(args.fileName, args.audio)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddTrackToMedia", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetTrackToMedia(self, seqid, iprot, oprot):
        args = GetTrackToMedia_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTrackToMedia_result()
        try:
            result.success = self._handler.GetTrackToMedia(args.fileName, args.audio)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTrackToMedia", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class GetTrackByTitle_args(object):
    """
    Attributes:
     - title

    """


    def __init__(self, title=None,):
        self.title = title

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByTitle_args')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByTitle_args)
GetTrackByTitle_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
)


class GetTrackByTitle_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByTitle_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByTitle_result)
GetTrackByTitle_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class GetTrackByAlbumId_args(object):
    """
    Attributes:
     - idAlbum

    """


    def __init__(self, idAlbum=None,):
        self.idAlbum = idAlbum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByAlbumId_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByAlbumId_args)
GetTrackByAlbumId_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
)


class GetTrackByAlbumId_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = SpotifakeManagement.ttypes.Track()
                        _elem26.read(iprot)
                        self.success.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByAlbumId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter27 in self.success:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByAlbumId_result)
GetTrackByAlbumId_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SpotifakeManagement.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class GetTrackByPlaylistId_args(object):
    """
    Attributes:
     - idPlaylist

    """


    def __init__(self, idPlaylist=None,):
        self.idPlaylist = idPlaylist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlaylist = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByPlaylistId_args')
        if self.idPlaylist is not None:
            oprot.writeFieldBegin('idPlaylist', TType.I16, 1)
            oprot.writeI16(self.idPlaylist)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByPlaylistId_args)
GetTrackByPlaylistId_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlaylist', None, None, ),  # 1
)


class GetTrackByPlaylistId_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = SpotifakeManagement.ttypes.Track()
                        _elem33.read(iprot)
                        self.success.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByPlaylistId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter34 in self.success:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByPlaylistId_result)
GetTrackByPlaylistId_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SpotifakeManagement.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class GetTrackByLibraryId_args(object):
    """
    Attributes:
     - idLibrary

    """


    def __init__(self, idLibrary=None,):
        self.idLibrary = idLibrary

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByLibraryId_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByLibraryId_args)
GetTrackByLibraryId_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
)


class GetTrackByLibraryId_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = SpotifakeManagement.ttypes.Track()
                        _elem40.read(iprot)
                        self.success.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByLibraryId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter41 in self.success:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByLibraryId_result)
GetTrackByLibraryId_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SpotifakeManagement.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddTrackToAlbum_args(object):
    """
    Attributes:
     - idAlbum
     - newTrack
     - idContentCreator

    """


    def __init__(self, idAlbum=None, newTrack=None, idContentCreator=None,):
        self.idAlbum = idAlbum
        self.newTrack = newTrack
        self.idContentCreator = idContentCreator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newTrack = SpotifakeManagement.ttypes.Track()
                    self.newTrack.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.idContentCreator = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToAlbum_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.newTrack is not None:
            oprot.writeFieldBegin('newTrack', TType.STRUCT, 2)
            self.newTrack.write(oprot)
            oprot.writeFieldEnd()
        if self.idContentCreator is not None:
            oprot.writeFieldBegin('idContentCreator', TType.I16, 3)
            oprot.writeI16(self.idContentCreator)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToAlbum_args)
AddTrackToAlbum_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.STRUCT, 'newTrack', [SpotifakeManagement.ttypes.Track, None], None, ),  # 2
    (3, TType.I16, 'idContentCreator', None, None, ),  # 3
)


class AddTrackToAlbum_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToAlbum_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToAlbum_result)
AddTrackToAlbum_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class AddFeaturingTrack_args(object):
    """
    Attributes:
     - idNewTrack
     - idContenCreator

    """


    def __init__(self, idNewTrack=None, idContenCreator=None,):
        self.idNewTrack = idNewTrack
        self.idContenCreator = idContenCreator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idNewTrack = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.idContenCreator = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddFeaturingTrack_args')
        if self.idNewTrack is not None:
            oprot.writeFieldBegin('idNewTrack', TType.I16, 1)
            oprot.writeI16(self.idNewTrack)
            oprot.writeFieldEnd()
        if self.idContenCreator is not None:
            oprot.writeFieldBegin('idContenCreator', TType.I16, 2)
            oprot.writeI16(self.idContenCreator)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddFeaturingTrack_args)
AddFeaturingTrack_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idNewTrack', None, None, ),  # 1
    (2, TType.I16, 'idContenCreator', None, None, ),  # 2
)


class AddFeaturingTrack_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddFeaturingTrack_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddFeaturingTrack_result)
AddFeaturingTrack_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteAlbumTrack_args(object):
    """
    Attributes:
     - idAlbum
     - trackNumber

    """


    def __init__(self, idAlbum=None, trackNumber=None,):
        self.idAlbum = idAlbum
        self.trackNumber = trackNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteAlbumTrack_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteAlbumTrack_args)
DeleteAlbumTrack_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
)


class DeleteAlbumTrack_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteAlbumTrack_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteAlbumTrack_result)
DeleteAlbumTrack_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class GetTrackByQuery_args(object):
    """
    Attributes:
     - query

    """


    def __init__(self, query=None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.query = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByQuery_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRING, 1)
            oprot.writeString(self.query.encode('utf-8') if sys.version_info[0] == 2 else self.query)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByQuery_args)
GetTrackByQuery_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'query', 'UTF8', None, ),  # 1
)


class GetTrackByQuery_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = SpotifakeManagement.ttypes.Track()
                        _elem47.read(iprot)
                        self.success.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByQuery_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter48 in self.success:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByQuery_result)
GetTrackByQuery_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SpotifakeManagement.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class UpdateAlbumTrackTitle_args(object):
    """
    Attributes:
     - idAlbum
     - trackNumber
     - newAlbumTrackTitle

    """


    def __init__(self, idAlbum=None, trackNumber=None, newAlbumTrackTitle=None,):
        self.idAlbum = idAlbum
        self.trackNumber = trackNumber
        self.newAlbumTrackTitle = newAlbumTrackTitle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newAlbumTrackTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumTrackTitle_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        if self.newAlbumTrackTitle is not None:
            oprot.writeFieldBegin('newAlbumTrackTitle', TType.STRING, 3)
            oprot.writeString(self.newAlbumTrackTitle.encode('utf-8') if sys.version_info[0] == 2 else self.newAlbumTrackTitle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumTrackTitle_args)
UpdateAlbumTrackTitle_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
    (3, TType.STRING, 'newAlbumTrackTitle', 'UTF8', None, ),  # 3
)


class UpdateAlbumTrackTitle_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumTrackTitle_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumTrackTitle_result)
UpdateAlbumTrackTitle_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class UpdateAlbumTrackFeaturing_args(object):
    """
    Attributes:
     - idAlbum
     - trackNumber
     - newFeaturing

    """


    def __init__(self, idAlbum=None, trackNumber=None, newFeaturing=None,):
        self.idAlbum = idAlbum
        self.trackNumber = trackNumber
        self.newFeaturing = newFeaturing

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.newFeaturing = SpotifakeManagement.ttypes.ContentCreator()
                    self.newFeaturing.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumTrackFeaturing_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        if self.newFeaturing is not None:
            oprot.writeFieldBegin('newFeaturing', TType.STRUCT, 3)
            self.newFeaturing.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumTrackFeaturing_args)
UpdateAlbumTrackFeaturing_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
    (3, TType.STRUCT, 'newFeaturing', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 3
)


class UpdateAlbumTrackFeaturing_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumTrackFeaturing_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumTrackFeaturing_result)
UpdateAlbumTrackFeaturing_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class AddTrackToLibrary_args(object):
    """
    Attributes:
     - idLibrary
     - newTrack

    """


    def __init__(self, idLibrary=None, newTrack=None,):
        self.idLibrary = idLibrary
        self.newTrack = newTrack

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newTrack = SpotifakeManagement.ttypes.Track()
                    self.newTrack.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToLibrary_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.newTrack is not None:
            oprot.writeFieldBegin('newTrack', TType.STRUCT, 2)
            self.newTrack.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToLibrary_args)
AddTrackToLibrary_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.STRUCT, 'newTrack', [SpotifakeManagement.ttypes.Track, None], None, ),  # 2
)


class AddTrackToLibrary_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToLibrary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToLibrary_result)
AddTrackToLibrary_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteLibraryTrack_args(object):
    """
    Attributes:
     - idLibrary
     - trackNumber

    """


    def __init__(self, idLibrary=None, trackNumber=None,):
        self.idLibrary = idLibrary
        self.trackNumber = trackNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryTrack_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryTrack_args)
DeleteLibraryTrack_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
)


class DeleteLibraryTrack_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryTrack_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryTrack_result)
DeleteLibraryTrack_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddTrackToPlaylist_args(object):
    """
    Attributes:
     - idPlaylist
     - newtrack

    """


    def __init__(self, idPlaylist=None, newtrack=None,):
        self.idPlaylist = idPlaylist
        self.newtrack = newtrack

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlaylist = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newtrack = SpotifakeManagement.ttypes.Track()
                    self.newtrack.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToPlaylist_args')
        if self.idPlaylist is not None:
            oprot.writeFieldBegin('idPlaylist', TType.I16, 1)
            oprot.writeI16(self.idPlaylist)
            oprot.writeFieldEnd()
        if self.newtrack is not None:
            oprot.writeFieldBegin('newtrack', TType.STRUCT, 2)
            self.newtrack.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToPlaylist_args)
AddTrackToPlaylist_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlaylist', None, None, ),  # 1
    (2, TType.STRUCT, 'newtrack', [SpotifakeManagement.ttypes.Track, None], None, ),  # 2
)


class AddTrackToPlaylist_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToPlaylist_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToPlaylist_result)
AddTrackToPlaylist_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeletePlaylistTrack_args(object):
    """
    Attributes:
     - idPlaylist
     - trackNumber

    """


    def __init__(self, idPlaylist=None, trackNumber=None,):
        self.idPlaylist = idPlaylist
        self.trackNumber = trackNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlaylist = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeletePlaylistTrack_args')
        if self.idPlaylist is not None:
            oprot.writeFieldBegin('idPlaylist', TType.I16, 1)
            oprot.writeI16(self.idPlaylist)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeletePlaylistTrack_args)
DeletePlaylistTrack_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlaylist', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
)


class DeletePlaylistTrack_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeletePlaylistTrack_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeletePlaylistTrack_result)
DeletePlaylistTrack_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddTrackToPlayQueue_args(object):
    """
    Attributes:
     - idPlayQueu
     - newTrack

    """


    def __init__(self, idPlayQueu=None, newTrack=None,):
        self.idPlayQueu = idPlayQueu
        self.newTrack = newTrack

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlayQueu = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newTrack = SpotifakeManagement.ttypes.Track()
                    self.newTrack.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToPlayQueue_args')
        if self.idPlayQueu is not None:
            oprot.writeFieldBegin('idPlayQueu', TType.I16, 1)
            oprot.writeI16(self.idPlayQueu)
            oprot.writeFieldEnd()
        if self.newTrack is not None:
            oprot.writeFieldBegin('newTrack', TType.STRUCT, 2)
            self.newTrack.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToPlayQueue_args)
AddTrackToPlayQueue_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlayQueu', None, None, ),  # 1
    (2, TType.STRUCT, 'newTrack', [SpotifakeManagement.ttypes.Track, None], None, ),  # 2
)


class AddTrackToPlayQueue_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToPlayQueue_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToPlayQueue_result)
AddTrackToPlayQueue_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeletePlayQueueTrack_args(object):
    """
    Attributes:
     - idPlayQueu
     - trackNumber

    """


    def __init__(self, idPlayQueu=None, trackNumber=None,):
        self.idPlayQueu = idPlayQueu
        self.trackNumber = trackNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlayQueu = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeletePlayQueueTrack_args')
        if self.idPlayQueu is not None:
            oprot.writeFieldBegin('idPlayQueu', TType.I16, 1)
            oprot.writeI16(self.idPlayQueu)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeletePlayQueueTrack_args)
DeletePlayQueueTrack_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlayQueu', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
)


class DeletePlayQueueTrack_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeletePlayQueueTrack_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeletePlayQueueTrack_result)
DeletePlayQueueTrack_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class GenerateRadioStation_args(object):
    """
    Attributes:
     - gender

    """


    def __init__(self, gender=None,):
        self.gender = gender

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.gender = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GenerateRadioStation_args')
        if self.gender is not None:
            oprot.writeFieldBegin('gender', TType.I32, 1)
            oprot.writeI32(self.gender)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GenerateRadioStation_args)
GenerateRadioStation_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'gender', None, None, ),  # 1
)


class GenerateRadioStation_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = SpotifakeManagement.ttypes.Track()
                        _elem54.read(iprot)
                        self.success.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GenerateRadioStation_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter55 in self.success:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GenerateRadioStation_result)
GenerateRadioStation_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SpotifakeManagement.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class AddTrackToMedia_args(object):
    """
    Attributes:
     - fileName
     - audio

    """


    def __init__(self, fileName=None, audio=None,):
        self.fileName = fileName
        self.audio = audio

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.audio = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToMedia_args')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.audio is not None:
            oprot.writeFieldBegin('audio', TType.STRING, 2)
            oprot.writeBinary(self.audio)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToMedia_args)
AddTrackToMedia_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'audio', 'BINARY', None, ),  # 2
)


class AddTrackToMedia_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToMedia_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToMedia_result)
AddTrackToMedia_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class GetTrackToMedia_args(object):
    """
    Attributes:
     - fileName
     - audio

    """


    def __init__(self, fileName=None, audio=None,):
        self.fileName = fileName
        self.audio = audio

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.audio = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackToMedia_args')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.audio is not None:
            oprot.writeFieldBegin('audio', TType.STRING, 2)
            oprot.writeBinary(self.audio)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackToMedia_args)
GetTrackToMedia_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'audio', 'BINARY', None, ),  # 2
)


class GetTrackToMedia_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackToMedia_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackToMedia_result)
GetTrackToMedia_result.thrift_spec = (
    (0, TType.STRING, 'success', 'BINARY', None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

