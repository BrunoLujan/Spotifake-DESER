/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


public partial class ContentCreatorService
{
  public interface IAsync
  {
    /// <summary>
    /// Get ContentCreator
    /// 
    /// @return list<ContentCreator>
    ///     ContentCreator list
    /// 
    /// </summary>
    Task<List<ContentCreator>> GetContentCreatorsAsync(CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get ContentCreator by Id
    /// 
    /// @param idContentCreator
    ///     The ContentCreator Id to be obtained.
    /// 
    /// @return ContentCreator
    ///     ContentCreator object
    /// 
    /// </summary>
    /// <param name="idContentCreator"></param>
    Task<ContentCreator> GetContentCreatorByIdAsync(short idContentCreator, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get ContentCreator by Library Id
    /// 
    /// @param idLibrary
    ///     The Library Id to be obtained.
    /// 
    /// @return ContentCreator list
    ///     list<ContentCreator>
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    Task<List<ContentCreator>> GetContentCreatorByLibraryIdAsync(short idLibrary, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get ContentCreator by email
    /// 
    /// @param email
    ///     The ContentCreator email to be obtained.
    /// 
    /// @return bool
    ///     bool object
    /// 
    /// </summary>
    /// <param name="email"></param>
    Task<bool> GetContentCreatorByEmailAsync(string email, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get ContentCreator by email
    /// 
    /// @param email
    ///     The ContentCreator email to be obtained.
    /// 
    /// @return bool
    ///     bool object
    /// 
    /// </summary>
    /// <param name="email"></param>
    Task<bool> GetContentCreatorByStageNameAsync(string email, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Register a Content Creator.
    /// 
    /// @param newContentCreator
    /// 
    /// @return ContentCreator
    ///     ContentCreator object added
    /// 
    /// </summary>
    /// <param name="newContentCreator"></param>
    Task<ContentCreator> AddContentCreatorAsync(ContentCreator newContentCreator, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Delete a ContentCreator
    /// 
    /// @param email
    ///     The Content Creator email of the Content Creator to be deleted.
    /// 
    /// @return Id
    ///     The Content Creator Id of the Content Creator deleted.
    /// 
    /// </summary>
    /// <param name="email"></param>
    Task<short> DeleteContentCreatorAsync(string email, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Content Creator name.
    /// 
    /// @param email
    ///     The Content Creator Email of the Consumer which require an update name.
    /// 
    /// @return ContentCreator
    ///     Modified Content Creator obejct.
    /// 
    /// </summary>
    /// <param name="email"></param>
    /// <param name="currentPassword"></param>
    /// <param name="newName"></param>
    /// <param name="newLastName"></param>
    Task<ContentCreator> UpdateContentCreatorNameAsync(string email, string currentPassword, string newName, string newLastName, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Content Creator password.
    /// 
    /// @param email
    ///     The Content Creator Email of the Consumer which require an update password.
    /// 
    /// @return ContentCreator
    ///     Modified Content Creator obejct.
    /// 
    /// </summary>
    /// <param name="email"></param>
    /// <param name="currentPassword"></param>
    /// <param name="newPassword"></param>
    Task<ContentCreator> UpdateContentCreatorPasswordAsync(string email, string currentPassword, string newPassword, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Content Creator image.
    /// 
    /// @param email
    ///     The Content Creator Email of the Consumer which require an update image.
    /// 
    /// @return bool
    ///     True or False
    /// 
    /// </summary>
    /// <param name="email"></param>
    /// <param name="fileName"></param>
    Task<bool> UpdateContentCreatorImageAsync(string email, string fileName, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Content Creator stage name.
    /// 
    /// @param email
    ///     The Content Creator Email of the Consumer which require an update stage name.
    /// 
    /// @return ContentCreator
    ///     Modified Content Creator obejct.
    /// 
    /// </summary>
    /// <param name="email"></param>
    /// <param name="currentPassword"></param>
    /// <param name="newStageName"></param>
    Task<ContentCreator> UpdateContentCreatorStageNameAsync(string email, string currentPassword, string newStageName, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Content Creator description.
    /// 
    /// @param email
    ///     The Content Creator Email of the Consumer which require an update description.
    /// 
    /// @return ContentCreator
    ///     Modified Content Creator obejct
    /// 
    /// </summary>
    /// <param name="email"></param>
    /// <param name="currentPassword"></param>
    /// <param name="newDescription"></param>
    Task<ContentCreator> UpdateContentCreatorDescriptionAsync(string email, string currentPassword, string newDescription, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Allows the login of a content creator
    /// 
    /// @param email
    ///     The Conntent Creator email
    /// 
    /// @param password
    ///     The Email password of the content creator
    /// 
    /// @return Content Creator
    ///     Content Creator object
    /// 
    /// </summary>
    /// <param name="email"></param>
    /// <param name="password"></param>
    Task<ContentCreator> LoginContentCreatorAsync(string email, string password, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Add a ContentCreator to Library.
    /// 
    /// @param idLibrary
    ///     The Library Id to which a content creator will be added
    /// 
    /// @param newContentCreator
    /// 
    /// @return ContentCreator
    ///     ContentCreator object added
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    /// <param name="newContentCreator"></param>
    Task<ContentCreator> AddContentCreatorToLibraryAsync(short idLibrary, ContentCreator newContentCreator, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Delete a Content Creator from a Library
    /// 
    /// @param idLibrary
    ///     The Library Id which a content creator will be deleted.
    /// 
    /// @param idContentCreator
    ///     The Content Creator Id which will be deleted
    /// 
    /// @return Id
    ///     The Content Creator Id of the Content Creator deleted.
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    /// <param name="idContentCreator"></param>
    Task<short> DeleteLibraryContentCreatorAsync(short idLibrary, short idContentCreator, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get ContentCreator by Query
    /// 
    /// @param query
    ///     The query to be obtained
    /// 
    /// @return ContentCreator
    ///     list<contentCreator>
    /// 
    /// </summary>
    /// <param name="query"></param>
    Task<List<ContentCreator>> GetContentCreatorByQueryAsync(string query, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Add image file binary
    /// 
    /// @param binary image
    ///     The binary number that will be keep.
    /// 
    /// @return bool
    ///     true or false.
    /// 
    /// </summary>
    /// <param name="fileName"></param>
    /// <param name="image"></param>
    Task<bool> AddImageToMediaAsync(string fileName, byte[] image, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get image file binary
    /// 
    /// @param binary image
    ///     The binary number that will be keep.
    /// 
    /// @return binary
    ///     binary image.
    /// 
    /// </summary>
    /// <param name="fileName"></param>
    Task<byte[]> GetImageToMediaAsync(string fileName, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Delete image file binary
    /// 
    /// @param fileName
    ///     The fileName of file that will be delete.
    /// 
    /// @return bool
    ///     True or False
    /// 
    /// </summary>
    /// <param name="fileName"></param>
    Task<bool> DeleteImageToMediaAsync(string fileName, CancellationToken cancellationToken = default(CancellationToken));

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)    {
    }
    public async Task<List<ContentCreator>> GetContentCreatorsAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContentCreators", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetContentCreatorsArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetContentCreatorsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContentCreators failed: unknown result");
    }

    public async Task<ContentCreator> GetContentCreatorByIdAsync(short idContentCreator, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContentCreatorById", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetContentCreatorByIdArgs();
      args.IdContentCreator = idContentCreator;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetContentCreatorByIdResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContentCreatorById failed: unknown result");
    }

    public async Task<List<ContentCreator>> GetContentCreatorByLibraryIdAsync(short idLibrary, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContentCreatorByLibraryId", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetContentCreatorByLibraryIdArgs();
      args.IdLibrary = idLibrary;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetContentCreatorByLibraryIdResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContentCreatorByLibraryId failed: unknown result");
    }

    public async Task<bool> GetContentCreatorByEmailAsync(string email, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContentCreatorByEmail", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetContentCreatorByEmailArgs();
      args.Email = email;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetContentCreatorByEmailResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContentCreatorByEmail failed: unknown result");
    }

    public async Task<bool> GetContentCreatorByStageNameAsync(string email, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContentCreatorByStageName", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetContentCreatorByStageNameArgs();
      args.Email = email;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetContentCreatorByStageNameResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContentCreatorByStageName failed: unknown result");
    }

    public async Task<ContentCreator> AddContentCreatorAsync(ContentCreator newContentCreator, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddContentCreator", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddContentCreatorArgs();
      args.NewContentCreator = newContentCreator;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddContentCreatorResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddContentCreator failed: unknown result");
    }

    public async Task<short> DeleteContentCreatorAsync(string email, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DeleteContentCreator", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new DeleteContentCreatorArgs();
      args.Email = email;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new DeleteContentCreatorResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteContentCreator failed: unknown result");
    }

    public async Task<ContentCreator> UpdateContentCreatorNameAsync(string email, string currentPassword, string newName, string newLastName, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorName", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdateContentCreatorNameArgs();
      args.Email = email;
      args.CurrentPassword = currentPassword;
      args.NewName = newName;
      args.NewLastName = newLastName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdateContentCreatorNameResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateContentCreatorName failed: unknown result");
    }

    public async Task<ContentCreator> UpdateContentCreatorPasswordAsync(string email, string currentPassword, string newPassword, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorPassword", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdateContentCreatorPasswordArgs();
      args.Email = email;
      args.CurrentPassword = currentPassword;
      args.NewPassword = newPassword;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdateContentCreatorPasswordResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateContentCreatorPassword failed: unknown result");
    }

    public async Task<bool> UpdateContentCreatorImageAsync(string email, string fileName, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorImage", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdateContentCreatorImageArgs();
      args.Email = email;
      args.FileName = fileName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdateContentCreatorImageResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateContentCreatorImage failed: unknown result");
    }

    public async Task<ContentCreator> UpdateContentCreatorStageNameAsync(string email, string currentPassword, string newStageName, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorStageName", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdateContentCreatorStageNameArgs();
      args.Email = email;
      args.CurrentPassword = currentPassword;
      args.NewStageName = newStageName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdateContentCreatorStageNameResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateContentCreatorStageName failed: unknown result");
    }

    public async Task<ContentCreator> UpdateContentCreatorDescriptionAsync(string email, string currentPassword, string newDescription, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorDescription", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdateContentCreatorDescriptionArgs();
      args.Email = email;
      args.CurrentPassword = currentPassword;
      args.NewDescription = newDescription;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdateContentCreatorDescriptionResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateContentCreatorDescription failed: unknown result");
    }

    public async Task<ContentCreator> LoginContentCreatorAsync(string email, string password, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("LoginContentCreator", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new LoginContentCreatorArgs();
      args.Email = email;
      args.Password = password;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new LoginContentCreatorResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorUserE)
      {
        throw result.SErrorUserE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LoginContentCreator failed: unknown result");
    }

    public async Task<ContentCreator> AddContentCreatorToLibraryAsync(short idLibrary, ContentCreator newContentCreator, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddContentCreatorToLibrary", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddContentCreatorToLibraryArgs();
      args.IdLibrary = idLibrary;
      args.NewContentCreator = newContentCreator;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddContentCreatorToLibraryResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddContentCreatorToLibrary failed: unknown result");
    }

    public async Task<short> DeleteLibraryContentCreatorAsync(short idLibrary, short idContentCreator, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DeleteLibraryContentCreator", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new DeleteLibraryContentCreatorArgs();
      args.IdLibrary = idLibrary;
      args.IdContentCreator = idContentCreator;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new DeleteLibraryContentCreatorResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteLibraryContentCreator failed: unknown result");
    }

    public async Task<List<ContentCreator>> GetContentCreatorByQueryAsync(string query, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContentCreatorByQuery", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetContentCreatorByQueryArgs();
      args.Query = query;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetContentCreatorByQueryResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContentCreatorByQuery failed: unknown result");
    }

    public async Task<bool> AddImageToMediaAsync(string fileName, byte[] image, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddImageToMedia", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddImageToMediaArgs();
      args.FileName = fileName;
      args.Image = image;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddImageToMediaResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddImageToMedia failed: unknown result");
    }

    public async Task<byte[]> GetImageToMediaAsync(string fileName, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetImageToMedia", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetImageToMediaArgs();
      args.FileName = fileName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetImageToMediaResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetImageToMedia failed: unknown result");
    }

    public async Task<bool> DeleteImageToMediaAsync(string fileName, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DeleteImageToMedia", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new DeleteImageToMediaArgs();
      args.FileName = fileName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new DeleteImageToMediaResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteImageToMedia failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private IAsync _iAsync;

    public AsyncProcessor(IAsync iAsync)
    {
      if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

      _iAsync = iAsync;
      processMap_["GetContentCreators"] = GetContentCreators_ProcessAsync;
      processMap_["GetContentCreatorById"] = GetContentCreatorById_ProcessAsync;
      processMap_["GetContentCreatorByLibraryId"] = GetContentCreatorByLibraryId_ProcessAsync;
      processMap_["GetContentCreatorByEmail"] = GetContentCreatorByEmail_ProcessAsync;
      processMap_["GetContentCreatorByStageName"] = GetContentCreatorByStageName_ProcessAsync;
      processMap_["AddContentCreator"] = AddContentCreator_ProcessAsync;
      processMap_["DeleteContentCreator"] = DeleteContentCreator_ProcessAsync;
      processMap_["UpdateContentCreatorName"] = UpdateContentCreatorName_ProcessAsync;
      processMap_["UpdateContentCreatorPassword"] = UpdateContentCreatorPassword_ProcessAsync;
      processMap_["UpdateContentCreatorImage"] = UpdateContentCreatorImage_ProcessAsync;
      processMap_["UpdateContentCreatorStageName"] = UpdateContentCreatorStageName_ProcessAsync;
      processMap_["UpdateContentCreatorDescription"] = UpdateContentCreatorDescription_ProcessAsync;
      processMap_["LoginContentCreator"] = LoginContentCreator_ProcessAsync;
      processMap_["AddContentCreatorToLibrary"] = AddContentCreatorToLibrary_ProcessAsync;
      processMap_["DeleteLibraryContentCreator"] = DeleteLibraryContentCreator_ProcessAsync;
      processMap_["GetContentCreatorByQuery"] = GetContentCreatorByQuery_ProcessAsync;
      processMap_["AddImageToMedia"] = AddImageToMedia_ProcessAsync;
      processMap_["GetImageToMedia"] = GetImageToMedia_ProcessAsync;
      processMap_["DeleteImageToMedia"] = DeleteImageToMedia_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async Task GetContentCreators_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetContentCreatorsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetContentCreatorsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetContentCreatorsAsync(cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreators", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreators", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetContentCreatorById_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetContentCreatorByIdArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetContentCreatorByIdResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetContentCreatorByIdAsync(args.IdContentCreator, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreatorById", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreatorById", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetContentCreatorByLibraryId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetContentCreatorByLibraryIdArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetContentCreatorByLibraryIdResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetContentCreatorByLibraryIdAsync(args.IdLibrary, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreatorByLibraryId", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreatorByLibraryId", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetContentCreatorByEmail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetContentCreatorByEmailArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetContentCreatorByEmailResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetContentCreatorByEmailAsync(args.Email, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreatorByEmail", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreatorByEmail", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetContentCreatorByStageName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetContentCreatorByStageNameArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetContentCreatorByStageNameResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetContentCreatorByStageNameAsync(args.Email, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreatorByStageName", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreatorByStageName", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddContentCreator_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddContentCreatorArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddContentCreatorResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddContentCreatorAsync(args.NewContentCreator, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddContentCreator", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddContentCreator", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task DeleteContentCreator_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new DeleteContentCreatorArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new DeleteContentCreatorResult();
      try
      {
        try
        {
          result.Success = await _iAsync.DeleteContentCreatorAsync(args.Email, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteContentCreator", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteContentCreator", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdateContentCreatorName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdateContentCreatorNameArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdateContentCreatorNameResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdateContentCreatorNameAsync(args.Email, args.CurrentPassword, args.NewName, args.NewLastName, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorName", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorName", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdateContentCreatorPassword_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdateContentCreatorPasswordArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdateContentCreatorPasswordResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdateContentCreatorPasswordAsync(args.Email, args.CurrentPassword, args.NewPassword, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorPassword", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorPassword", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdateContentCreatorImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdateContentCreatorImageArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdateContentCreatorImageResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdateContentCreatorImageAsync(args.Email, args.FileName, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorImage", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorImage", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdateContentCreatorStageName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdateContentCreatorStageNameArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdateContentCreatorStageNameResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdateContentCreatorStageNameAsync(args.Email, args.CurrentPassword, args.NewStageName, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorStageName", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorStageName", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdateContentCreatorDescription_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdateContentCreatorDescriptionArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdateContentCreatorDescriptionResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdateContentCreatorDescriptionAsync(args.Email, args.CurrentPassword, args.NewDescription, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorDescription", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateContentCreatorDescription", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task LoginContentCreator_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new LoginContentCreatorArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new LoginContentCreatorResult();
      try
      {
        try
        {
          result.Success = await _iAsync.LoginContentCreatorAsync(args.Email, args.Password, cancellationToken);
        }
        catch (SErrorUserException sErrorUserE)
        {
          result.SErrorUserE = sErrorUserE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("LoginContentCreator", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("LoginContentCreator", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddContentCreatorToLibrary_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddContentCreatorToLibraryArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddContentCreatorToLibraryResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddContentCreatorToLibraryAsync(args.IdLibrary, args.NewContentCreator, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddContentCreatorToLibrary", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddContentCreatorToLibrary", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task DeleteLibraryContentCreator_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new DeleteLibraryContentCreatorArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new DeleteLibraryContentCreatorResult();
      try
      {
        try
        {
          result.Success = await _iAsync.DeleteLibraryContentCreatorAsync(args.IdLibrary, args.IdContentCreator, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteLibraryContentCreator", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteLibraryContentCreator", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetContentCreatorByQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetContentCreatorByQueryArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetContentCreatorByQueryResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetContentCreatorByQueryAsync(args.Query, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreatorByQuery", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetContentCreatorByQuery", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddImageToMedia_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddImageToMediaArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddImageToMediaResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddImageToMediaAsync(args.FileName, args.Image, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddImageToMedia", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddImageToMedia", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetImageToMedia_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetImageToMediaArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetImageToMediaResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetImageToMediaAsync(args.FileName, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetImageToMedia", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetImageToMedia", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task DeleteImageToMedia_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new DeleteImageToMediaArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new DeleteImageToMediaResult();
      try
      {
        try
        {
          result.Success = await _iAsync.DeleteImageToMediaAsync(args.FileName, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteImageToMedia", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteImageToMedia", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }


  public partial class GetContentCreatorsArgs : TBase
  {

    public GetContentCreatorsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreators_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorsArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreators_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorsResult : TBase
  {
    private List<ContentCreator> _success;
    private SErrorUserException _sErrorUserE;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public List<ContentCreator> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorNotFoundE;
      public bool sErrorInvalidRequestE;
    }

    public GetContentCreatorsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<ContentCreator>(_list0.Count);
                  for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    ContentCreator _elem2;
                    _elem2 = new ContentCreator();
                    await _elem2.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem2);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreators_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (ContentCreator _iter3 in Success)
              {
                await _iter3.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorsResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreators_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorByIdArgs : TBase
  {
    private short _idContentCreator;

    public short IdContentCreator
    {
      get
      {
        return _idContentCreator;
      }
      set
      {
        __isset.idContentCreator = true;
        this._idContentCreator = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idContentCreator;
    }

    public GetContentCreatorByIdArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdContentCreator = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreatorById_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idContentCreator)
        {
          field.Name = "idContentCreator";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdContentCreator, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorByIdArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idContentCreator == other.__isset.idContentCreator) && ((!__isset.idContentCreator) || (System.Object.Equals(IdContentCreator, other.IdContentCreator))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idContentCreator)
          hashcode = (hashcode * 397) + IdContentCreator.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreatorById_args(");
      bool __first = true;
      if (__isset.idContentCreator)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdContentCreator: ");
        sb.Append(IdContentCreator);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorByIdResult : TBase
  {
    private ContentCreator _success;
    private SErrorUserException _sErrorUserE;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public ContentCreator Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorNotFoundE;
      public bool sErrorInvalidRequestE;
    }

    public GetContentCreatorByIdResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new ContentCreator();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreatorById_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorByIdResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreatorById_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorByLibraryIdArgs : TBase
  {
    private short _idLibrary;

    public short IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
    }

    public GetContentCreatorByLibraryIdArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdLibrary = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreatorByLibraryId_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorByLibraryIdArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreatorByLibraryId_args(");
      bool __first = true;
      if (__isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorByLibraryIdResult : TBase
  {
    private List<ContentCreator> _success;
    private SErrorUserException _sErrorUserE;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public List<ContentCreator> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorNotFoundE;
      public bool sErrorInvalidRequestE;
    }

    public GetContentCreatorByLibraryIdResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list4 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<ContentCreator>(_list4.Count);
                  for(int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    ContentCreator _elem6;
                    _elem6 = new ContentCreator();
                    await _elem6.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem6);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreatorByLibraryId_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (ContentCreator _iter7 in Success)
              {
                await _iter7.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorByLibraryIdResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreatorByLibraryId_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorByEmailArgs : TBase
  {
    private string _email;

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool email;
    }

    public GetContentCreatorByEmailArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreatorByEmail_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Email != null && __isset.email)
        {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorByEmailArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.email)
          hashcode = (hashcode * 397) + Email.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreatorByEmail_args(");
      bool __first = true;
      if (Email != null && __isset.email)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Email: ");
        sb.Append(Email);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorByEmailResult : TBase
  {
    private bool _success;
    private SErrorUserException _sErrorUserE;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorNotFoundE;
      public bool sErrorInvalidRequestE;
    }

    public GetContentCreatorByEmailResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreatorByEmail_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorByEmailResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreatorByEmail_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorByStageNameArgs : TBase
  {
    private string _email;

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool email;
    }

    public GetContentCreatorByStageNameArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreatorByStageName_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Email != null && __isset.email)
        {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorByStageNameArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.email)
          hashcode = (hashcode * 397) + Email.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreatorByStageName_args(");
      bool __first = true;
      if (Email != null && __isset.email)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Email: ");
        sb.Append(Email);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorByStageNameResult : TBase
  {
    private bool _success;
    private SErrorUserException _sErrorUserE;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorNotFoundE;
      public bool sErrorInvalidRequestE;
    }

    public GetContentCreatorByStageNameResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreatorByStageName_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorByStageNameResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreatorByStageName_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddContentCreatorArgs : TBase
  {
    private ContentCreator _newContentCreator;

    public ContentCreator NewContentCreator
    {
      get
      {
        return _newContentCreator;
      }
      set
      {
        __isset.newContentCreator = true;
        this._newContentCreator = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool newContentCreator;
    }

    public AddContentCreatorArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                NewContentCreator = new ContentCreator();
                await NewContentCreator.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddContentCreator_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (NewContentCreator != null && __isset.newContentCreator)
        {
          field.Name = "newContentCreator";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NewContentCreator.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddContentCreatorArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.newContentCreator == other.__isset.newContentCreator) && ((!__isset.newContentCreator) || (System.Object.Equals(NewContentCreator, other.NewContentCreator))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.newContentCreator)
          hashcode = (hashcode * 397) + NewContentCreator.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddContentCreator_args(");
      bool __first = true;
      if (NewContentCreator != null && __isset.newContentCreator)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewContentCreator: ");
        sb.Append(NewContentCreator== null ? "<null>" : NewContentCreator.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddContentCreatorResult : TBase
  {
    private ContentCreator _success;
    private SErrorUserException _sErrorUserE;

    public ContentCreator Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
    }

    public AddContentCreatorResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new ContentCreator();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddContentCreator_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddContentCreatorResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddContentCreator_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteContentCreatorArgs : TBase
  {
    private string _email;

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool email;
    }

    public DeleteContentCreatorArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteContentCreator_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Email != null && __isset.email)
        {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteContentCreatorArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.email)
          hashcode = (hashcode * 397) + Email.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteContentCreator_args(");
      bool __first = true;
      if (Email != null && __isset.email)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Email: ");
        sb.Append(Email);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteContentCreatorResult : TBase
  {
    private short _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public DeleteContentCreatorResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteContentCreator_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteContentCreatorResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteContentCreator_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateContentCreatorNameArgs : TBase
  {
    private string _email;
    private string _currentPassword;
    private string _newName;
    private string _newLastName;

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string CurrentPassword
    {
      get
      {
        return _currentPassword;
      }
      set
      {
        __isset.currentPassword = true;
        this._currentPassword = value;
      }
    }

    public string NewName
    {
      get
      {
        return _newName;
      }
      set
      {
        __isset.newName = true;
        this._newName = value;
      }
    }

    public string NewLastName
    {
      get
      {
        return _newLastName;
      }
      set
      {
        __isset.newLastName = true;
        this._newLastName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool email;
      public bool currentPassword;
      public bool newName;
      public bool newLastName;
    }

    public UpdateContentCreatorNameArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                CurrentPassword = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                NewName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                NewLastName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateContentCreatorName_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Email != null && __isset.email)
        {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CurrentPassword != null && __isset.currentPassword)
        {
          field.Name = "currentPassword";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CurrentPassword, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewName != null && __isset.newName)
        {
          field.Name = "newName";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewLastName != null && __isset.newLastName)
        {
          field.Name = "newLastName";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewLastName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateContentCreatorNameArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))))
        && ((__isset.currentPassword == other.__isset.currentPassword) && ((!__isset.currentPassword) || (System.Object.Equals(CurrentPassword, other.CurrentPassword))))
        && ((__isset.newName == other.__isset.newName) && ((!__isset.newName) || (System.Object.Equals(NewName, other.NewName))))
        && ((__isset.newLastName == other.__isset.newLastName) && ((!__isset.newLastName) || (System.Object.Equals(NewLastName, other.NewLastName))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.email)
          hashcode = (hashcode * 397) + Email.GetHashCode();
        if(__isset.currentPassword)
          hashcode = (hashcode * 397) + CurrentPassword.GetHashCode();
        if(__isset.newName)
          hashcode = (hashcode * 397) + NewName.GetHashCode();
        if(__isset.newLastName)
          hashcode = (hashcode * 397) + NewLastName.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateContentCreatorName_args(");
      bool __first = true;
      if (Email != null && __isset.email)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Email: ");
        sb.Append(Email);
      }
      if (CurrentPassword != null && __isset.currentPassword)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CurrentPassword: ");
        sb.Append(CurrentPassword);
      }
      if (NewName != null && __isset.newName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewName: ");
        sb.Append(NewName);
      }
      if (NewLastName != null && __isset.newLastName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewLastName: ");
        sb.Append(NewLastName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateContentCreatorNameResult : TBase
  {
    private ContentCreator _success;
    private SErrorUserException _sErrorUserE;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public ContentCreator Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public UpdateContentCreatorNameResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new ContentCreator();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateContentCreatorName_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateContentCreatorNameResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateContentCreatorName_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateContentCreatorPasswordArgs : TBase
  {
    private string _email;
    private string _currentPassword;
    private string _newPassword;

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string CurrentPassword
    {
      get
      {
        return _currentPassword;
      }
      set
      {
        __isset.currentPassword = true;
        this._currentPassword = value;
      }
    }

    public string NewPassword
    {
      get
      {
        return _newPassword;
      }
      set
      {
        __isset.newPassword = true;
        this._newPassword = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool email;
      public bool currentPassword;
      public bool newPassword;
    }

    public UpdateContentCreatorPasswordArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                CurrentPassword = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                NewPassword = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateContentCreatorPassword_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Email != null && __isset.email)
        {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CurrentPassword != null && __isset.currentPassword)
        {
          field.Name = "currentPassword";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CurrentPassword, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewPassword != null && __isset.newPassword)
        {
          field.Name = "newPassword";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewPassword, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateContentCreatorPasswordArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))))
        && ((__isset.currentPassword == other.__isset.currentPassword) && ((!__isset.currentPassword) || (System.Object.Equals(CurrentPassword, other.CurrentPassword))))
        && ((__isset.newPassword == other.__isset.newPassword) && ((!__isset.newPassword) || (System.Object.Equals(NewPassword, other.NewPassword))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.email)
          hashcode = (hashcode * 397) + Email.GetHashCode();
        if(__isset.currentPassword)
          hashcode = (hashcode * 397) + CurrentPassword.GetHashCode();
        if(__isset.newPassword)
          hashcode = (hashcode * 397) + NewPassword.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateContentCreatorPassword_args(");
      bool __first = true;
      if (Email != null && __isset.email)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Email: ");
        sb.Append(Email);
      }
      if (CurrentPassword != null && __isset.currentPassword)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CurrentPassword: ");
        sb.Append(CurrentPassword);
      }
      if (NewPassword != null && __isset.newPassword)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewPassword: ");
        sb.Append(NewPassword);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateContentCreatorPasswordResult : TBase
  {
    private ContentCreator _success;
    private SErrorUserException _sErrorUserE;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public ContentCreator Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public UpdateContentCreatorPasswordResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new ContentCreator();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateContentCreatorPassword_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateContentCreatorPasswordResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateContentCreatorPassword_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateContentCreatorImageArgs : TBase
  {
    private string _email;
    private string _fileName;

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string FileName
    {
      get
      {
        return _fileName;
      }
      set
      {
        __isset.fileName = true;
        this._fileName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool email;
      public bool fileName;
    }

    public UpdateContentCreatorImageArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                FileName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateContentCreatorImage_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Email != null && __isset.email)
        {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (FileName != null && __isset.fileName)
        {
          field.Name = "fileName";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(FileName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateContentCreatorImageArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))))
        && ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (System.Object.Equals(FileName, other.FileName))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.email)
          hashcode = (hashcode * 397) + Email.GetHashCode();
        if(__isset.fileName)
          hashcode = (hashcode * 397) + FileName.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateContentCreatorImage_args(");
      bool __first = true;
      if (Email != null && __isset.email)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Email: ");
        sb.Append(Email);
      }
      if (FileName != null && __isset.fileName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FileName: ");
        sb.Append(FileName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateContentCreatorImageResult : TBase
  {
    private bool _success;
    private SErrorUserException _sErrorUserE;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public UpdateContentCreatorImageResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateContentCreatorImage_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateContentCreatorImageResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateContentCreatorImage_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateContentCreatorStageNameArgs : TBase
  {
    private string _email;
    private string _currentPassword;
    private string _newStageName;

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string CurrentPassword
    {
      get
      {
        return _currentPassword;
      }
      set
      {
        __isset.currentPassword = true;
        this._currentPassword = value;
      }
    }

    public string NewStageName
    {
      get
      {
        return _newStageName;
      }
      set
      {
        __isset.newStageName = true;
        this._newStageName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool email;
      public bool currentPassword;
      public bool newStageName;
    }

    public UpdateContentCreatorStageNameArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                CurrentPassword = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                NewStageName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateContentCreatorStageName_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Email != null && __isset.email)
        {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CurrentPassword != null && __isset.currentPassword)
        {
          field.Name = "currentPassword";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CurrentPassword, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewStageName != null && __isset.newStageName)
        {
          field.Name = "newStageName";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewStageName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateContentCreatorStageNameArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))))
        && ((__isset.currentPassword == other.__isset.currentPassword) && ((!__isset.currentPassword) || (System.Object.Equals(CurrentPassword, other.CurrentPassword))))
        && ((__isset.newStageName == other.__isset.newStageName) && ((!__isset.newStageName) || (System.Object.Equals(NewStageName, other.NewStageName))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.email)
          hashcode = (hashcode * 397) + Email.GetHashCode();
        if(__isset.currentPassword)
          hashcode = (hashcode * 397) + CurrentPassword.GetHashCode();
        if(__isset.newStageName)
          hashcode = (hashcode * 397) + NewStageName.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateContentCreatorStageName_args(");
      bool __first = true;
      if (Email != null && __isset.email)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Email: ");
        sb.Append(Email);
      }
      if (CurrentPassword != null && __isset.currentPassword)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CurrentPassword: ");
        sb.Append(CurrentPassword);
      }
      if (NewStageName != null && __isset.newStageName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewStageName: ");
        sb.Append(NewStageName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateContentCreatorStageNameResult : TBase
  {
    private ContentCreator _success;
    private SErrorUserException _sErrorUserE;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public ContentCreator Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public UpdateContentCreatorStageNameResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new ContentCreator();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateContentCreatorStageName_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateContentCreatorStageNameResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateContentCreatorStageName_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateContentCreatorDescriptionArgs : TBase
  {
    private string _email;
    private string _currentPassword;
    private string _newDescription;

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string CurrentPassword
    {
      get
      {
        return _currentPassword;
      }
      set
      {
        __isset.currentPassword = true;
        this._currentPassword = value;
      }
    }

    public string NewDescription
    {
      get
      {
        return _newDescription;
      }
      set
      {
        __isset.newDescription = true;
        this._newDescription = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool email;
      public bool currentPassword;
      public bool newDescription;
    }

    public UpdateContentCreatorDescriptionArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                CurrentPassword = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                NewDescription = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateContentCreatorDescription_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Email != null && __isset.email)
        {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (CurrentPassword != null && __isset.currentPassword)
        {
          field.Name = "currentPassword";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(CurrentPassword, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewDescription != null && __isset.newDescription)
        {
          field.Name = "newDescription";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewDescription, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateContentCreatorDescriptionArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))))
        && ((__isset.currentPassword == other.__isset.currentPassword) && ((!__isset.currentPassword) || (System.Object.Equals(CurrentPassword, other.CurrentPassword))))
        && ((__isset.newDescription == other.__isset.newDescription) && ((!__isset.newDescription) || (System.Object.Equals(NewDescription, other.NewDescription))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.email)
          hashcode = (hashcode * 397) + Email.GetHashCode();
        if(__isset.currentPassword)
          hashcode = (hashcode * 397) + CurrentPassword.GetHashCode();
        if(__isset.newDescription)
          hashcode = (hashcode * 397) + NewDescription.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateContentCreatorDescription_args(");
      bool __first = true;
      if (Email != null && __isset.email)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Email: ");
        sb.Append(Email);
      }
      if (CurrentPassword != null && __isset.currentPassword)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CurrentPassword: ");
        sb.Append(CurrentPassword);
      }
      if (NewDescription != null && __isset.newDescription)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewDescription: ");
        sb.Append(NewDescription);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateContentCreatorDescriptionResult : TBase
  {
    private ContentCreator _success;
    private SErrorUserException _sErrorUserE;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public ContentCreator Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public UpdateContentCreatorDescriptionResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new ContentCreator();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateContentCreatorDescription_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateContentCreatorDescriptionResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateContentCreatorDescription_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class LoginContentCreatorArgs : TBase
  {
    private string _email;
    private string _password;

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool email;
      public bool password;
    }

    public LoginContentCreatorArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Password = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("LoginContentCreator_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Email != null && __isset.email)
        {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Password != null && __isset.password)
        {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Password, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as LoginContentCreatorArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))))
        && ((__isset.password == other.__isset.password) && ((!__isset.password) || (System.Object.Equals(Password, other.Password))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.email)
          hashcode = (hashcode * 397) + Email.GetHashCode();
        if(__isset.password)
          hashcode = (hashcode * 397) + Password.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("LoginContentCreator_args(");
      bool __first = true;
      if (Email != null && __isset.email)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Email: ");
        sb.Append(Email);
      }
      if (Password != null && __isset.password)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Password: ");
        sb.Append(Password);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class LoginContentCreatorResult : TBase
  {
    private ContentCreator _success;
    private SErrorUserException _sErrorUserE;
    private SErrorSystemException _sErrorSystemE;

    public ContentCreator Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorUserException SErrorUserE
    {
      get
      {
        return _sErrorUserE;
      }
      set
      {
        __isset.sErrorUserE = true;
        this._sErrorUserE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorUserE;
      public bool sErrorSystemE;
    }

    public LoginContentCreatorResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new ContentCreator();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorUserE = new SErrorUserException();
                await SErrorUserE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("LoginContentCreator_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorUserE)
        {
          if (SErrorUserE != null)
          {
            field.Name = "SErrorUserE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorUserE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as LoginContentCreatorResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorUserE == other.__isset.sErrorUserE) && ((!__isset.sErrorUserE) || (System.Object.Equals(SErrorUserE, other.SErrorUserE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorUserE)
          hashcode = (hashcode * 397) + SErrorUserE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("LoginContentCreator_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorUserE != null && __isset.sErrorUserE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorUserE: ");
        sb.Append(SErrorUserE== null ? "<null>" : SErrorUserE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddContentCreatorToLibraryArgs : TBase
  {
    private short _idLibrary;
    private ContentCreator _newContentCreator;

    public short IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }

    public ContentCreator NewContentCreator
    {
      get
      {
        return _newContentCreator;
      }
      set
      {
        __isset.newContentCreator = true;
        this._newContentCreator = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
      public bool newContentCreator;
    }

    public AddContentCreatorToLibraryArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdLibrary = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                NewContentCreator = new ContentCreator();
                await NewContentCreator.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddContentCreatorToLibrary_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewContentCreator != null && __isset.newContentCreator)
        {
          field.Name = "newContentCreator";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NewContentCreator.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddContentCreatorToLibraryArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))))
        && ((__isset.newContentCreator == other.__isset.newContentCreator) && ((!__isset.newContentCreator) || (System.Object.Equals(NewContentCreator, other.NewContentCreator))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
        if(__isset.newContentCreator)
          hashcode = (hashcode * 397) + NewContentCreator.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddContentCreatorToLibrary_args(");
      bool __first = true;
      if (__isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      if (NewContentCreator != null && __isset.newContentCreator)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewContentCreator: ");
        sb.Append(NewContentCreator== null ? "<null>" : NewContentCreator.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddContentCreatorToLibraryResult : TBase
  {
    private ContentCreator _success;
    private SErrorSystemException _sErrorSystemE;

    public ContentCreator Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddContentCreatorToLibraryResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new ContentCreator();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddContentCreatorToLibrary_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddContentCreatorToLibraryResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddContentCreatorToLibrary_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteLibraryContentCreatorArgs : TBase
  {
    private short _idLibrary;
    private short _idContentCreator;

    public short IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }

    public short IdContentCreator
    {
      get
      {
        return _idContentCreator;
      }
      set
      {
        __isset.idContentCreator = true;
        this._idContentCreator = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
      public bool idContentCreator;
    }

    public DeleteLibraryContentCreatorArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdLibrary = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                IdContentCreator = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteLibraryContentCreator_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.idContentCreator)
        {
          field.Name = "idContentCreator";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdContentCreator, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteLibraryContentCreatorArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))))
        && ((__isset.idContentCreator == other.__isset.idContentCreator) && ((!__isset.idContentCreator) || (System.Object.Equals(IdContentCreator, other.IdContentCreator))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
        if(__isset.idContentCreator)
          hashcode = (hashcode * 397) + IdContentCreator.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteLibraryContentCreator_args(");
      bool __first = true;
      if (__isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      if (__isset.idContentCreator)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdContentCreator: ");
        sb.Append(IdContentCreator);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteLibraryContentCreatorResult : TBase
  {
    private short _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public DeleteLibraryContentCreatorResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteLibraryContentCreator_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteLibraryContentCreatorResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteLibraryContentCreator_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorByQueryArgs : TBase
  {
    private string _query;

    public string Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool query;
    }

    public GetContentCreatorByQueryArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Query = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreatorByQuery_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Query != null && __isset.query)
        {
          field.Name = "query";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Query, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorByQueryArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.query == other.__isset.query) && ((!__isset.query) || (System.Object.Equals(Query, other.Query))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.query)
          hashcode = (hashcode * 397) + Query.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreatorByQuery_args(");
      bool __first = true;
      if (Query != null && __isset.query)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Query: ");
        sb.Append(Query);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetContentCreatorByQueryResult : TBase
  {
    private List<ContentCreator> _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public List<ContentCreator> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public GetContentCreatorByQueryResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list8 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<ContentCreator>(_list8.Count);
                  for(int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    ContentCreator _elem10;
                    _elem10 = new ContentCreator();
                    await _elem10.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem10);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetContentCreatorByQuery_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (ContentCreator _iter11 in Success)
              {
                await _iter11.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetContentCreatorByQueryResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetContentCreatorByQuery_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddImageToMediaArgs : TBase
  {
    private string _fileName;
    private byte[] _image;

    public string FileName
    {
      get
      {
        return _fileName;
      }
      set
      {
        __isset.fileName = true;
        this._fileName = value;
      }
    }

    public byte[] Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool fileName;
      public bool image;
    }

    public AddImageToMediaArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                FileName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Image = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddImageToMedia_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (FileName != null && __isset.fileName)
        {
          field.Name = "fileName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(FileName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Image != null && __isset.image)
        {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Image, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddImageToMediaArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (System.Object.Equals(FileName, other.FileName))))
        && ((__isset.image == other.__isset.image) && ((!__isset.image) || (TCollections.Equals(Image, other.Image))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.fileName)
          hashcode = (hashcode * 397) + FileName.GetHashCode();
        if(__isset.image)
          hashcode = (hashcode * 397) + Image.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddImageToMedia_args(");
      bool __first = true;
      if (FileName != null && __isset.fileName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FileName: ");
        sb.Append(FileName);
      }
      if (Image != null && __isset.image)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Image: ");
        sb.Append(Image);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddImageToMediaResult : TBase
  {
    private bool _success;
    private SErrorSystemException _sErrorSystemE;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddImageToMediaResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddImageToMedia_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddImageToMediaResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddImageToMedia_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetImageToMediaArgs : TBase
  {
    private string _fileName;

    public string FileName
    {
      get
      {
        return _fileName;
      }
      set
      {
        __isset.fileName = true;
        this._fileName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool fileName;
    }

    public GetImageToMediaArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                FileName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetImageToMedia_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (FileName != null && __isset.fileName)
        {
          field.Name = "fileName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(FileName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetImageToMediaArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (System.Object.Equals(FileName, other.FileName))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.fileName)
          hashcode = (hashcode * 397) + FileName.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetImageToMedia_args(");
      bool __first = true;
      if (FileName != null && __isset.fileName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FileName: ");
        sb.Append(FileName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetImageToMediaResult : TBase
  {
    private byte[] _success;
    private SErrorSystemException _sErrorSystemE;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public GetImageToMediaResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetImageToMedia_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetImageToMediaResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetImageToMedia_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteImageToMediaArgs : TBase
  {
    private string _fileName;

    public string FileName
    {
      get
      {
        return _fileName;
      }
      set
      {
        __isset.fileName = true;
        this._fileName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool fileName;
    }

    public DeleteImageToMediaArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                FileName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteImageToMedia_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (FileName != null && __isset.fileName)
        {
          field.Name = "fileName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(FileName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteImageToMediaArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (System.Object.Equals(FileName, other.FileName))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.fileName)
          hashcode = (hashcode * 397) + FileName.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteImageToMedia_args(");
      bool __first = true;
      if (FileName != null && __isset.fileName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FileName: ");
        sb.Append(FileName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteImageToMediaResult : TBase
  {
    private bool _success;
    private SErrorSystemException _sErrorSystemE;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public DeleteImageToMediaResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteImageToMedia_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteImageToMediaResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteImageToMedia_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
