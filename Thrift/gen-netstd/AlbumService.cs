/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


public partial class AlbumService
{
  public interface IAsync
  {
    /// <summary>
    /// Get Album by Title
    /// 
    /// @param title
    ///     The Album Title to be obtained
    /// 
    /// @return Album
    ///     Album object
    /// 
    /// </summary>
    /// <param name="title"></param>
    Task<Album> GetAlbumByTitleAsync(string title, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get list of Track from Content creator by idContentCreator.
    /// 
    /// @param idContentCreator
    ///     The ContentCreator Id which a track will be added
    /// 
    /// @return list<Album>
    ///     Album found by idContenCreator
    /// 
    /// </summary>
    /// <param name="idContentCreator"></param>
    Task<List<Album>> GetAlbumsByContentCreatorIdAsync(short idContentCreator, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get list of Track from Content creator by idContentCreator.
    /// 
    /// @param idContentCreator
    ///     The ContentCreator Id which a track will be added
    /// 
    /// @return list<String>
    ///     Album found by idContenCreator
    /// 
    /// </summary>
    /// <param name="idContentCreator"></param>
    Task<List<Album>> GetSinglesByContentCreatorIdAsync(short idContentCreator, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get list of Album from Library by idLibrary.
    /// 
    /// @param idLibrary
    ///     The Library Id
    /// 
    /// @return list<Album>
    ///     Album found by idLibrary
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    Task<List<Album>> GetAlbumByLibraryIdAsync(short idLibrary, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Register an Album.
    /// 
    /// @param newAlbum
    /// 
    /// @return idNewAlbum
    ///   Album object added
    /// 
    /// </summary>
    /// <param name="newAlbum"></param>
    /// <param name="idContenCreator"></param>
    Task<short> AddAlbumAsync(Album newAlbum, short idContenCreator, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Register a featuring Album.
    /// 
    /// @param newAlbum
    /// 
    /// @return idNewAlbum
    ///   Featuring added
    /// 
    /// </summary>
    /// <param name="idNewAlbum"></param>
    /// <param name="idContenCreator"></param>
    Task<short> AddFeaturingAlbumAsync(short idNewAlbum, short idContenCreator, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Delete a Album
    /// 
    /// @param idAlbum
    ///     The Album Id of the Album to be deleted.
    /// 
    /// @return Id
    ///     The Album Id of the Album deleted.
    /// 
    /// </summary>
    /// <param name="idAlbum"></param>
    Task<short> DeleteAlbumAsync(short idAlbum, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Album title.
    /// 
    /// @param idAlbum
    ///     The Album Id of the Album which require an update title.
    /// 
    /// @return Album
    ///     Modified Album obejct.
    /// 
    /// </summary>
    /// <param name="idAlbum"></param>
    /// <param name="newAlbumTitle"></param>
    Task<Album> UpdateAlbumTitleAsync(short idAlbum, string newAlbumTitle, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Album cover.
    /// 
    /// @param idAlbum
    ///     The Album Id of the Album which require an update cover.
    /// 
    /// @return Album
    ///     Modified Album obejct.
    /// 
    /// </summary>
    /// <param name="idAlbum"></param>
    /// <param name="newCoverStoragePath"></param>
    Task<Album> UpdateAlbumCoverAsync(short idAlbum, string newCoverStoragePath, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Add an Album to Library.
    /// 
    /// @param idLibrary
    ///     The Library Id to which an album will be added
    /// 
    /// @param newAlbum
    /// 
    /// @return Album
    ///     Album object added
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    /// <param name="newAlbum"></param>
    Task<Album> AddAlbumToLibraryAsync(short idLibrary, Album newAlbum, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Delete an Album from a Library
    /// 
    /// @param idLibrary
    ///     The Library Id which an album will be deleted.
    /// 
    /// @param idAlbum
    ///     The Album Id which will be deleted
    /// 
    /// @return Id
    ///     The Album Id of the Album deleted.
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    /// <param name="idAlbum"></param>
    Task<short> DeleteLibraryAlbumAsync(short idLibrary, short idAlbum, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get Album by Query
    /// 
    /// @param query
    ///     The query to be obtained
    /// 
    /// @return Album
    ///     list<Album>
    /// 
    /// </summary>
    /// <param name="query"></param>
    Task<List<Album>> GetAlbumByQueryAsync(string query, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Add image file binary
    /// 
    /// @param binary image
    ///     The binary number that will be keep.
    /// 
    /// @return bool
    ///     true or false.
    /// 
    /// </summary>
    /// <param name="fileName"></param>
    /// <param name="image"></param>
    Task<bool> AddImageToMediaAsync(string fileName, byte[] image, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get image file binary
    /// 
    /// @param binary image
    ///     The binary number that will be keep.
    /// 
    /// @return binary
    ///     binary image.
    /// 
    /// </summary>
    /// <param name="fileName"></param>
    Task<byte[]> GetImageToMediaAsync(string fileName, CancellationToken cancellationToken = default(CancellationToken));

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)    {
    }
    public async Task<Album> GetAlbumByTitleAsync(string title, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetAlbumByTitle", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetAlbumByTitleArgs();
      args.Title = title;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetAlbumByTitleResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAlbumByTitle failed: unknown result");
    }

    public async Task<List<Album>> GetAlbumsByContentCreatorIdAsync(short idContentCreator, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetAlbumsByContentCreatorId", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetAlbumsByContentCreatorIdArgs();
      args.IdContentCreator = idContentCreator;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetAlbumsByContentCreatorIdResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAlbumsByContentCreatorId failed: unknown result");
    }

    public async Task<List<Album>> GetSinglesByContentCreatorIdAsync(short idContentCreator, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSinglesByContentCreatorId", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetSinglesByContentCreatorIdArgs();
      args.IdContentCreator = idContentCreator;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetSinglesByContentCreatorIdResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSinglesByContentCreatorId failed: unknown result");
    }

    public async Task<List<Album>> GetAlbumByLibraryIdAsync(short idLibrary, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetAlbumByLibraryId", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetAlbumByLibraryIdArgs();
      args.IdLibrary = idLibrary;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetAlbumByLibraryIdResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAlbumByLibraryId failed: unknown result");
    }

    public async Task<short> AddAlbumAsync(Album newAlbum, short idContenCreator, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddAlbum", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddAlbumArgs();
      args.NewAlbum = newAlbum;
      args.IdContenCreator = idContenCreator;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddAlbumResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddAlbum failed: unknown result");
    }

    public async Task<short> AddFeaturingAlbumAsync(short idNewAlbum, short idContenCreator, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddFeaturingAlbum", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddFeaturingAlbumArgs();
      args.IdNewAlbum = idNewAlbum;
      args.IdContenCreator = idContenCreator;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddFeaturingAlbumResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddFeaturingAlbum failed: unknown result");
    }

    public async Task<short> DeleteAlbumAsync(short idAlbum, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DeleteAlbum", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new DeleteAlbumArgs();
      args.IdAlbum = idAlbum;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new DeleteAlbumResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteAlbum failed: unknown result");
    }

    public async Task<Album> UpdateAlbumTitleAsync(short idAlbum, string newAlbumTitle, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdateAlbumTitle", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdateAlbumTitleArgs();
      args.IdAlbum = idAlbum;
      args.NewAlbumTitle = newAlbumTitle;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdateAlbumTitleResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateAlbumTitle failed: unknown result");
    }

    public async Task<Album> UpdateAlbumCoverAsync(short idAlbum, string newCoverStoragePath, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdateAlbumCover", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdateAlbumCoverArgs();
      args.IdAlbum = idAlbum;
      args.NewCoverStoragePath = newCoverStoragePath;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdateAlbumCoverResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateAlbumCover failed: unknown result");
    }

    public async Task<Album> AddAlbumToLibraryAsync(short idLibrary, Album newAlbum, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddAlbumToLibrary", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddAlbumToLibraryArgs();
      args.IdLibrary = idLibrary;
      args.NewAlbum = newAlbum;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddAlbumToLibraryResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddAlbumToLibrary failed: unknown result");
    }

    public async Task<short> DeleteLibraryAlbumAsync(short idLibrary, short idAlbum, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DeleteLibraryAlbum", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new DeleteLibraryAlbumArgs();
      args.IdLibrary = idLibrary;
      args.IdAlbum = idAlbum;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new DeleteLibraryAlbumResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteLibraryAlbum failed: unknown result");
    }

    public async Task<List<Album>> GetAlbumByQueryAsync(string query, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetAlbumByQuery", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetAlbumByQueryArgs();
      args.Query = query;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetAlbumByQueryResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAlbumByQuery failed: unknown result");
    }

    public async Task<bool> AddImageToMediaAsync(string fileName, byte[] image, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddImageToMedia", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddImageToMediaArgs();
      args.FileName = fileName;
      args.Image = image;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddImageToMediaResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddImageToMedia failed: unknown result");
    }

    public async Task<byte[]> GetImageToMediaAsync(string fileName, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetImageToMedia", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetImageToMediaArgs();
      args.FileName = fileName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetImageToMediaResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetImageToMedia failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private IAsync _iAsync;

    public AsyncProcessor(IAsync iAsync)
    {
      if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

      _iAsync = iAsync;
      processMap_["GetAlbumByTitle"] = GetAlbumByTitle_ProcessAsync;
      processMap_["GetAlbumsByContentCreatorId"] = GetAlbumsByContentCreatorId_ProcessAsync;
      processMap_["GetSinglesByContentCreatorId"] = GetSinglesByContentCreatorId_ProcessAsync;
      processMap_["GetAlbumByLibraryId"] = GetAlbumByLibraryId_ProcessAsync;
      processMap_["AddAlbum"] = AddAlbum_ProcessAsync;
      processMap_["AddFeaturingAlbum"] = AddFeaturingAlbum_ProcessAsync;
      processMap_["DeleteAlbum"] = DeleteAlbum_ProcessAsync;
      processMap_["UpdateAlbumTitle"] = UpdateAlbumTitle_ProcessAsync;
      processMap_["UpdateAlbumCover"] = UpdateAlbumCover_ProcessAsync;
      processMap_["AddAlbumToLibrary"] = AddAlbumToLibrary_ProcessAsync;
      processMap_["DeleteLibraryAlbum"] = DeleteLibraryAlbum_ProcessAsync;
      processMap_["GetAlbumByQuery"] = GetAlbumByQuery_ProcessAsync;
      processMap_["AddImageToMedia"] = AddImageToMedia_ProcessAsync;
      processMap_["GetImageToMedia"] = GetImageToMedia_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async Task GetAlbumByTitle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetAlbumByTitleArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetAlbumByTitleResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetAlbumByTitleAsync(args.Title, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetAlbumByTitle", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetAlbumByTitle", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetAlbumsByContentCreatorId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetAlbumsByContentCreatorIdArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetAlbumsByContentCreatorIdResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetAlbumsByContentCreatorIdAsync(args.IdContentCreator, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetAlbumsByContentCreatorId", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetAlbumsByContentCreatorId", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetSinglesByContentCreatorId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetSinglesByContentCreatorIdArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetSinglesByContentCreatorIdResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetSinglesByContentCreatorIdAsync(args.IdContentCreator, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetSinglesByContentCreatorId", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetSinglesByContentCreatorId", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetAlbumByLibraryId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetAlbumByLibraryIdArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetAlbumByLibraryIdResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetAlbumByLibraryIdAsync(args.IdLibrary, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetAlbumByLibraryId", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetAlbumByLibraryId", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddAlbum_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddAlbumArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddAlbumResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddAlbumAsync(args.NewAlbum, args.IdContenCreator, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddAlbum", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddAlbum", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddFeaturingAlbum_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddFeaturingAlbumArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddFeaturingAlbumResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddFeaturingAlbumAsync(args.IdNewAlbum, args.IdContenCreator, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddFeaturingAlbum", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddFeaturingAlbum", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task DeleteAlbum_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new DeleteAlbumArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new DeleteAlbumResult();
      try
      {
        try
        {
          result.Success = await _iAsync.DeleteAlbumAsync(args.IdAlbum, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteAlbum", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteAlbum", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdateAlbumTitle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdateAlbumTitleArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdateAlbumTitleResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdateAlbumTitleAsync(args.IdAlbum, args.NewAlbumTitle, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateAlbumTitle", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateAlbumTitle", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdateAlbumCover_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdateAlbumCoverArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdateAlbumCoverResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdateAlbumCoverAsync(args.IdAlbum, args.NewCoverStoragePath, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateAlbumCover", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateAlbumCover", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddAlbumToLibrary_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddAlbumToLibraryArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddAlbumToLibraryResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddAlbumToLibraryAsync(args.IdLibrary, args.NewAlbum, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddAlbumToLibrary", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddAlbumToLibrary", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task DeleteLibraryAlbum_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new DeleteLibraryAlbumArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new DeleteLibraryAlbumResult();
      try
      {
        try
        {
          result.Success = await _iAsync.DeleteLibraryAlbumAsync(args.IdLibrary, args.IdAlbum, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteLibraryAlbum", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteLibraryAlbum", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetAlbumByQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetAlbumByQueryArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetAlbumByQueryResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetAlbumByQueryAsync(args.Query, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetAlbumByQuery", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetAlbumByQuery", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddImageToMedia_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddImageToMediaArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddImageToMediaResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddImageToMediaAsync(args.FileName, args.Image, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddImageToMedia", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddImageToMedia", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetImageToMedia_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetImageToMediaArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetImageToMediaResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetImageToMediaAsync(args.FileName, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetImageToMedia", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetImageToMedia", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }


  public partial class GetAlbumByTitleArgs : TBase
  {
    private string _title;

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool title;
    }

    public GetAlbumByTitleArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Title = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetAlbumByTitle_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Title != null && __isset.title)
        {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Title, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetAlbumByTitleArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.title == other.__isset.title) && ((!__isset.title) || (System.Object.Equals(Title, other.Title))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.title)
          hashcode = (hashcode * 397) + Title.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetAlbumByTitle_args(");
      bool __first = true;
      if (Title != null && __isset.title)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Title: ");
        sb.Append(Title);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetAlbumByTitleResult : TBase
  {
    private Album _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public Album Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public GetAlbumByTitleResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Album();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetAlbumByTitle_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetAlbumByTitleResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetAlbumByTitle_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetAlbumsByContentCreatorIdArgs : TBase
  {
    private short _idContentCreator;

    public short IdContentCreator
    {
      get
      {
        return _idContentCreator;
      }
      set
      {
        __isset.idContentCreator = true;
        this._idContentCreator = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idContentCreator;
    }

    public GetAlbumsByContentCreatorIdArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdContentCreator = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetAlbumsByContentCreatorId_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idContentCreator)
        {
          field.Name = "idContentCreator";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdContentCreator, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetAlbumsByContentCreatorIdArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idContentCreator == other.__isset.idContentCreator) && ((!__isset.idContentCreator) || (System.Object.Equals(IdContentCreator, other.IdContentCreator))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idContentCreator)
          hashcode = (hashcode * 397) + IdContentCreator.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetAlbumsByContentCreatorId_args(");
      bool __first = true;
      if (__isset.idContentCreator)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdContentCreator: ");
        sb.Append(IdContentCreator);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetAlbumsByContentCreatorIdResult : TBase
  {
    private List<Album> _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public List<Album> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public GetAlbumsByContentCreatorIdResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list28 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<Album>(_list28.Count);
                  for(int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    Album _elem30;
                    _elem30 = new Album();
                    await _elem30.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem30);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetAlbumsByContentCreatorId_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Album _iter31 in Success)
              {
                await _iter31.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetAlbumsByContentCreatorIdResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetAlbumsByContentCreatorId_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetSinglesByContentCreatorIdArgs : TBase
  {
    private short _idContentCreator;

    public short IdContentCreator
    {
      get
      {
        return _idContentCreator;
      }
      set
      {
        __isset.idContentCreator = true;
        this._idContentCreator = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idContentCreator;
    }

    public GetSinglesByContentCreatorIdArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdContentCreator = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetSinglesByContentCreatorId_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idContentCreator)
        {
          field.Name = "idContentCreator";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdContentCreator, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetSinglesByContentCreatorIdArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idContentCreator == other.__isset.idContentCreator) && ((!__isset.idContentCreator) || (System.Object.Equals(IdContentCreator, other.IdContentCreator))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idContentCreator)
          hashcode = (hashcode * 397) + IdContentCreator.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetSinglesByContentCreatorId_args(");
      bool __first = true;
      if (__isset.idContentCreator)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdContentCreator: ");
        sb.Append(IdContentCreator);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetSinglesByContentCreatorIdResult : TBase
  {
    private List<Album> _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public List<Album> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public GetSinglesByContentCreatorIdResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list32 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<Album>(_list32.Count);
                  for(int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    Album _elem34;
                    _elem34 = new Album();
                    await _elem34.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem34);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetSinglesByContentCreatorId_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Album _iter35 in Success)
              {
                await _iter35.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetSinglesByContentCreatorIdResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetSinglesByContentCreatorId_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetAlbumByLibraryIdArgs : TBase
  {
    private short _idLibrary;

    public short IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
    }

    public GetAlbumByLibraryIdArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdLibrary = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetAlbumByLibraryId_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetAlbumByLibraryIdArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetAlbumByLibraryId_args(");
      bool __first = true;
      if (__isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetAlbumByLibraryIdResult : TBase
  {
    private List<Album> _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public List<Album> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public GetAlbumByLibraryIdResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list36 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<Album>(_list36.Count);
                  for(int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    Album _elem38;
                    _elem38 = new Album();
                    await _elem38.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem38);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetAlbumByLibraryId_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Album _iter39 in Success)
              {
                await _iter39.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetAlbumByLibraryIdResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetAlbumByLibraryId_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddAlbumArgs : TBase
  {
    private Album _newAlbum;
    private short _idContenCreator;

    public Album NewAlbum
    {
      get
      {
        return _newAlbum;
      }
      set
      {
        __isset.newAlbum = true;
        this._newAlbum = value;
      }
    }

    public short IdContenCreator
    {
      get
      {
        return _idContenCreator;
      }
      set
      {
        __isset.idContenCreator = true;
        this._idContenCreator = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool newAlbum;
      public bool idContenCreator;
    }

    public AddAlbumArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                NewAlbum = new Album();
                await NewAlbum.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                IdContenCreator = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddAlbum_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (NewAlbum != null && __isset.newAlbum)
        {
          field.Name = "newAlbum";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NewAlbum.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.idContenCreator)
        {
          field.Name = "idContenCreator";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdContenCreator, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddAlbumArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.newAlbum == other.__isset.newAlbum) && ((!__isset.newAlbum) || (System.Object.Equals(NewAlbum, other.NewAlbum))))
        && ((__isset.idContenCreator == other.__isset.idContenCreator) && ((!__isset.idContenCreator) || (System.Object.Equals(IdContenCreator, other.IdContenCreator))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.newAlbum)
          hashcode = (hashcode * 397) + NewAlbum.GetHashCode();
        if(__isset.idContenCreator)
          hashcode = (hashcode * 397) + IdContenCreator.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddAlbum_args(");
      bool __first = true;
      if (NewAlbum != null && __isset.newAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewAlbum: ");
        sb.Append(NewAlbum== null ? "<null>" : NewAlbum.ToString());
      }
      if (__isset.idContenCreator)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdContenCreator: ");
        sb.Append(IdContenCreator);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddAlbumResult : TBase
  {
    private short _success;
    private SErrorSystemException _sErrorSystemE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddAlbumResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddAlbum_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddAlbumResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddAlbum_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddFeaturingAlbumArgs : TBase
  {
    private short _idNewAlbum;
    private short _idContenCreator;

    public short IdNewAlbum
    {
      get
      {
        return _idNewAlbum;
      }
      set
      {
        __isset.idNewAlbum = true;
        this._idNewAlbum = value;
      }
    }

    public short IdContenCreator
    {
      get
      {
        return _idContenCreator;
      }
      set
      {
        __isset.idContenCreator = true;
        this._idContenCreator = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idNewAlbum;
      public bool idContenCreator;
    }

    public AddFeaturingAlbumArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdNewAlbum = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                IdContenCreator = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddFeaturingAlbum_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idNewAlbum)
        {
          field.Name = "idNewAlbum";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdNewAlbum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.idContenCreator)
        {
          field.Name = "idContenCreator";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdContenCreator, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddFeaturingAlbumArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idNewAlbum == other.__isset.idNewAlbum) && ((!__isset.idNewAlbum) || (System.Object.Equals(IdNewAlbum, other.IdNewAlbum))))
        && ((__isset.idContenCreator == other.__isset.idContenCreator) && ((!__isset.idContenCreator) || (System.Object.Equals(IdContenCreator, other.IdContenCreator))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idNewAlbum)
          hashcode = (hashcode * 397) + IdNewAlbum.GetHashCode();
        if(__isset.idContenCreator)
          hashcode = (hashcode * 397) + IdContenCreator.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddFeaturingAlbum_args(");
      bool __first = true;
      if (__isset.idNewAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdNewAlbum: ");
        sb.Append(IdNewAlbum);
      }
      if (__isset.idContenCreator)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdContenCreator: ");
        sb.Append(IdContenCreator);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddFeaturingAlbumResult : TBase
  {
    private short _success;
    private SErrorSystemException _sErrorSystemE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddFeaturingAlbumResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddFeaturingAlbum_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddFeaturingAlbumResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddFeaturingAlbum_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteAlbumArgs : TBase
  {
    private short _idAlbum;

    public short IdAlbum
    {
      get
      {
        return _idAlbum;
      }
      set
      {
        __isset.idAlbum = true;
        this._idAlbum = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idAlbum;
    }

    public DeleteAlbumArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdAlbum = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteAlbum_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idAlbum)
        {
          field.Name = "idAlbum";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdAlbum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteAlbumArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idAlbum == other.__isset.idAlbum) && ((!__isset.idAlbum) || (System.Object.Equals(IdAlbum, other.IdAlbum))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idAlbum)
          hashcode = (hashcode * 397) + IdAlbum.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteAlbum_args(");
      bool __first = true;
      if (__isset.idAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdAlbum: ");
        sb.Append(IdAlbum);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteAlbumResult : TBase
  {
    private short _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public DeleteAlbumResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteAlbum_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteAlbumResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteAlbum_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateAlbumTitleArgs : TBase
  {
    private short _idAlbum;
    private string _newAlbumTitle;

    public short IdAlbum
    {
      get
      {
        return _idAlbum;
      }
      set
      {
        __isset.idAlbum = true;
        this._idAlbum = value;
      }
    }

    public string NewAlbumTitle
    {
      get
      {
        return _newAlbumTitle;
      }
      set
      {
        __isset.newAlbumTitle = true;
        this._newAlbumTitle = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idAlbum;
      public bool newAlbumTitle;
    }

    public UpdateAlbumTitleArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdAlbum = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                NewAlbumTitle = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateAlbumTitle_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idAlbum)
        {
          field.Name = "idAlbum";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdAlbum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewAlbumTitle != null && __isset.newAlbumTitle)
        {
          field.Name = "newAlbumTitle";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewAlbumTitle, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateAlbumTitleArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idAlbum == other.__isset.idAlbum) && ((!__isset.idAlbum) || (System.Object.Equals(IdAlbum, other.IdAlbum))))
        && ((__isset.newAlbumTitle == other.__isset.newAlbumTitle) && ((!__isset.newAlbumTitle) || (System.Object.Equals(NewAlbumTitle, other.NewAlbumTitle))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idAlbum)
          hashcode = (hashcode * 397) + IdAlbum.GetHashCode();
        if(__isset.newAlbumTitle)
          hashcode = (hashcode * 397) + NewAlbumTitle.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateAlbumTitle_args(");
      bool __first = true;
      if (__isset.idAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdAlbum: ");
        sb.Append(IdAlbum);
      }
      if (NewAlbumTitle != null && __isset.newAlbumTitle)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewAlbumTitle: ");
        sb.Append(NewAlbumTitle);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateAlbumTitleResult : TBase
  {
    private Album _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public Album Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public UpdateAlbumTitleResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Album();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateAlbumTitle_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateAlbumTitleResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateAlbumTitle_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateAlbumCoverArgs : TBase
  {
    private short _idAlbum;
    private string _newCoverStoragePath;

    public short IdAlbum
    {
      get
      {
        return _idAlbum;
      }
      set
      {
        __isset.idAlbum = true;
        this._idAlbum = value;
      }
    }

    public string NewCoverStoragePath
    {
      get
      {
        return _newCoverStoragePath;
      }
      set
      {
        __isset.newCoverStoragePath = true;
        this._newCoverStoragePath = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idAlbum;
      public bool newCoverStoragePath;
    }

    public UpdateAlbumCoverArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdAlbum = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                NewCoverStoragePath = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateAlbumCover_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idAlbum)
        {
          field.Name = "idAlbum";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdAlbum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewCoverStoragePath != null && __isset.newCoverStoragePath)
        {
          field.Name = "newCoverStoragePath";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewCoverStoragePath, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateAlbumCoverArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idAlbum == other.__isset.idAlbum) && ((!__isset.idAlbum) || (System.Object.Equals(IdAlbum, other.IdAlbum))))
        && ((__isset.newCoverStoragePath == other.__isset.newCoverStoragePath) && ((!__isset.newCoverStoragePath) || (System.Object.Equals(NewCoverStoragePath, other.NewCoverStoragePath))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idAlbum)
          hashcode = (hashcode * 397) + IdAlbum.GetHashCode();
        if(__isset.newCoverStoragePath)
          hashcode = (hashcode * 397) + NewCoverStoragePath.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateAlbumCover_args(");
      bool __first = true;
      if (__isset.idAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdAlbum: ");
        sb.Append(IdAlbum);
      }
      if (NewCoverStoragePath != null && __isset.newCoverStoragePath)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewCoverStoragePath: ");
        sb.Append(NewCoverStoragePath);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateAlbumCoverResult : TBase
  {
    private Album _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public Album Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public UpdateAlbumCoverResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Album();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateAlbumCover_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateAlbumCoverResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateAlbumCover_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddAlbumToLibraryArgs : TBase
  {
    private short _idLibrary;
    private Album _newAlbum;

    public short IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }

    public Album NewAlbum
    {
      get
      {
        return _newAlbum;
      }
      set
      {
        __isset.newAlbum = true;
        this._newAlbum = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
      public bool newAlbum;
    }

    public AddAlbumToLibraryArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdLibrary = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                NewAlbum = new Album();
                await NewAlbum.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddAlbumToLibrary_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewAlbum != null && __isset.newAlbum)
        {
          field.Name = "newAlbum";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NewAlbum.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddAlbumToLibraryArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))))
        && ((__isset.newAlbum == other.__isset.newAlbum) && ((!__isset.newAlbum) || (System.Object.Equals(NewAlbum, other.NewAlbum))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
        if(__isset.newAlbum)
          hashcode = (hashcode * 397) + NewAlbum.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddAlbumToLibrary_args(");
      bool __first = true;
      if (__isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      if (NewAlbum != null && __isset.newAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewAlbum: ");
        sb.Append(NewAlbum== null ? "<null>" : NewAlbum.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddAlbumToLibraryResult : TBase
  {
    private Album _success;
    private SErrorSystemException _sErrorSystemE;

    public Album Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddAlbumToLibraryResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Album();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddAlbumToLibrary_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddAlbumToLibraryResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddAlbumToLibrary_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteLibraryAlbumArgs : TBase
  {
    private short _idLibrary;
    private short _idAlbum;

    public short IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }

    public short IdAlbum
    {
      get
      {
        return _idAlbum;
      }
      set
      {
        __isset.idAlbum = true;
        this._idAlbum = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
      public bool idAlbum;
    }

    public DeleteLibraryAlbumArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdLibrary = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                IdAlbum = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteLibraryAlbum_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.idAlbum)
        {
          field.Name = "idAlbum";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdAlbum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteLibraryAlbumArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))))
        && ((__isset.idAlbum == other.__isset.idAlbum) && ((!__isset.idAlbum) || (System.Object.Equals(IdAlbum, other.IdAlbum))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
        if(__isset.idAlbum)
          hashcode = (hashcode * 397) + IdAlbum.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteLibraryAlbum_args(");
      bool __first = true;
      if (__isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      if (__isset.idAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdAlbum: ");
        sb.Append(IdAlbum);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteLibraryAlbumResult : TBase
  {
    private short _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public DeleteLibraryAlbumResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteLibraryAlbum_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteLibraryAlbumResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteLibraryAlbum_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetAlbumByQueryArgs : TBase
  {
    private string _query;

    public string Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool query;
    }

    public GetAlbumByQueryArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Query = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetAlbumByQuery_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Query != null && __isset.query)
        {
          field.Name = "query";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Query, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetAlbumByQueryArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.query == other.__isset.query) && ((!__isset.query) || (System.Object.Equals(Query, other.Query))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.query)
          hashcode = (hashcode * 397) + Query.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetAlbumByQuery_args(");
      bool __first = true;
      if (Query != null && __isset.query)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Query: ");
        sb.Append(Query);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetAlbumByQueryResult : TBase
  {
    private List<Album> _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public List<Album> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public GetAlbumByQueryResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list40 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<Album>(_list40.Count);
                  for(int _i41 = 0; _i41 < _list40.Count; ++_i41)
                  {
                    Album _elem42;
                    _elem42 = new Album();
                    await _elem42.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem42);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetAlbumByQuery_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Album _iter43 in Success)
              {
                await _iter43.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetAlbumByQueryResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetAlbumByQuery_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddImageToMediaArgs : TBase
  {
    private string _fileName;
    private byte[] _image;

    public string FileName
    {
      get
      {
        return _fileName;
      }
      set
      {
        __isset.fileName = true;
        this._fileName = value;
      }
    }

    public byte[] Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool fileName;
      public bool image;
    }

    public AddImageToMediaArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                FileName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Image = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddImageToMedia_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (FileName != null && __isset.fileName)
        {
          field.Name = "fileName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(FileName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Image != null && __isset.image)
        {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Image, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddImageToMediaArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (System.Object.Equals(FileName, other.FileName))))
        && ((__isset.image == other.__isset.image) && ((!__isset.image) || (TCollections.Equals(Image, other.Image))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.fileName)
          hashcode = (hashcode * 397) + FileName.GetHashCode();
        if(__isset.image)
          hashcode = (hashcode * 397) + Image.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddImageToMedia_args(");
      bool __first = true;
      if (FileName != null && __isset.fileName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FileName: ");
        sb.Append(FileName);
      }
      if (Image != null && __isset.image)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Image: ");
        sb.Append(Image);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddImageToMediaResult : TBase
  {
    private bool _success;
    private SErrorSystemException _sErrorSystemE;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddImageToMediaResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddImageToMedia_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddImageToMediaResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddImageToMedia_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetImageToMediaArgs : TBase
  {
    private string _fileName;

    public string FileName
    {
      get
      {
        return _fileName;
      }
      set
      {
        __isset.fileName = true;
        this._fileName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool fileName;
    }

    public GetImageToMediaArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                FileName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetImageToMedia_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (FileName != null && __isset.fileName)
        {
          field.Name = "fileName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(FileName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetImageToMediaArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (System.Object.Equals(FileName, other.FileName))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.fileName)
          hashcode = (hashcode * 397) + FileName.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetImageToMedia_args(");
      bool __first = true;
      if (FileName != null && __isset.fileName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FileName: ");
        sb.Append(FileName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetImageToMediaResult : TBase
  {
    private byte[] _success;
    private SErrorSystemException _sErrorSystemE;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public GetImageToMediaResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetImageToMedia_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetImageToMediaResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetImageToMedia_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
