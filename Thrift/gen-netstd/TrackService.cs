/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


public partial class TrackService
{
  public interface IAsync
  {
    /// <summary>
    /// Get Track by Title
    /// 
    /// @param title
    ///     The Track Title to be obtained
    /// 
    /// @return Track
    ///     Track object
    /// 
    /// </summary>
    /// <param name="title"></param>
    Task<Track> GetTrackByTitleAsync(string title, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get Track by idAlbum
    /// 
    /// @param idAlbum
    ///     The Track Title to be obtained
    /// 
    /// @return Track
    ///     list<Track>
    /// 
    /// </summary>
    /// <param name="idAlbum"></param>
    Task<List<Track>> GetTrackByAlbumIdAsync(short idAlbum, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Add a Track to an Album.
    /// 
    /// @param idAlbum
    ///     The Album Id which a track will be added
    /// 
    /// @param newTrack
    /// 
    /// @return Track
    ///     Track object added
    /// 
    /// </summary>
    /// <param name="idAlbum"></param>
    /// <param name="newTrack"></param>
    Task<Track> AddTrackToAlbumAsync(short idAlbum, Track newTrack, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Delete a Track from an Album
    /// 
    /// @param idAlbum
    ///     The Album Id which a track will be deleted.
    /// 
    /// @param trackNumber
    ///     The Track number which will be deleted
    /// 
    /// @return Id
    ///     The Track Id of the Track deleted.
    /// 
    /// </summary>
    /// <param name="idAlbum"></param>
    /// <param name="trackNumber"></param>
    Task<short> DeleteAlbumTrackAsync(short idAlbum, short trackNumber, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Album track title.
    /// 
    /// @param idAlbum
    ///     The Album Id of the Album which require an update track title.
    /// 
    /// @param trackNumber
    ///     The Track number of the Track which require an update title
    /// 
    /// @return Album
    ///     Modified Album obejct.
    /// 
    /// </summary>
    /// <param name="idAlbum"></param>
    /// <param name="trackNumber"></param>
    /// <param name="newAlbumTrackTitle"></param>
    Task<Track> UpdateAlbumTrackTitleAsync(short idAlbum, short trackNumber, string newAlbumTrackTitle, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// Update previously registered Album track featuring.
    /// 
    /// @param idAlbum
    ///     The Album Id of the Album which require an update track featuring.
    /// 
    /// @param trackNumber
    ///     The Track number of the Track which require an update featuring
    /// 
    /// @return Album
    ///     Modified Album obejct.
    /// 
    /// </summary>
    /// <param name="idAlbum"></param>
    /// <param name="trackNumber"></param>
    /// <param name="newFeaturing"></param>
    Task<Track> UpdateAlbumTrackFeaturingAsync(short idAlbum, short trackNumber, ContentCreator newFeaturing, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Add a Track to Library.
    /// 
    /// @param idLibrary
    ///     The Library Id to which a track will be added
    /// 
    /// @param newTrack
    /// 
    /// @return Track
    ///     Track object added
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    /// <param name="newTrack"></param>
    Task<Track> AddTrackToLibraryAsync(short idLibrary, Track newTrack, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Delete a Track from a Library
    /// 
    /// @param idLibrary
    ///     The Library Id which a track will be deleted.
    /// 
    /// @param trackNumber
    ///     The Track number which will be deleted
    /// 
    /// @return Id
    ///     The Track Id of the Track deleted.
    /// 
    /// </summary>
    /// <param name="idLibrary"></param>
    /// <param name="trackNumber"></param>
    Task<short> DeleteLibraryTrackAsync(short idLibrary, short trackNumber, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Add a Track to Playlist.
    /// 
    /// @param idPlaylist
    ///     The Playlist Id to which a track will be added
    /// 
    /// @param newTrack
    /// 
    /// @return Track
    ///     Track object added
    /// 
    /// </summary>
    /// <param name="idPlaylist"></param>
    /// <param name="newtrack"></param>
    Task<Track> AddTrackToPlaylistAsync(short idPlaylist, Track newtrack, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Delete a Track from a Playlist
    /// 
    /// @param idPlaylist
    ///     The Playlist Id which a track will be deleted.
    /// 
    /// @param trackNumber
    ///     The Track number which will be deleted
    /// 
    /// @return Id
    ///     The Track Id of the Track deleted.
    /// 
    /// </summary>
    /// <param name="idPlaylist"></param>
    /// <param name="trackNumber"></param>
    Task<short> DeletePlaylistTrackAsync(short idPlaylist, short trackNumber, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Add a Track to PlayQueue.
    /// 
    /// @param idPlayQueue
    ///     The PlayQueue Id to which a track will be added
    /// 
    /// @param newTrack
    /// 
    /// @return Track
    ///     Track object added
    /// 
    /// </summary>
    /// <param name="idPlayQueu"></param>
    /// <param name="newTrack"></param>
    Task<Track> AddTrackToPlayQueueAsync(short idPlayQueu, Track newTrack, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Delete a Track from a PlayQueue
    /// 
    /// @param idPlayQueue
    ///     The PlayQueue Id which a track will be deleted.
    /// 
    /// @param trackNumber
    ///     The Track number which will be deleted
    /// 
    /// @return Id
    ///     The Track Id of the Track deleted.
    /// 
    /// </summary>
    /// <param name="idPlayQueu"></param>
    /// <param name="trackNumber"></param>
    Task<short> DeletePlayQueueTrackAsync(short idPlayQueu, short trackNumber, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Generate a Radio Station
    /// 
    /// @param gender
    ///     The gender which the radio station will be generated.
    /// 
    /// @return tracks
    ///     List of tracks which belong to the gender entered.
    /// 
    /// </summary>
    /// <param name="gender"></param>
    Task<List<Track>> GenerateRadioStationAsync(MusicGender gender, CancellationToken cancellationToken = default(CancellationToken));

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)    {
    }
    public async Task<Track> GetTrackByTitleAsync(string title, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTrackByTitle", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetTrackByTitleArgs();
      args.Title = title;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetTrackByTitleResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTrackByTitle failed: unknown result");
    }

    public async Task<List<Track>> GetTrackByAlbumIdAsync(short idAlbum, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTrackByAlbumId", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GetTrackByAlbumIdArgs();
      args.IdAlbum = idAlbum;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GetTrackByAlbumIdResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTrackByAlbumId failed: unknown result");
    }

    public async Task<Track> AddTrackToAlbumAsync(short idAlbum, Track newTrack, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddTrackToAlbum", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddTrackToAlbumArgs();
      args.IdAlbum = idAlbum;
      args.NewTrack = newTrack;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddTrackToAlbumResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTrackToAlbum failed: unknown result");
    }

    public async Task<short> DeleteAlbumTrackAsync(short idAlbum, short trackNumber, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DeleteAlbumTrack", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new DeleteAlbumTrackArgs();
      args.IdAlbum = idAlbum;
      args.TrackNumber = trackNumber;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new DeleteAlbumTrackResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteAlbumTrack failed: unknown result");
    }

    public async Task<Track> UpdateAlbumTrackTitleAsync(short idAlbum, short trackNumber, string newAlbumTrackTitle, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdateAlbumTrackTitle", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdateAlbumTrackTitleArgs();
      args.IdAlbum = idAlbum;
      args.TrackNumber = trackNumber;
      args.NewAlbumTrackTitle = newAlbumTrackTitle;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdateAlbumTrackTitleResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateAlbumTrackTitle failed: unknown result");
    }

    public async Task<Track> UpdateAlbumTrackFeaturingAsync(short idAlbum, short trackNumber, ContentCreator newFeaturing, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UpdateAlbumTrackFeaturing", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new UpdateAlbumTrackFeaturingArgs();
      args.IdAlbum = idAlbum;
      args.TrackNumber = trackNumber;
      args.NewFeaturing = newFeaturing;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new UpdateAlbumTrackFeaturingResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      if (result.__isset.sErrorInvalidRequestE)
      {
        throw result.SErrorInvalidRequestE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateAlbumTrackFeaturing failed: unknown result");
    }

    public async Task<Track> AddTrackToLibraryAsync(short idLibrary, Track newTrack, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddTrackToLibrary", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddTrackToLibraryArgs();
      args.IdLibrary = idLibrary;
      args.NewTrack = newTrack;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddTrackToLibraryResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTrackToLibrary failed: unknown result");
    }

    public async Task<short> DeleteLibraryTrackAsync(short idLibrary, short trackNumber, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DeleteLibraryTrack", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new DeleteLibraryTrackArgs();
      args.IdLibrary = idLibrary;
      args.TrackNumber = trackNumber;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new DeleteLibraryTrackResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeleteLibraryTrack failed: unknown result");
    }

    public async Task<Track> AddTrackToPlaylistAsync(short idPlaylist, Track newtrack, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddTrackToPlaylist", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddTrackToPlaylistArgs();
      args.IdPlaylist = idPlaylist;
      args.Newtrack = newtrack;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddTrackToPlaylistResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTrackToPlaylist failed: unknown result");
    }

    public async Task<short> DeletePlaylistTrackAsync(short idPlaylist, short trackNumber, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DeletePlaylistTrack", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new DeletePlaylistTrackArgs();
      args.IdPlaylist = idPlaylist;
      args.TrackNumber = trackNumber;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new DeletePlaylistTrackResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeletePlaylistTrack failed: unknown result");
    }

    public async Task<Track> AddTrackToPlayQueueAsync(short idPlayQueu, Track newTrack, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddTrackToPlayQueue", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new AddTrackToPlayQueueArgs();
      args.IdPlayQueu = idPlayQueu;
      args.NewTrack = newTrack;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new AddTrackToPlayQueueResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddTrackToPlayQueue failed: unknown result");
    }

    public async Task<short> DeletePlayQueueTrackAsync(short idPlayQueu, short trackNumber, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DeletePlayQueueTrack", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new DeletePlayQueueTrackArgs();
      args.IdPlayQueu = idPlayQueu;
      args.TrackNumber = trackNumber;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new DeletePlayQueueTrackResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorNotFoundE)
      {
        throw result.SErrorNotFoundE;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DeletePlayQueueTrack failed: unknown result");
    }

    public async Task<List<Track>> GenerateRadioStationAsync(MusicGender gender, CancellationToken cancellationToken = default(CancellationToken))
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GenerateRadioStation", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new GenerateRadioStationArgs();
      args.Gender = gender;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new GenerateRadioStationResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.sErrorSystemE)
      {
        throw result.SErrorSystemE;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GenerateRadioStation failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private IAsync _iAsync;

    public AsyncProcessor(IAsync iAsync)
    {
      if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

      _iAsync = iAsync;
      processMap_["GetTrackByTitle"] = GetTrackByTitle_ProcessAsync;
      processMap_["GetTrackByAlbumId"] = GetTrackByAlbumId_ProcessAsync;
      processMap_["AddTrackToAlbum"] = AddTrackToAlbum_ProcessAsync;
      processMap_["DeleteAlbumTrack"] = DeleteAlbumTrack_ProcessAsync;
      processMap_["UpdateAlbumTrackTitle"] = UpdateAlbumTrackTitle_ProcessAsync;
      processMap_["UpdateAlbumTrackFeaturing"] = UpdateAlbumTrackFeaturing_ProcessAsync;
      processMap_["AddTrackToLibrary"] = AddTrackToLibrary_ProcessAsync;
      processMap_["DeleteLibraryTrack"] = DeleteLibraryTrack_ProcessAsync;
      processMap_["AddTrackToPlaylist"] = AddTrackToPlaylist_ProcessAsync;
      processMap_["DeletePlaylistTrack"] = DeletePlaylistTrack_ProcessAsync;
      processMap_["AddTrackToPlayQueue"] = AddTrackToPlayQueue_ProcessAsync;
      processMap_["DeletePlayQueueTrack"] = DeletePlayQueueTrack_ProcessAsync;
      processMap_["GenerateRadioStation"] = GenerateRadioStation_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async Task GetTrackByTitle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetTrackByTitleArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetTrackByTitleResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetTrackByTitleAsync(args.Title, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetTrackByTitle", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetTrackByTitle", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GetTrackByAlbumId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GetTrackByAlbumIdArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GetTrackByAlbumIdResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GetTrackByAlbumIdAsync(args.IdAlbum, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GetTrackByAlbumId", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetTrackByAlbumId", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddTrackToAlbum_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddTrackToAlbumArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddTrackToAlbumResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddTrackToAlbumAsync(args.IdAlbum, args.NewTrack, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddTrackToAlbum", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddTrackToAlbum", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task DeleteAlbumTrack_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new DeleteAlbumTrackArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new DeleteAlbumTrackResult();
      try
      {
        try
        {
          result.Success = await _iAsync.DeleteAlbumTrackAsync(args.IdAlbum, args.TrackNumber, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteAlbumTrack", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteAlbumTrack", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdateAlbumTrackTitle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdateAlbumTrackTitleArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdateAlbumTrackTitleResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdateAlbumTrackTitleAsync(args.IdAlbum, args.TrackNumber, args.NewAlbumTrackTitle, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateAlbumTrackTitle", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateAlbumTrackTitle", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task UpdateAlbumTrackFeaturing_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new UpdateAlbumTrackFeaturingArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new UpdateAlbumTrackFeaturingResult();
      try
      {
        try
        {
          result.Success = await _iAsync.UpdateAlbumTrackFeaturingAsync(args.IdAlbum, args.TrackNumber, args.NewFeaturing, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        catch (SErrorInvalidRequestException sErrorInvalidRequestE)
        {
          result.SErrorInvalidRequestE = sErrorInvalidRequestE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateAlbumTrackFeaturing", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UpdateAlbumTrackFeaturing", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddTrackToLibrary_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddTrackToLibraryArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddTrackToLibraryResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddTrackToLibraryAsync(args.IdLibrary, args.NewTrack, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddTrackToLibrary", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddTrackToLibrary", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task DeleteLibraryTrack_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new DeleteLibraryTrackArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new DeleteLibraryTrackResult();
      try
      {
        try
        {
          result.Success = await _iAsync.DeleteLibraryTrackAsync(args.IdLibrary, args.TrackNumber, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteLibraryTrack", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DeleteLibraryTrack", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddTrackToPlaylist_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddTrackToPlaylistArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddTrackToPlaylistResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddTrackToPlaylistAsync(args.IdPlaylist, args.Newtrack, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddTrackToPlaylist", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddTrackToPlaylist", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task DeletePlaylistTrack_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new DeletePlaylistTrackArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new DeletePlaylistTrackResult();
      try
      {
        try
        {
          result.Success = await _iAsync.DeletePlaylistTrackAsync(args.IdPlaylist, args.TrackNumber, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("DeletePlaylistTrack", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DeletePlaylistTrack", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task AddTrackToPlayQueue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new AddTrackToPlayQueueArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new AddTrackToPlayQueueResult();
      try
      {
        try
        {
          result.Success = await _iAsync.AddTrackToPlayQueueAsync(args.IdPlayQueu, args.NewTrack, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("AddTrackToPlayQueue", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("AddTrackToPlayQueue", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task DeletePlayQueueTrack_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new DeletePlayQueueTrackArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new DeletePlayQueueTrackResult();
      try
      {
        try
        {
          result.Success = await _iAsync.DeletePlayQueueTrackAsync(args.IdPlayQueu, args.TrackNumber, cancellationToken);
        }
        catch (SErrorNotFoundException sErrorNotFoundE)
        {
          result.SErrorNotFoundE = sErrorNotFoundE;
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("DeletePlayQueueTrack", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DeletePlayQueueTrack", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task GenerateRadioStation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new GenerateRadioStationArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new GenerateRadioStationResult();
      try
      {
        try
        {
          result.Success = await _iAsync.GenerateRadioStationAsync(args.Gender, cancellationToken);
        }
        catch (SErrorSystemException sErrorSystemE)
        {
          result.SErrorSystemE = sErrorSystemE;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("GenerateRadioStation", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GenerateRadioStation", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }


  public partial class GetTrackByTitleArgs : TBase
  {
    private string _title;

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool title;
    }

    public GetTrackByTitleArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Title = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetTrackByTitle_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Title != null && __isset.title)
        {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Title, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetTrackByTitleArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.title == other.__isset.title) && ((!__isset.title) || (System.Object.Equals(Title, other.Title))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.title)
          hashcode = (hashcode * 397) + Title.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetTrackByTitle_args(");
      bool __first = true;
      if (Title != null && __isset.title)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Title: ");
        sb.Append(Title);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetTrackByTitleResult : TBase
  {
    private Track _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public Track Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public GetTrackByTitleResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Track();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetTrackByTitle_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetTrackByTitleResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetTrackByTitle_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetTrackByAlbumIdArgs : TBase
  {
    private short _idAlbum;

    public short IdAlbum
    {
      get
      {
        return _idAlbum;
      }
      set
      {
        __isset.idAlbum = true;
        this._idAlbum = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idAlbum;
    }

    public GetTrackByAlbumIdArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdAlbum = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetTrackByAlbumId_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idAlbum)
        {
          field.Name = "idAlbum";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdAlbum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetTrackByAlbumIdArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idAlbum == other.__isset.idAlbum) && ((!__isset.idAlbum) || (System.Object.Equals(IdAlbum, other.IdAlbum))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idAlbum)
          hashcode = (hashcode * 397) + IdAlbum.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetTrackByAlbumId_args(");
      bool __first = true;
      if (__isset.idAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdAlbum: ");
        sb.Append(IdAlbum);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GetTrackByAlbumIdResult : TBase
  {
    private List<Track> _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public List<Track> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public GetTrackByAlbumIdResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list4 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<Track>(_list4.Count);
                  for(int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Track _elem6;
                    _elem6 = new Track();
                    await _elem6.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem6);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GetTrackByAlbumId_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Track _iter7 in Success)
              {
                await _iter7.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GetTrackByAlbumIdResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GetTrackByAlbumId_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddTrackToAlbumArgs : TBase
  {
    private short _idAlbum;
    private Track _newTrack;

    public short IdAlbum
    {
      get
      {
        return _idAlbum;
      }
      set
      {
        __isset.idAlbum = true;
        this._idAlbum = value;
      }
    }

    public Track NewTrack
    {
      get
      {
        return _newTrack;
      }
      set
      {
        __isset.newTrack = true;
        this._newTrack = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idAlbum;
      public bool newTrack;
    }

    public AddTrackToAlbumArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdAlbum = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                NewTrack = new Track();
                await NewTrack.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddTrackToAlbum_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idAlbum)
        {
          field.Name = "idAlbum";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdAlbum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewTrack != null && __isset.newTrack)
        {
          field.Name = "newTrack";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NewTrack.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddTrackToAlbumArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idAlbum == other.__isset.idAlbum) && ((!__isset.idAlbum) || (System.Object.Equals(IdAlbum, other.IdAlbum))))
        && ((__isset.newTrack == other.__isset.newTrack) && ((!__isset.newTrack) || (System.Object.Equals(NewTrack, other.NewTrack))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idAlbum)
          hashcode = (hashcode * 397) + IdAlbum.GetHashCode();
        if(__isset.newTrack)
          hashcode = (hashcode * 397) + NewTrack.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddTrackToAlbum_args(");
      bool __first = true;
      if (__isset.idAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdAlbum: ");
        sb.Append(IdAlbum);
      }
      if (NewTrack != null && __isset.newTrack)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewTrack: ");
        sb.Append(NewTrack== null ? "<null>" : NewTrack.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddTrackToAlbumResult : TBase
  {
    private Track _success;
    private SErrorSystemException _sErrorSystemE;

    public Track Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddTrackToAlbumResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Track();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddTrackToAlbum_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddTrackToAlbumResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddTrackToAlbum_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteAlbumTrackArgs : TBase
  {
    private short _idAlbum;
    private short _trackNumber;

    public short IdAlbum
    {
      get
      {
        return _idAlbum;
      }
      set
      {
        __isset.idAlbum = true;
        this._idAlbum = value;
      }
    }

    public short TrackNumber
    {
      get
      {
        return _trackNumber;
      }
      set
      {
        __isset.trackNumber = true;
        this._trackNumber = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idAlbum;
      public bool trackNumber;
    }

    public DeleteAlbumTrackArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdAlbum = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                TrackNumber = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteAlbumTrack_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idAlbum)
        {
          field.Name = "idAlbum";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdAlbum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.trackNumber)
        {
          field.Name = "trackNumber";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(TrackNumber, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteAlbumTrackArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idAlbum == other.__isset.idAlbum) && ((!__isset.idAlbum) || (System.Object.Equals(IdAlbum, other.IdAlbum))))
        && ((__isset.trackNumber == other.__isset.trackNumber) && ((!__isset.trackNumber) || (System.Object.Equals(TrackNumber, other.TrackNumber))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idAlbum)
          hashcode = (hashcode * 397) + IdAlbum.GetHashCode();
        if(__isset.trackNumber)
          hashcode = (hashcode * 397) + TrackNumber.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteAlbumTrack_args(");
      bool __first = true;
      if (__isset.idAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdAlbum: ");
        sb.Append(IdAlbum);
      }
      if (__isset.trackNumber)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TrackNumber: ");
        sb.Append(TrackNumber);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteAlbumTrackResult : TBase
  {
    private short _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public DeleteAlbumTrackResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteAlbumTrack_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteAlbumTrackResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteAlbumTrack_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateAlbumTrackTitleArgs : TBase
  {
    private short _idAlbum;
    private short _trackNumber;
    private string _newAlbumTrackTitle;

    public short IdAlbum
    {
      get
      {
        return _idAlbum;
      }
      set
      {
        __isset.idAlbum = true;
        this._idAlbum = value;
      }
    }

    public short TrackNumber
    {
      get
      {
        return _trackNumber;
      }
      set
      {
        __isset.trackNumber = true;
        this._trackNumber = value;
      }
    }

    public string NewAlbumTrackTitle
    {
      get
      {
        return _newAlbumTrackTitle;
      }
      set
      {
        __isset.newAlbumTrackTitle = true;
        this._newAlbumTrackTitle = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idAlbum;
      public bool trackNumber;
      public bool newAlbumTrackTitle;
    }

    public UpdateAlbumTrackTitleArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdAlbum = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                TrackNumber = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                NewAlbumTrackTitle = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateAlbumTrackTitle_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idAlbum)
        {
          field.Name = "idAlbum";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdAlbum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.trackNumber)
        {
          field.Name = "trackNumber";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(TrackNumber, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewAlbumTrackTitle != null && __isset.newAlbumTrackTitle)
        {
          field.Name = "newAlbumTrackTitle";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NewAlbumTrackTitle, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateAlbumTrackTitleArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idAlbum == other.__isset.idAlbum) && ((!__isset.idAlbum) || (System.Object.Equals(IdAlbum, other.IdAlbum))))
        && ((__isset.trackNumber == other.__isset.trackNumber) && ((!__isset.trackNumber) || (System.Object.Equals(TrackNumber, other.TrackNumber))))
        && ((__isset.newAlbumTrackTitle == other.__isset.newAlbumTrackTitle) && ((!__isset.newAlbumTrackTitle) || (System.Object.Equals(NewAlbumTrackTitle, other.NewAlbumTrackTitle))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idAlbum)
          hashcode = (hashcode * 397) + IdAlbum.GetHashCode();
        if(__isset.trackNumber)
          hashcode = (hashcode * 397) + TrackNumber.GetHashCode();
        if(__isset.newAlbumTrackTitle)
          hashcode = (hashcode * 397) + NewAlbumTrackTitle.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateAlbumTrackTitle_args(");
      bool __first = true;
      if (__isset.idAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdAlbum: ");
        sb.Append(IdAlbum);
      }
      if (__isset.trackNumber)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TrackNumber: ");
        sb.Append(TrackNumber);
      }
      if (NewAlbumTrackTitle != null && __isset.newAlbumTrackTitle)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewAlbumTrackTitle: ");
        sb.Append(NewAlbumTrackTitle);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateAlbumTrackTitleResult : TBase
  {
    private Track _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public Track Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public UpdateAlbumTrackTitleResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Track();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateAlbumTrackTitle_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateAlbumTrackTitleResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateAlbumTrackTitle_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateAlbumTrackFeaturingArgs : TBase
  {
    private short _idAlbum;
    private short _trackNumber;
    private ContentCreator _newFeaturing;

    public short IdAlbum
    {
      get
      {
        return _idAlbum;
      }
      set
      {
        __isset.idAlbum = true;
        this._idAlbum = value;
      }
    }

    public short TrackNumber
    {
      get
      {
        return _trackNumber;
      }
      set
      {
        __isset.trackNumber = true;
        this._trackNumber = value;
      }
    }

    public ContentCreator NewFeaturing
    {
      get
      {
        return _newFeaturing;
      }
      set
      {
        __isset.newFeaturing = true;
        this._newFeaturing = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idAlbum;
      public bool trackNumber;
      public bool newFeaturing;
    }

    public UpdateAlbumTrackFeaturingArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdAlbum = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                TrackNumber = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                NewFeaturing = new ContentCreator();
                await NewFeaturing.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateAlbumTrackFeaturing_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idAlbum)
        {
          field.Name = "idAlbum";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdAlbum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.trackNumber)
        {
          field.Name = "trackNumber";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(TrackNumber, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewFeaturing != null && __isset.newFeaturing)
        {
          field.Name = "newFeaturing";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NewFeaturing.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateAlbumTrackFeaturingArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idAlbum == other.__isset.idAlbum) && ((!__isset.idAlbum) || (System.Object.Equals(IdAlbum, other.IdAlbum))))
        && ((__isset.trackNumber == other.__isset.trackNumber) && ((!__isset.trackNumber) || (System.Object.Equals(TrackNumber, other.TrackNumber))))
        && ((__isset.newFeaturing == other.__isset.newFeaturing) && ((!__isset.newFeaturing) || (System.Object.Equals(NewFeaturing, other.NewFeaturing))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idAlbum)
          hashcode = (hashcode * 397) + IdAlbum.GetHashCode();
        if(__isset.trackNumber)
          hashcode = (hashcode * 397) + TrackNumber.GetHashCode();
        if(__isset.newFeaturing)
          hashcode = (hashcode * 397) + NewFeaturing.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateAlbumTrackFeaturing_args(");
      bool __first = true;
      if (__isset.idAlbum)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdAlbum: ");
        sb.Append(IdAlbum);
      }
      if (__isset.trackNumber)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TrackNumber: ");
        sb.Append(TrackNumber);
      }
      if (NewFeaturing != null && __isset.newFeaturing)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewFeaturing: ");
        sb.Append(NewFeaturing== null ? "<null>" : NewFeaturing.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class UpdateAlbumTrackFeaturingResult : TBase
  {
    private Track _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;
    private SErrorInvalidRequestException _sErrorInvalidRequestE;

    public Track Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }

    public SErrorInvalidRequestException SErrorInvalidRequestE
    {
      get
      {
        return _sErrorInvalidRequestE;
      }
      set
      {
        __isset.sErrorInvalidRequestE = true;
        this._sErrorInvalidRequestE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
      public bool sErrorInvalidRequestE;
    }

    public UpdateAlbumTrackFeaturingResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Track();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SErrorInvalidRequestE = new SErrorInvalidRequestException();
                await SErrorInvalidRequestE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UpdateAlbumTrackFeaturing_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorInvalidRequestE)
        {
          if (SErrorInvalidRequestE != null)
          {
            field.Name = "SErrorInvalidRequestE";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorInvalidRequestE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UpdateAlbumTrackFeaturingResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))))
        && ((__isset.sErrorInvalidRequestE == other.__isset.sErrorInvalidRequestE) && ((!__isset.sErrorInvalidRequestE) || (System.Object.Equals(SErrorInvalidRequestE, other.SErrorInvalidRequestE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
        if(__isset.sErrorInvalidRequestE)
          hashcode = (hashcode * 397) + SErrorInvalidRequestE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UpdateAlbumTrackFeaturing_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      if (SErrorInvalidRequestE != null && __isset.sErrorInvalidRequestE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorInvalidRequestE: ");
        sb.Append(SErrorInvalidRequestE== null ? "<null>" : SErrorInvalidRequestE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddTrackToLibraryArgs : TBase
  {
    private short _idLibrary;
    private Track _newTrack;

    public short IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }

    public Track NewTrack
    {
      get
      {
        return _newTrack;
      }
      set
      {
        __isset.newTrack = true;
        this._newTrack = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
      public bool newTrack;
    }

    public AddTrackToLibraryArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdLibrary = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                NewTrack = new Track();
                await NewTrack.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddTrackToLibrary_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewTrack != null && __isset.newTrack)
        {
          field.Name = "newTrack";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NewTrack.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddTrackToLibraryArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))))
        && ((__isset.newTrack == other.__isset.newTrack) && ((!__isset.newTrack) || (System.Object.Equals(NewTrack, other.NewTrack))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
        if(__isset.newTrack)
          hashcode = (hashcode * 397) + NewTrack.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddTrackToLibrary_args(");
      bool __first = true;
      if (__isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      if (NewTrack != null && __isset.newTrack)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewTrack: ");
        sb.Append(NewTrack== null ? "<null>" : NewTrack.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddTrackToLibraryResult : TBase
  {
    private Track _success;
    private SErrorSystemException _sErrorSystemE;

    public Track Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddTrackToLibraryResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Track();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddTrackToLibrary_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddTrackToLibraryResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddTrackToLibrary_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteLibraryTrackArgs : TBase
  {
    private short _idLibrary;
    private short _trackNumber;

    public short IdLibrary
    {
      get
      {
        return _idLibrary;
      }
      set
      {
        __isset.idLibrary = true;
        this._idLibrary = value;
      }
    }

    public short TrackNumber
    {
      get
      {
        return _trackNumber;
      }
      set
      {
        __isset.trackNumber = true;
        this._trackNumber = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idLibrary;
      public bool trackNumber;
    }

    public DeleteLibraryTrackArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdLibrary = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                TrackNumber = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteLibraryTrack_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idLibrary)
        {
          field.Name = "idLibrary";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdLibrary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.trackNumber)
        {
          field.Name = "trackNumber";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(TrackNumber, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteLibraryTrackArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idLibrary == other.__isset.idLibrary) && ((!__isset.idLibrary) || (System.Object.Equals(IdLibrary, other.IdLibrary))))
        && ((__isset.trackNumber == other.__isset.trackNumber) && ((!__isset.trackNumber) || (System.Object.Equals(TrackNumber, other.TrackNumber))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idLibrary)
          hashcode = (hashcode * 397) + IdLibrary.GetHashCode();
        if(__isset.trackNumber)
          hashcode = (hashcode * 397) + TrackNumber.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteLibraryTrack_args(");
      bool __first = true;
      if (__isset.idLibrary)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdLibrary: ");
        sb.Append(IdLibrary);
      }
      if (__isset.trackNumber)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TrackNumber: ");
        sb.Append(TrackNumber);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeleteLibraryTrackResult : TBase
  {
    private short _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public DeleteLibraryTrackResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeleteLibraryTrack_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeleteLibraryTrackResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeleteLibraryTrack_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddTrackToPlaylistArgs : TBase
  {
    private short _idPlaylist;
    private Track _newtrack;

    public short IdPlaylist
    {
      get
      {
        return _idPlaylist;
      }
      set
      {
        __isset.idPlaylist = true;
        this._idPlaylist = value;
      }
    }

    public Track Newtrack
    {
      get
      {
        return _newtrack;
      }
      set
      {
        __isset.newtrack = true;
        this._newtrack = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idPlaylist;
      public bool newtrack;
    }

    public AddTrackToPlaylistArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdPlaylist = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Newtrack = new Track();
                await Newtrack.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddTrackToPlaylist_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idPlaylist)
        {
          field.Name = "idPlaylist";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdPlaylist, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Newtrack != null && __isset.newtrack)
        {
          field.Name = "newtrack";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Newtrack.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddTrackToPlaylistArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idPlaylist == other.__isset.idPlaylist) && ((!__isset.idPlaylist) || (System.Object.Equals(IdPlaylist, other.IdPlaylist))))
        && ((__isset.newtrack == other.__isset.newtrack) && ((!__isset.newtrack) || (System.Object.Equals(Newtrack, other.Newtrack))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idPlaylist)
          hashcode = (hashcode * 397) + IdPlaylist.GetHashCode();
        if(__isset.newtrack)
          hashcode = (hashcode * 397) + Newtrack.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddTrackToPlaylist_args(");
      bool __first = true;
      if (__isset.idPlaylist)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdPlaylist: ");
        sb.Append(IdPlaylist);
      }
      if (Newtrack != null && __isset.newtrack)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Newtrack: ");
        sb.Append(Newtrack== null ? "<null>" : Newtrack.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddTrackToPlaylistResult : TBase
  {
    private Track _success;
    private SErrorSystemException _sErrorSystemE;

    public Track Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddTrackToPlaylistResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Track();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddTrackToPlaylist_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddTrackToPlaylistResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddTrackToPlaylist_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeletePlaylistTrackArgs : TBase
  {
    private short _idPlaylist;
    private short _trackNumber;

    public short IdPlaylist
    {
      get
      {
        return _idPlaylist;
      }
      set
      {
        __isset.idPlaylist = true;
        this._idPlaylist = value;
      }
    }

    public short TrackNumber
    {
      get
      {
        return _trackNumber;
      }
      set
      {
        __isset.trackNumber = true;
        this._trackNumber = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idPlaylist;
      public bool trackNumber;
    }

    public DeletePlaylistTrackArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdPlaylist = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                TrackNumber = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeletePlaylistTrack_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idPlaylist)
        {
          field.Name = "idPlaylist";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdPlaylist, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.trackNumber)
        {
          field.Name = "trackNumber";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(TrackNumber, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeletePlaylistTrackArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idPlaylist == other.__isset.idPlaylist) && ((!__isset.idPlaylist) || (System.Object.Equals(IdPlaylist, other.IdPlaylist))))
        && ((__isset.trackNumber == other.__isset.trackNumber) && ((!__isset.trackNumber) || (System.Object.Equals(TrackNumber, other.TrackNumber))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idPlaylist)
          hashcode = (hashcode * 397) + IdPlaylist.GetHashCode();
        if(__isset.trackNumber)
          hashcode = (hashcode * 397) + TrackNumber.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeletePlaylistTrack_args(");
      bool __first = true;
      if (__isset.idPlaylist)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdPlaylist: ");
        sb.Append(IdPlaylist);
      }
      if (__isset.trackNumber)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TrackNumber: ");
        sb.Append(TrackNumber);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeletePlaylistTrackResult : TBase
  {
    private short _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public DeletePlaylistTrackResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeletePlaylistTrack_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeletePlaylistTrackResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeletePlaylistTrack_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddTrackToPlayQueueArgs : TBase
  {
    private short _idPlayQueu;
    private Track _newTrack;

    public short IdPlayQueu
    {
      get
      {
        return _idPlayQueu;
      }
      set
      {
        __isset.idPlayQueu = true;
        this._idPlayQueu = value;
      }
    }

    public Track NewTrack
    {
      get
      {
        return _newTrack;
      }
      set
      {
        __isset.newTrack = true;
        this._newTrack = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idPlayQueu;
      public bool newTrack;
    }

    public AddTrackToPlayQueueArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdPlayQueu = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                NewTrack = new Track();
                await NewTrack.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddTrackToPlayQueue_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idPlayQueu)
        {
          field.Name = "idPlayQueu";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdPlayQueu, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewTrack != null && __isset.newTrack)
        {
          field.Name = "newTrack";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NewTrack.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddTrackToPlayQueueArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idPlayQueu == other.__isset.idPlayQueu) && ((!__isset.idPlayQueu) || (System.Object.Equals(IdPlayQueu, other.IdPlayQueu))))
        && ((__isset.newTrack == other.__isset.newTrack) && ((!__isset.newTrack) || (System.Object.Equals(NewTrack, other.NewTrack))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idPlayQueu)
          hashcode = (hashcode * 397) + IdPlayQueu.GetHashCode();
        if(__isset.newTrack)
          hashcode = (hashcode * 397) + NewTrack.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddTrackToPlayQueue_args(");
      bool __first = true;
      if (__isset.idPlayQueu)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdPlayQueu: ");
        sb.Append(IdPlayQueu);
      }
      if (NewTrack != null && __isset.newTrack)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewTrack: ");
        sb.Append(NewTrack== null ? "<null>" : NewTrack.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class AddTrackToPlayQueueResult : TBase
  {
    private Track _success;
    private SErrorSystemException _sErrorSystemE;

    public Track Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public AddTrackToPlayQueueResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Track();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AddTrackToPlayQueue_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AddTrackToPlayQueueResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AddTrackToPlayQueue_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeletePlayQueueTrackArgs : TBase
  {
    private short _idPlayQueu;
    private short _trackNumber;

    public short IdPlayQueu
    {
      get
      {
        return _idPlayQueu;
      }
      set
      {
        __isset.idPlayQueu = true;
        this._idPlayQueu = value;
      }
    }

    public short TrackNumber
    {
      get
      {
        return _trackNumber;
      }
      set
      {
        __isset.trackNumber = true;
        this._trackNumber = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool idPlayQueu;
      public bool trackNumber;
    }

    public DeletePlayQueueTrackArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                IdPlayQueu = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                TrackNumber = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeletePlayQueueTrack_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.idPlayQueu)
        {
          field.Name = "idPlayQueu";
          field.Type = TType.I16;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(IdPlayQueu, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.trackNumber)
        {
          field.Name = "trackNumber";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(TrackNumber, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeletePlayQueueTrackArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.idPlayQueu == other.__isset.idPlayQueu) && ((!__isset.idPlayQueu) || (System.Object.Equals(IdPlayQueu, other.IdPlayQueu))))
        && ((__isset.trackNumber == other.__isset.trackNumber) && ((!__isset.trackNumber) || (System.Object.Equals(TrackNumber, other.TrackNumber))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.idPlayQueu)
          hashcode = (hashcode * 397) + IdPlayQueu.GetHashCode();
        if(__isset.trackNumber)
          hashcode = (hashcode * 397) + TrackNumber.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeletePlayQueueTrack_args(");
      bool __first = true;
      if (__isset.idPlayQueu)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IdPlayQueu: ");
        sb.Append(IdPlayQueu);
      }
      if (__isset.trackNumber)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TrackNumber: ");
        sb.Append(TrackNumber);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class DeletePlayQueueTrackResult : TBase
  {
    private short _success;
    private SErrorNotFoundException _sErrorNotFoundE;
    private SErrorSystemException _sErrorSystemE;

    public short Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorNotFoundException SErrorNotFoundE
    {
      get
      {
        return _sErrorNotFoundE;
      }
      set
      {
        __isset.sErrorNotFoundE = true;
        this._sErrorNotFoundE = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorNotFoundE;
      public bool sErrorSystemE;
    }

    public DeletePlayQueueTrackResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I16)
              {
                Success = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorNotFoundE = new SErrorNotFoundException();
                await SErrorNotFoundE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DeletePlayQueueTrack_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I16;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.sErrorNotFoundE)
        {
          if (SErrorNotFoundE != null)
          {
            field.Name = "SErrorNotFoundE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorNotFoundE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DeletePlayQueueTrackResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
        && ((__isset.sErrorNotFoundE == other.__isset.sErrorNotFoundE) && ((!__isset.sErrorNotFoundE) || (System.Object.Equals(SErrorNotFoundE, other.SErrorNotFoundE))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + Success.GetHashCode();
        if(__isset.sErrorNotFoundE)
          hashcode = (hashcode * 397) + SErrorNotFoundE.GetHashCode();
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DeletePlayQueueTrack_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorNotFoundE != null && __isset.sErrorNotFoundE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorNotFoundE: ");
        sb.Append(SErrorNotFoundE== null ? "<null>" : SErrorNotFoundE.ToString());
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GenerateRadioStationArgs : TBase
  {
    private MusicGender _gender;

    /// <summary>
    /// 
    /// <seealso cref=".MusicGender"/>
    /// </summary>
    public MusicGender Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool gender;
    }

    public GenerateRadioStationArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Gender = (MusicGender)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GenerateRadioStation_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.gender)
        {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Gender, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GenerateRadioStationArgs;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.gender == other.__isset.gender) && ((!__isset.gender) || (System.Object.Equals(Gender, other.Gender))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.gender)
          hashcode = (hashcode * 397) + Gender.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GenerateRadioStation_args(");
      bool __first = true;
      if (__isset.gender)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Gender: ");
        sb.Append(Gender);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class GenerateRadioStationResult : TBase
  {
    private List<Track> _success;
    private SErrorSystemException _sErrorSystemE;

    public List<Track> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SErrorSystemException SErrorSystemE
    {
      get
      {
        return _sErrorSystemE;
      }
      set
      {
        __isset.sErrorSystemE = true;
        this._sErrorSystemE = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool sErrorSystemE;
    }

    public GenerateRadioStationResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  TList _list8 = await iprot.ReadListBeginAsync(cancellationToken);
                  Success = new List<Track>(_list8.Count);
                  for(int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    Track _elem10;
                    _elem10 = new Track();
                    await _elem10.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem10);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                SErrorSystemE = new SErrorSystemException();
                await SErrorSystemE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GenerateRadioStation_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Track _iter11 in Success)
              {
                await _iter11.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.sErrorSystemE)
        {
          if (SErrorSystemE != null)
          {
            field.Name = "SErrorSystemE";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SErrorSystemE.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GenerateRadioStationResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
        && ((__isset.sErrorSystemE == other.__isset.sErrorSystemE) && ((!__isset.sErrorSystemE) || (System.Object.Equals(SErrorSystemE, other.SErrorSystemE))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.success)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        if(__isset.sErrorSystemE)
          hashcode = (hashcode * 397) + SErrorSystemE.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GenerateRadioStation_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (SErrorSystemE != null && __isset.sErrorSystemE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SErrorSystemE: ");
        sb.Append(SErrorSystemE== null ? "<null>" : SErrorSystemE.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
