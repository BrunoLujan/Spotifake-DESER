/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class LocalTrack : TBase
{
  private short _idConsumer;
  private string _fileName;
  private string _artistName;
  private string _title;

  public short IdLocalTrack { get; set; }

  public short IdConsumer
  {
    get
    {
      return _idConsumer;
    }
    set
    {
      __isset.idConsumer = true;
      this._idConsumer = value;
    }
  }

  public string FileName
  {
    get
    {
      return _fileName;
    }
    set
    {
      __isset.fileName = true;
      this._fileName = value;
    }
  }

  public string ArtistName
  {
    get
    {
      return _artistName;
    }
    set
    {
      __isset.artistName = true;
      this._artistName = value;
    }
  }

  public string Title
  {
    get
    {
      return _title;
    }
    set
    {
      __isset.title = true;
      this._title = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool idConsumer;
    public bool fileName;
    public bool artistName;
    public bool title;
  }

  public LocalTrack()
  {
  }

  public LocalTrack(short idLocalTrack) : this()
  {
    this.IdLocalTrack = idLocalTrack;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_idLocalTrack = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16)
            {
              IdLocalTrack = await iprot.ReadI16Async(cancellationToken);
              isset_idLocalTrack = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I16)
            {
              IdConsumer = await iprot.ReadI16Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              FileName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              ArtistName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Title = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_idLocalTrack)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("LocalTrack");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "idLocalTrack";
      field.Type = TType.I16;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI16Async(IdLocalTrack, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (__isset.idConsumer)
      {
        field.Name = "idConsumer";
        field.Type = TType.I16;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI16Async(IdConsumer, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (FileName != null && __isset.fileName)
      {
        field.Name = "fileName";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(FileName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ArtistName != null && __isset.artistName)
      {
        field.Name = "artistName";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ArtistName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Title != null && __isset.title)
      {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Title, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as LocalTrack;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(IdLocalTrack, other.IdLocalTrack)
      && ((__isset.idConsumer == other.__isset.idConsumer) && ((!__isset.idConsumer) || (System.Object.Equals(IdConsumer, other.IdConsumer))))
      && ((__isset.fileName == other.__isset.fileName) && ((!__isset.fileName) || (System.Object.Equals(FileName, other.FileName))))
      && ((__isset.artistName == other.__isset.artistName) && ((!__isset.artistName) || (System.Object.Equals(ArtistName, other.ArtistName))))
      && ((__isset.title == other.__isset.title) && ((!__isset.title) || (System.Object.Equals(Title, other.Title))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + IdLocalTrack.GetHashCode();
      if(__isset.idConsumer)
        hashcode = (hashcode * 397) + IdConsumer.GetHashCode();
      if(__isset.fileName)
        hashcode = (hashcode * 397) + FileName.GetHashCode();
      if(__isset.artistName)
        hashcode = (hashcode * 397) + ArtistName.GetHashCode();
      if(__isset.title)
        hashcode = (hashcode * 397) + Title.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("LocalTrack(");
    sb.Append(", IdLocalTrack: ");
    sb.Append(IdLocalTrack);
    if (__isset.idConsumer)
    {
      sb.Append(", IdConsumer: ");
      sb.Append(IdConsumer);
    }
    if (FileName != null && __isset.fileName)
    {
      sb.Append(", FileName: ");
      sb.Append(FileName);
    }
    if (ArtistName != null && __isset.artistName)
    {
      sb.Append(", ArtistName: ");
      sb.Append(ArtistName);
    }
    if (Title != null && __isset.title)
    {
      sb.Append(", Title: ");
      sb.Append(Title);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

