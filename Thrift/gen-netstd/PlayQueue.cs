/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class PlayQueue : TBase
{
  private List<Track> _Tracks;

  public short IdPlayQueu { get; set; }

  public List<Track> Tracks
  {
    get
    {
      return _Tracks;
    }
    set
    {
      __isset.Tracks = true;
      this._Tracks = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool Tracks;
  }

  public PlayQueue()
  {
    this._Tracks = new List<Track>();
    this.__isset.Tracks = true;
  }

  public PlayQueue(short idPlayQueu) : this()
  {
    this.IdPlayQueu = idPlayQueu;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_idPlayQueu = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16)
            {
              IdPlayQueu = await iprot.ReadI16Async(cancellationToken);
              isset_idPlayQueu = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list4 = await iprot.ReadListBeginAsync(cancellationToken);
                Tracks = new List<Track>(_list4.Count);
                for(int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  Track _elem6;
                  _elem6 = new Track();
                  await _elem6.ReadAsync(iprot, cancellationToken);
                  Tracks.Add(_elem6);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_idPlayQueu)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("PlayQueue");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "idPlayQueu";
      field.Type = TType.I16;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI16Async(IdPlayQueu, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (Tracks != null && __isset.Tracks)
      {
        field.Name = "Tracks";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Tracks.Count), cancellationToken);
          foreach (Track _iter7 in Tracks)
          {
            await _iter7.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as PlayQueue;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(IdPlayQueu, other.IdPlayQueu)
      && ((__isset.Tracks == other.__isset.Tracks) && ((!__isset.Tracks) || (TCollections.Equals(Tracks, other.Tracks))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + IdPlayQueu.GetHashCode();
      if(__isset.Tracks)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Tracks);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("PlayQueue(");
    sb.Append(", IdPlayQueu: ");
    sb.Append(IdPlayQueu);
    if (Tracks != null && __isset.Tracks)
    {
      sb.Append(", Tracks: ");
      sb.Append(Tracks);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

