/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



/// <summary>
/// This file describes the definitions of the model which encapsulates
/// the information that needs to be passed to the API methods in order to
/// manage Consumer and Content Creator users and Content.
/// 
/// </summary>
public partial class Consumer : TBase
{
  private string _givenName;
  private string _lastName;
  private string _email;
  private string _password;
  private string _imageStoragePath;

  public short IdConsumer { get; set; }

  public string GivenName
  {
    get
    {
      return _givenName;
    }
    set
    {
      __isset.givenName = true;
      this._givenName = value;
    }
  }

  public string LastName
  {
    get
    {
      return _lastName;
    }
    set
    {
      __isset.lastName = true;
      this._lastName = value;
    }
  }

  public string Email
  {
    get
    {
      return _email;
    }
    set
    {
      __isset.email = true;
      this._email = value;
    }
  }

  public string Password
  {
    get
    {
      return _password;
    }
    set
    {
      __isset.password = true;
      this._password = value;
    }
  }

  public string ImageStoragePath
  {
    get
    {
      return _imageStoragePath;
    }
    set
    {
      __isset.imageStoragePath = true;
      this._imageStoragePath = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool givenName;
    public bool lastName;
    public bool email;
    public bool password;
    public bool imageStoragePath;
  }

  public Consumer()
  {
  }

  public Consumer(short idConsumer) : this()
  {
    this.IdConsumer = idConsumer;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_idConsumer = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16)
            {
              IdConsumer = await iprot.ReadI16Async(cancellationToken);
              isset_idConsumer = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              GivenName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              LastName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Email = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Password = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              ImageStoragePath = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_idConsumer)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Consumer");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "idConsumer";
      field.Type = TType.I16;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteI16Async(IdConsumer, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (GivenName != null && __isset.givenName)
      {
        field.Name = "givenName";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(GivenName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (LastName != null && __isset.lastName)
      {
        field.Name = "lastName";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(LastName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Email != null && __isset.email)
      {
        field.Name = "email";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Email, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Password != null && __isset.password)
      {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Password, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ImageStoragePath != null && __isset.imageStoragePath)
      {
        field.Name = "imageStoragePath";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ImageStoragePath, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Consumer;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return System.Object.Equals(IdConsumer, other.IdConsumer)
      && ((__isset.givenName == other.__isset.givenName) && ((!__isset.givenName) || (System.Object.Equals(GivenName, other.GivenName))))
      && ((__isset.lastName == other.__isset.lastName) && ((!__isset.lastName) || (System.Object.Equals(LastName, other.LastName))))
      && ((__isset.email == other.__isset.email) && ((!__isset.email) || (System.Object.Equals(Email, other.Email))))
      && ((__isset.password == other.__isset.password) && ((!__isset.password) || (System.Object.Equals(Password, other.Password))))
      && ((__isset.imageStoragePath == other.__isset.imageStoragePath) && ((!__isset.imageStoragePath) || (System.Object.Equals(ImageStoragePath, other.ImageStoragePath))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + IdConsumer.GetHashCode();
      if(__isset.givenName)
        hashcode = (hashcode * 397) + GivenName.GetHashCode();
      if(__isset.lastName)
        hashcode = (hashcode * 397) + LastName.GetHashCode();
      if(__isset.email)
        hashcode = (hashcode * 397) + Email.GetHashCode();
      if(__isset.password)
        hashcode = (hashcode * 397) + Password.GetHashCode();
      if(__isset.imageStoragePath)
        hashcode = (hashcode * 397) + ImageStoragePath.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Consumer(");
    sb.Append(", IdConsumer: ");
    sb.Append(IdConsumer);
    if (GivenName != null && __isset.givenName)
    {
      sb.Append(", GivenName: ");
      sb.Append(GivenName);
    }
    if (LastName != null && __isset.lastName)
    {
      sb.Append(", LastName: ");
      sb.Append(LastName);
    }
    if (Email != null && __isset.email)
    {
      sb.Append(", Email: ");
      sb.Append(Email);
    }
    if (Password != null && __isset.password)
    {
      sb.Append(", Password: ");
      sb.Append(Password);
    }
    if (ImageStoragePath != null && __isset.imageStoragePath)
    {
      sb.Append(", ImageStoragePath: ");
      sb.Append(ImageStoragePath);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

