#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from SpotifakeServices import ConsumerService
from SpotifakeServices.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Consumer GetConsumerById(Id idConsumer)')
    print('  bool GetConsumerByEmail(string email)')
    print('  Consumer GetConsumerByEmailPassword(string email, string password)')
    print('  Id AddConsumer(Consumer newConsumer)')
    print('  Id DeleteConsumer(string email)')
    print('  bool UpdateConsumerPassword(string email, string newPassword)')
    print('  bool UpdateConsumerImage(string email, string fileName)')
    print('  Consumer LoginConsumer(string email, string password)')
    print('  bool AddImageToMedia(string fileName, string image)')
    print('  string GetImageToMedia(string fileName)')
    print('  bool DeleteImageToMedia(string fileName)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ConsumerService.Client(protocol)
transport.open()

if cmd == 'GetConsumerById':
    if len(args) != 1:
        print('GetConsumerById requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetConsumerById(eval(args[0]),))

elif cmd == 'GetConsumerByEmail':
    if len(args) != 1:
        print('GetConsumerByEmail requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetConsumerByEmail(args[0],))

elif cmd == 'GetConsumerByEmailPassword':
    if len(args) != 2:
        print('GetConsumerByEmailPassword requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetConsumerByEmailPassword(args[0], args[1],))

elif cmd == 'AddConsumer':
    if len(args) != 1:
        print('AddConsumer requires 1 args')
        sys.exit(1)
    pp.pprint(client.AddConsumer(eval(args[0]),))

elif cmd == 'DeleteConsumer':
    if len(args) != 1:
        print('DeleteConsumer requires 1 args')
        sys.exit(1)
    pp.pprint(client.DeleteConsumer(args[0],))

elif cmd == 'UpdateConsumerPassword':
    if len(args) != 2:
        print('UpdateConsumerPassword requires 2 args')
        sys.exit(1)
    pp.pprint(client.UpdateConsumerPassword(args[0], args[1],))

elif cmd == 'UpdateConsumerImage':
    if len(args) != 2:
        print('UpdateConsumerImage requires 2 args')
        sys.exit(1)
    pp.pprint(client.UpdateConsumerImage(args[0], args[1],))

elif cmd == 'LoginConsumer':
    if len(args) != 2:
        print('LoginConsumer requires 2 args')
        sys.exit(1)
    pp.pprint(client.LoginConsumer(args[0], args[1],))

elif cmd == 'AddImageToMedia':
    if len(args) != 2:
        print('AddImageToMedia requires 2 args')
        sys.exit(1)
    pp.pprint(client.AddImageToMedia(args[0], args[1],))

elif cmd == 'GetImageToMedia':
    if len(args) != 1:
        print('GetImageToMedia requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetImageToMedia(args[0],))

elif cmd == 'DeleteImageToMedia':
    if len(args) != 1:
        print('DeleteImageToMedia requires 1 args')
        sys.exit(1)
    pp.pprint(client.DeleteImageToMedia(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
