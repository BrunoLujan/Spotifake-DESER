#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from SpotifakeServices import PlaylistService
from SpotifakeServices.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Playlist GetPlaylistByTitle(string title)')
    print('   GetPlaylistByLibraryId(Id idLibrary)')
    print('  Playlist AddPlaylistToLibrary(Id idLibrary, Playlist newPlaylist)')
    print('  Id DeleteLibraryPlaylist(Id idLibrary, Id idPlaylist)')
    print('  Playlist UpdatePlaylistTitle(Id idPlaylist, string newPlaylistTitle)')
    print('  Playlist UpdatePlaylistCover(Id idPlaylist, string newImageStoragePath)')
    print('  Playlist UpdatePlaylistDescription(Id idPlaylist, string newDescription)')
    print('   GetPlaylistByQuery(string query)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = PlaylistService.Client(protocol)
transport.open()

if cmd == 'GetPlaylistByTitle':
    if len(args) != 1:
        print('GetPlaylistByTitle requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetPlaylistByTitle(args[0],))

elif cmd == 'GetPlaylistByLibraryId':
    if len(args) != 1:
        print('GetPlaylistByLibraryId requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetPlaylistByLibraryId(eval(args[0]),))

elif cmd == 'AddPlaylistToLibrary':
    if len(args) != 2:
        print('AddPlaylistToLibrary requires 2 args')
        sys.exit(1)
    pp.pprint(client.AddPlaylistToLibrary(eval(args[0]), eval(args[1]),))

elif cmd == 'DeleteLibraryPlaylist':
    if len(args) != 2:
        print('DeleteLibraryPlaylist requires 2 args')
        sys.exit(1)
    pp.pprint(client.DeleteLibraryPlaylist(eval(args[0]), eval(args[1]),))

elif cmd == 'UpdatePlaylistTitle':
    if len(args) != 2:
        print('UpdatePlaylistTitle requires 2 args')
        sys.exit(1)
    pp.pprint(client.UpdatePlaylistTitle(eval(args[0]), args[1],))

elif cmd == 'UpdatePlaylistCover':
    if len(args) != 2:
        print('UpdatePlaylistCover requires 2 args')
        sys.exit(1)
    pp.pprint(client.UpdatePlaylistCover(eval(args[0]), args[1],))

elif cmd == 'UpdatePlaylistDescription':
    if len(args) != 2:
        print('UpdatePlaylistDescription requires 2 args')
        sys.exit(1)
    pp.pprint(client.UpdatePlaylistDescription(eval(args[0]), args[1],))

elif cmd == 'GetPlaylistByQuery':
    if len(args) != 1:
        print('GetPlaylistByQuery requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetPlaylistByQuery(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
