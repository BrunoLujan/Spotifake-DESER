#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    """
    This file describes the services
    that needs to be passed to the API methods in order to
    manage Consumer and Content Creator users and Content.


    """
    def GetConsumerById(self, idConsumer):
        """
        Get Consumer by Id

        @param idConsumer
            The Consumer Id to be obtained.

        @return Consumer
            Consumer object


        Parameters:
         - idConsumer

        """
        pass

    def GetConsumerByEmail(self, email):
        """
        Get Consumer by email

        @param email
            The Consumer email to be obtained.

        @return bool
            bool object


        Parameters:
         - email

        """
        pass

    def GetConsumerByEmailPassword(self, email, password):
        """
        Get Consumer by email and password

        @param email
            The Consumer email to be obtained.
        @param password
            The Consumer password to be obtained.

        @return Consumer
            Consumer object


        Parameters:
         - email
         - password

        """
        pass

    def AddConsumer(self, newConsumer):
        """
        Register a Consumer.

        @param newconsumer

        @return Consumer
            Consumer object added


        Parameters:
         - newConsumer

        """
        pass

    def DeleteConsumer(self, email):
        """
        Delete a Consumer

        @param email
            The Consumer email of the Consumer to be deleted.

        @return Id
            The Consumer Id of the Consumer deleted.


        Parameters:
         - email

        """
        pass

    def UpdateConsumerPassword(self, email, newPassword):
        """
         
        Update previously registered Consumer password.

        @param email
            The Consumer Email of the Consumer which require an update password.

        @return Consumer
            Modified Consumer obejct.


        Parameters:
         - email
         - newPassword

        """
        pass

    def UpdateConsumerImage(self, email, fileName):
        """
         
        Update previously registered Consumer image.

        @param email
            The Consumer Email of the Consumer which require an update image.

        @return Consumer
            Modified Consumer obejct.


        Parameters:
         - email
         - fileName

        """
        pass

    def LoginConsumer(self, email, password):
        """
        Allows the login of a consumer

        @param email
            The Consumer email

        @param password
            The Email password of the consumer

        @return Consumer
            Consumer object


        Parameters:
         - email
         - password

        """
        pass

    def AddImageToMedia(self, fileName, image):
        """
        Add image file binary

        @param binary image
            The binary number that will be keep.

        @return bool
            true or false.


        Parameters:
         - fileName
         - image

        """
        pass

    def GetImageToMedia(self, fileName):
        """
        Get image file binary

        @param binary image
            The binary number that will be keep.

        @return binary
            binary image.


        Parameters:
         - fileName

        """
        pass

    def DeleteImageToMedia(self, fileName):
        """
        Delete image file binary

        @param fileName
            The fileName of file that will be delete.

        @return bool
            True or False


        Parameters:
         - fileName

        """
        pass


class Client(Iface):
    """
    This file describes the services
    that needs to be passed to the API methods in order to
    manage Consumer and Content Creator users and Content.


    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def GetConsumerById(self, idConsumer):
        """
        Get Consumer by Id

        @param idConsumer
            The Consumer Id to be obtained.

        @return Consumer
            Consumer object


        Parameters:
         - idConsumer

        """
        self.send_GetConsumerById(idConsumer)
        return self.recv_GetConsumerById()

    def send_GetConsumerById(self, idConsumer):
        self._oprot.writeMessageBegin('GetConsumerById', TMessageType.CALL, self._seqid)
        args = GetConsumerById_args()
        args.idConsumer = idConsumer
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetConsumerById(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetConsumerById_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetConsumerById failed: unknown result")

    def GetConsumerByEmail(self, email):
        """
        Get Consumer by email

        @param email
            The Consumer email to be obtained.

        @return bool
            bool object


        Parameters:
         - email

        """
        self.send_GetConsumerByEmail(email)
        return self.recv_GetConsumerByEmail()

    def send_GetConsumerByEmail(self, email):
        self._oprot.writeMessageBegin('GetConsumerByEmail', TMessageType.CALL, self._seqid)
        args = GetConsumerByEmail_args()
        args.email = email
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetConsumerByEmail(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetConsumerByEmail_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetConsumerByEmail failed: unknown result")

    def GetConsumerByEmailPassword(self, email, password):
        """
        Get Consumer by email and password

        @param email
            The Consumer email to be obtained.
        @param password
            The Consumer password to be obtained.

        @return Consumer
            Consumer object


        Parameters:
         - email
         - password

        """
        self.send_GetConsumerByEmailPassword(email, password)
        return self.recv_GetConsumerByEmailPassword()

    def send_GetConsumerByEmailPassword(self, email, password):
        self._oprot.writeMessageBegin('GetConsumerByEmailPassword', TMessageType.CALL, self._seqid)
        args = GetConsumerByEmailPassword_args()
        args.email = email
        args.password = password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetConsumerByEmailPassword(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetConsumerByEmailPassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetConsumerByEmailPassword failed: unknown result")

    def AddConsumer(self, newConsumer):
        """
        Register a Consumer.

        @param newconsumer

        @return Consumer
            Consumer object added


        Parameters:
         - newConsumer

        """
        self.send_AddConsumer(newConsumer)
        return self.recv_AddConsumer()

    def send_AddConsumer(self, newConsumer):
        self._oprot.writeMessageBegin('AddConsumer', TMessageType.CALL, self._seqid)
        args = AddConsumer_args()
        args.newConsumer = newConsumer
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddConsumer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddConsumer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddConsumer failed: unknown result")

    def DeleteConsumer(self, email):
        """
        Delete a Consumer

        @param email
            The Consumer email of the Consumer to be deleted.

        @return Id
            The Consumer Id of the Consumer deleted.


        Parameters:
         - email

        """
        self.send_DeleteConsumer(email)
        return self.recv_DeleteConsumer()

    def send_DeleteConsumer(self, email):
        self._oprot.writeMessageBegin('DeleteConsumer', TMessageType.CALL, self._seqid)
        args = DeleteConsumer_args()
        args.email = email
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteConsumer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteConsumer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteConsumer failed: unknown result")

    def UpdateConsumerPassword(self, email, newPassword):
        """
         
        Update previously registered Consumer password.

        @param email
            The Consumer Email of the Consumer which require an update password.

        @return Consumer
            Modified Consumer obejct.


        Parameters:
         - email
         - newPassword

        """
        self.send_UpdateConsumerPassword(email, newPassword)
        return self.recv_UpdateConsumerPassword()

    def send_UpdateConsumerPassword(self, email, newPassword):
        self._oprot.writeMessageBegin('UpdateConsumerPassword', TMessageType.CALL, self._seqid)
        args = UpdateConsumerPassword_args()
        args.email = email
        args.newPassword = newPassword
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateConsumerPassword(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateConsumerPassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateConsumerPassword failed: unknown result")

    def UpdateConsumerImage(self, email, fileName):
        """
         
        Update previously registered Consumer image.

        @param email
            The Consumer Email of the Consumer which require an update image.

        @return Consumer
            Modified Consumer obejct.


        Parameters:
         - email
         - fileName

        """
        self.send_UpdateConsumerImage(email, fileName)
        return self.recv_UpdateConsumerImage()

    def send_UpdateConsumerImage(self, email, fileName):
        self._oprot.writeMessageBegin('UpdateConsumerImage', TMessageType.CALL, self._seqid)
        args = UpdateConsumerImage_args()
        args.email = email
        args.fileName = fileName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateConsumerImage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateConsumerImage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateConsumerImage failed: unknown result")

    def LoginConsumer(self, email, password):
        """
        Allows the login of a consumer

        @param email
            The Consumer email

        @param password
            The Email password of the consumer

        @return Consumer
            Consumer object


        Parameters:
         - email
         - password

        """
        self.send_LoginConsumer(email, password)
        return self.recv_LoginConsumer()

    def send_LoginConsumer(self, email, password):
        self._oprot.writeMessageBegin('LoginConsumer', TMessageType.CALL, self._seqid)
        args = LoginConsumer_args()
        args.email = email
        args.password = password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_LoginConsumer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = LoginConsumer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "LoginConsumer failed: unknown result")

    def AddImageToMedia(self, fileName, image):
        """
        Add image file binary

        @param binary image
            The binary number that will be keep.

        @return bool
            true or false.


        Parameters:
         - fileName
         - image

        """
        self.send_AddImageToMedia(fileName, image)
        return self.recv_AddImageToMedia()

    def send_AddImageToMedia(self, fileName, image):
        self._oprot.writeMessageBegin('AddImageToMedia', TMessageType.CALL, self._seqid)
        args = AddImageToMedia_args()
        args.fileName = fileName
        args.image = image
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddImageToMedia(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddImageToMedia_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddImageToMedia failed: unknown result")

    def GetImageToMedia(self, fileName):
        """
        Get image file binary

        @param binary image
            The binary number that will be keep.

        @return binary
            binary image.


        Parameters:
         - fileName

        """
        self.send_GetImageToMedia(fileName)
        return self.recv_GetImageToMedia()

    def send_GetImageToMedia(self, fileName):
        self._oprot.writeMessageBegin('GetImageToMedia', TMessageType.CALL, self._seqid)
        args = GetImageToMedia_args()
        args.fileName = fileName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetImageToMedia(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetImageToMedia_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetImageToMedia failed: unknown result")

    def DeleteImageToMedia(self, fileName):
        """
        Delete image file binary

        @param fileName
            The fileName of file that will be delete.

        @return bool
            True or False


        Parameters:
         - fileName

        """
        self.send_DeleteImageToMedia(fileName)
        return self.recv_DeleteImageToMedia()

    def send_DeleteImageToMedia(self, fileName):
        self._oprot.writeMessageBegin('DeleteImageToMedia', TMessageType.CALL, self._seqid)
        args = DeleteImageToMedia_args()
        args.fileName = fileName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteImageToMedia(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteImageToMedia_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteImageToMedia failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["GetConsumerById"] = Processor.process_GetConsumerById
        self._processMap["GetConsumerByEmail"] = Processor.process_GetConsumerByEmail
        self._processMap["GetConsumerByEmailPassword"] = Processor.process_GetConsumerByEmailPassword
        self._processMap["AddConsumer"] = Processor.process_AddConsumer
        self._processMap["DeleteConsumer"] = Processor.process_DeleteConsumer
        self._processMap["UpdateConsumerPassword"] = Processor.process_UpdateConsumerPassword
        self._processMap["UpdateConsumerImage"] = Processor.process_UpdateConsumerImage
        self._processMap["LoginConsumer"] = Processor.process_LoginConsumer
        self._processMap["AddImageToMedia"] = Processor.process_AddImageToMedia
        self._processMap["GetImageToMedia"] = Processor.process_GetImageToMedia
        self._processMap["DeleteImageToMedia"] = Processor.process_DeleteImageToMedia
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_GetConsumerById(self, seqid, iprot, oprot):
        args = GetConsumerById_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetConsumerById_result()
        try:
            result.success = self._handler.GetConsumerById(args.idConsumer)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetConsumerById", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetConsumerByEmail(self, seqid, iprot, oprot):
        args = GetConsumerByEmail_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetConsumerByEmail_result()
        try:
            result.success = self._handler.GetConsumerByEmail(args.email)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetConsumerByEmail", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetConsumerByEmailPassword(self, seqid, iprot, oprot):
        args = GetConsumerByEmailPassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetConsumerByEmailPassword_result()
        try:
            result.success = self._handler.GetConsumerByEmailPassword(args.email, args.password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetConsumerByEmailPassword", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddConsumer(self, seqid, iprot, oprot):
        args = AddConsumer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddConsumer_result()
        try:
            result.success = self._handler.AddConsumer(args.newConsumer)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddConsumer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteConsumer(self, seqid, iprot, oprot):
        args = DeleteConsumer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteConsumer_result()
        try:
            result.success = self._handler.DeleteConsumer(args.email)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteConsumer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateConsumerPassword(self, seqid, iprot, oprot):
        args = UpdateConsumerPassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateConsumerPassword_result()
        try:
            result.success = self._handler.UpdateConsumerPassword(args.email, args.newPassword)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateConsumerPassword", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateConsumerImage(self, seqid, iprot, oprot):
        args = UpdateConsumerImage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateConsumerImage_result()
        try:
            result.success = self._handler.UpdateConsumerImage(args.email, args.fileName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateConsumerImage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_LoginConsumer(self, seqid, iprot, oprot):
        args = LoginConsumer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = LoginConsumer_result()
        try:
            result.success = self._handler.LoginConsumer(args.email, args.password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("LoginConsumer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddImageToMedia(self, seqid, iprot, oprot):
        args = AddImageToMedia_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddImageToMedia_result()
        try:
            result.success = self._handler.AddImageToMedia(args.fileName, args.image)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddImageToMedia", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetImageToMedia(self, seqid, iprot, oprot):
        args = GetImageToMedia_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetImageToMedia_result()
        try:
            result.success = self._handler.GetImageToMedia(args.fileName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetImageToMedia", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteImageToMedia(self, seqid, iprot, oprot):
        args = DeleteImageToMedia_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteImageToMedia_result()
        try:
            result.success = self._handler.DeleteImageToMedia(args.fileName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteImageToMedia", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class GetConsumerById_args(object):
    """
    Attributes:
     - idConsumer

    """


    def __init__(self, idConsumer=None,):
        self.idConsumer = idConsumer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idConsumer = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetConsumerById_args')
        if self.idConsumer is not None:
            oprot.writeFieldBegin('idConsumer', TType.I16, 1)
            oprot.writeI16(self.idConsumer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetConsumerById_args)
GetConsumerById_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idConsumer', None, None, ),  # 1
)


class GetConsumerById_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Consumer()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetConsumerById_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetConsumerById_result)
GetConsumerById_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class GetConsumerByEmail_args(object):
    """
    Attributes:
     - email

    """


    def __init__(self, email=None,):
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetConsumerByEmail_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetConsumerByEmail_args)
GetConsumerByEmail_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
)


class GetConsumerByEmail_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetConsumerByEmail_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetConsumerByEmail_result)
GetConsumerByEmail_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class GetConsumerByEmailPassword_args(object):
    """
    Attributes:
     - email
     - password

    """


    def __init__(self, email=None, password=None,):
        self.email = email
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetConsumerByEmailPassword_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetConsumerByEmailPassword_args)
GetConsumerByEmailPassword_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)


class GetConsumerByEmailPassword_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Consumer()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetConsumerByEmailPassword_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetConsumerByEmailPassword_result)
GetConsumerByEmailPassword_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class AddConsumer_args(object):
    """
    Attributes:
     - newConsumer

    """


    def __init__(self, newConsumer=None,):
        self.newConsumer = newConsumer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.newConsumer = SpotifakeManagement.ttypes.Consumer()
                    self.newConsumer.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddConsumer_args')
        if self.newConsumer is not None:
            oprot.writeFieldBegin('newConsumer', TType.STRUCT, 1)
            self.newConsumer.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddConsumer_args)
AddConsumer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'newConsumer', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 1
)


class AddConsumer_result(object):
    """
    Attributes:
     - success
     - sErrorUserE

    """


    def __init__(self, success=None, sErrorUserE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Consumer()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddConsumer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddConsumer_result)
AddConsumer_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
)


class DeleteConsumer_args(object):
    """
    Attributes:
     - email

    """


    def __init__(self, email=None,):
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteConsumer_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteConsumer_args)
DeleteConsumer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
)


class DeleteConsumer_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteConsumer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteConsumer_result)
DeleteConsumer_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class UpdateConsumerPassword_args(object):
    """
    Attributes:
     - email
     - newPassword

    """


    def __init__(self, email=None, newPassword=None,):
        self.email = email
        self.newPassword = newPassword

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateConsumerPassword_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.newPassword is not None:
            oprot.writeFieldBegin('newPassword', TType.STRING, 2)
            oprot.writeString(self.newPassword.encode('utf-8') if sys.version_info[0] == 2 else self.newPassword)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateConsumerPassword_args)
UpdateConsumerPassword_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'newPassword', 'UTF8', None, ),  # 2
)


class UpdateConsumerPassword_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateConsumerPassword_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateConsumerPassword_result)
UpdateConsumerPassword_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateConsumerImage_args(object):
    """
    Attributes:
     - email
     - fileName

    """


    def __init__(self, email=None, fileName=None,):
        self.email = email
        self.fileName = fileName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateConsumerImage_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 2)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateConsumerImage_args)
UpdateConsumerImage_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'fileName', 'UTF8', None, ),  # 2
)


class UpdateConsumerImage_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateConsumerImage_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateConsumerImage_result)
UpdateConsumerImage_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class LoginConsumer_args(object):
    """
    Attributes:
     - email
     - password

    """


    def __init__(self, email=None, password=None,):
        self.email = email
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginConsumer_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LoginConsumer_args)
LoginConsumer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)


class LoginConsumer_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Consumer()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginConsumer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LoginConsumer_result)
LoginConsumer_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddImageToMedia_args(object):
    """
    Attributes:
     - fileName
     - image

    """


    def __init__(self, fileName=None, image=None,):
        self.fileName = fileName
        self.image = image

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.image = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddImageToMedia_args')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 2)
            oprot.writeBinary(self.image)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddImageToMedia_args)
AddImageToMedia_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'image', 'BINARY', None, ),  # 2
)


class AddImageToMedia_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddImageToMedia_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddImageToMedia_result)
AddImageToMedia_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class GetImageToMedia_args(object):
    """
    Attributes:
     - fileName

    """


    def __init__(self, fileName=None,):
        self.fileName = fileName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetImageToMedia_args')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetImageToMedia_args)
GetImageToMedia_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
)


class GetImageToMedia_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetImageToMedia_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetImageToMedia_result)
GetImageToMedia_result.thrift_spec = (
    (0, TType.STRING, 'success', 'BINARY', None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteImageToMedia_args(object):
    """
    Attributes:
     - fileName

    """


    def __init__(self, fileName=None,):
        self.fileName = fileName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteImageToMedia_args')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteImageToMedia_args)
DeleteImageToMedia_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
)


class DeleteImageToMedia_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteImageToMedia_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteImageToMedia_result)
DeleteImageToMedia_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

