#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from SpotifakeServices import TrackService
from SpotifakeServices.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Track GetTrackByTitle(string title)')
    print('   GetTrackByAlbumId(Id idAlbum)')
    print('   GetTrackByPlaylistId(Id idPlaylist)')
    print('   GetTrackByLibraryId(Id idLibrary)')
    print('  Id AddTrackToAlbum(Id idAlbum, Track newTrack, Id idContentCreator)')
    print('  Id AddFeaturingTrack(Id idNewTrack, Id idContenCreator)')
    print('  Id DeleteAlbumTrack(Id idAlbum, Int trackNumber)')
    print('   GetTrackByQuery(string query)')
    print('  Track UpdateAlbumTrackTitle(Id idAlbum, Int trackNumber, string newAlbumTrackTitle)')
    print('  Track UpdateAlbumTrackFeaturing(Id idAlbum, Int trackNumber, ContentCreator newFeaturing)')
    print('  Track AddTrackToLibrary(Id idLibrary, Track newTrack)')
    print('  Id DeleteLibraryTrack(Id idLibrary, Int trackNumber)')
    print('  bool AddTrackToPlaylist(Id idPlaylist, Id idTrack)')
    print('  Id DeletePlaylistTrack(Id idPlaylist, Int trackNumber)')
    print('  Track AddTrackToPlayQueue(Id idPlayQueu, Track newTrack)')
    print('  Id DeletePlayQueueTrack(Id idPlayQueu, Int trackNumber)')
    print('   GenerateRadioStation(MusicGender gender)')
    print('   GetLocalTracksByIdConsumer(Id idConsumer)')
    print('  bool AddLocalTrack(LocalTrack LocalTrack)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TrackService.Client(protocol)
transport.open()

if cmd == 'GetTrackByTitle':
    if len(args) != 1:
        print('GetTrackByTitle requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTrackByTitle(args[0],))

elif cmd == 'GetTrackByAlbumId':
    if len(args) != 1:
        print('GetTrackByAlbumId requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTrackByAlbumId(eval(args[0]),))

elif cmd == 'GetTrackByPlaylistId':
    if len(args) != 1:
        print('GetTrackByPlaylistId requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTrackByPlaylistId(eval(args[0]),))

elif cmd == 'GetTrackByLibraryId':
    if len(args) != 1:
        print('GetTrackByLibraryId requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTrackByLibraryId(eval(args[0]),))

elif cmd == 'AddTrackToAlbum':
    if len(args) != 3:
        print('AddTrackToAlbum requires 3 args')
        sys.exit(1)
    pp.pprint(client.AddTrackToAlbum(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'AddFeaturingTrack':
    if len(args) != 2:
        print('AddFeaturingTrack requires 2 args')
        sys.exit(1)
    pp.pprint(client.AddFeaturingTrack(eval(args[0]), eval(args[1]),))

elif cmd == 'DeleteAlbumTrack':
    if len(args) != 2:
        print('DeleteAlbumTrack requires 2 args')
        sys.exit(1)
    pp.pprint(client.DeleteAlbumTrack(eval(args[0]), eval(args[1]),))

elif cmd == 'GetTrackByQuery':
    if len(args) != 1:
        print('GetTrackByQuery requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTrackByQuery(args[0],))

elif cmd == 'UpdateAlbumTrackTitle':
    if len(args) != 3:
        print('UpdateAlbumTrackTitle requires 3 args')
        sys.exit(1)
    pp.pprint(client.UpdateAlbumTrackTitle(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'UpdateAlbumTrackFeaturing':
    if len(args) != 3:
        print('UpdateAlbumTrackFeaturing requires 3 args')
        sys.exit(1)
    pp.pprint(client.UpdateAlbumTrackFeaturing(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'AddTrackToLibrary':
    if len(args) != 2:
        print('AddTrackToLibrary requires 2 args')
        sys.exit(1)
    pp.pprint(client.AddTrackToLibrary(eval(args[0]), eval(args[1]),))

elif cmd == 'DeleteLibraryTrack':
    if len(args) != 2:
        print('DeleteLibraryTrack requires 2 args')
        sys.exit(1)
    pp.pprint(client.DeleteLibraryTrack(eval(args[0]), eval(args[1]),))

elif cmd == 'AddTrackToPlaylist':
    if len(args) != 2:
        print('AddTrackToPlaylist requires 2 args')
        sys.exit(1)
    pp.pprint(client.AddTrackToPlaylist(eval(args[0]), eval(args[1]),))

elif cmd == 'DeletePlaylistTrack':
    if len(args) != 2:
        print('DeletePlaylistTrack requires 2 args')
        sys.exit(1)
    pp.pprint(client.DeletePlaylistTrack(eval(args[0]), eval(args[1]),))

elif cmd == 'AddTrackToPlayQueue':
    if len(args) != 2:
        print('AddTrackToPlayQueue requires 2 args')
        sys.exit(1)
    pp.pprint(client.AddTrackToPlayQueue(eval(args[0]), eval(args[1]),))

elif cmd == 'DeletePlayQueueTrack':
    if len(args) != 2:
        print('DeletePlayQueueTrack requires 2 args')
        sys.exit(1)
    pp.pprint(client.DeletePlayQueueTrack(eval(args[0]), eval(args[1]),))

elif cmd == 'GenerateRadioStation':
    if len(args) != 1:
        print('GenerateRadioStation requires 1 args')
        sys.exit(1)
    pp.pprint(client.GenerateRadioStation(eval(args[0]),))

elif cmd == 'GetLocalTracksByIdConsumer':
    if len(args) != 1:
        print('GetLocalTracksByIdConsumer requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetLocalTracksByIdConsumer(eval(args[0]),))

elif cmd == 'AddLocalTrack':
    if len(args) != 1:
        print('AddLocalTrack requires 1 args')
        sys.exit(1)
    pp.pprint(client.AddLocalTrack(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
