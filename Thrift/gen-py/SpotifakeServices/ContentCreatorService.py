#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def GetContentCreators(self):
        """
        Get ContentCreator

        @return list<ContentCreator>
            ContentCreator list


        """
        pass

    def GetContentCreatorById(self, idContentCreator):
        """
        Get ContentCreator by Id

        @param idContentCreator
            The ContentCreator Id to be obtained.

        @return ContentCreator
            ContentCreator object


        Parameters:
         - idContentCreator

        """
        pass

    def GetContentCreatorByLibraryId(self, idLibrary):
        """
        Get ContentCreator by Library Id

        @param idLibrary
            The Library Id to be obtained.

        @return ContentCreator list
            list<ContentCreator>


        Parameters:
         - idLibrary

        """
        pass

    def GetContentCreatorByEmail(self, email):
        """
        Get ContentCreator by email

        @param email
            The ContentCreator email to be obtained.

        @return bool
            bool object


        Parameters:
         - email

        """
        pass

    def GetContentCreatorByStageName(self, email):
        """
        Get ContentCreator by email

        @param email
            The ContentCreator email to be obtained.

        @return bool
            bool object


        Parameters:
         - email

        """
        pass

    def AddContentCreator(self, newContentCreator):
        """
        Register a Content Creator.

        @param newContentCreator

        @return ContentCreator
            ContentCreator object added


        Parameters:
         - newContentCreator

        """
        pass

    def DeleteContentCreator(self, email):
        """
        Delete a ContentCreator

        @param email
            The Content Creator email of the Content Creator to be deleted.

        @return Id
            The Content Creator Id of the Content Creator deleted.


        Parameters:
         - email

        """
        pass

    def UpdateContentCreatorPassword(self, email, newPassword):
        """
         
        Update previously registered Content Creator password.

        @param email
            The Content Creator Email of the Consumer which require an update password.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - newPassword

        """
        pass

    def UpdateContentCreatorImage(self, email, fileName):
        """
         
        Update previously registered Content Creator image.

        @param email
            The Content Creator Email of the Consumer which require an update image.

        @return bool
            True or False


        Parameters:
         - email
         - fileName

        """
        pass

    def UpdateContentCreatorStageName(self, email, currentPassword, newStageName):
        """
         
        Update previously registered Content Creator stage name.

        @param email
            The Content Creator Email of the Consumer which require an update stage name.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - currentPassword
         - newStageName

        """
        pass

    def UpdateContentCreatorDescription(self, email, currentPassword, newDescription):
        """
         
        Update previously registered Content Creator description.

        @param email
            The Content Creator Email of the Consumer which require an update description.

        @return ContentCreator
            Modified Content Creator obejct


        Parameters:
         - email
         - currentPassword
         - newDescription

        """
        pass

    def LoginContentCreator(self, email, password):
        """
        Allows the login of a content creator

        @param email
            The Conntent Creator email

        @param password
            The Email password of the content creator

        @return Content Creator
            Content Creator object


        Parameters:
         - email
         - password

        """
        pass

    def AddContentCreatorToLibrary(self, idLibrary, idContenCreator):
        """
        Add a ContentCreator to Library.

        @param idLibrary
            The Library Id to which a content creator will be added

        @param newContentCreator

        @return ContentCreator
            ContentCreator object added


        Parameters:
         - idLibrary
         - idContenCreator

        """
        pass

    def DeleteLibraryContentCreator(self, idLibrary, idContentCreator):
        """
        Delete a Content Creator from a Library

        @param idLibrary
            The Library Id which a content creator will be deleted.

        @param idContentCreator
            The Content Creator Id which will be deleted

        @return Id
            The Content Creator Id of the Content Creator deleted.


        Parameters:
         - idLibrary
         - idContentCreator

        """
        pass

    def GetContentCreatorByQuery(self, query):
        """
        Get ContentCreator by Query

        @param query
            The query to be obtained

        @return ContentCreator
            list<contentCreator>


        Parameters:
         - query

        """
        pass

    def AddImageToMedia(self, fileName, image):
        """
        Add image file binary

        @param binary image
            The binary number that will be keep.

        @return bool
            true or false.


        Parameters:
         - fileName
         - image

        """
        pass

    def GetImageToMedia(self, fileName):
        """
        Get image file binary

        @param binary image
            The binary number that will be keep.

        @return binary
            binary image.


        Parameters:
         - fileName

        """
        pass

    def DeleteImageToMedia(self, fileName):
        """
        Delete image file binary

        @param fileName
            The fileName of file that will be delete.

        @return bool
            True or False


        Parameters:
         - fileName

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def GetContentCreators(self):
        """
        Get ContentCreator

        @return list<ContentCreator>
            ContentCreator list


        """
        self.send_GetContentCreators()
        return self.recv_GetContentCreators()

    def send_GetContentCreators(self):
        self._oprot.writeMessageBegin('GetContentCreators', TMessageType.CALL, self._seqid)
        args = GetContentCreators_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetContentCreators(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetContentCreators_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetContentCreators failed: unknown result")

    def GetContentCreatorById(self, idContentCreator):
        """
        Get ContentCreator by Id

        @param idContentCreator
            The ContentCreator Id to be obtained.

        @return ContentCreator
            ContentCreator object


        Parameters:
         - idContentCreator

        """
        self.send_GetContentCreatorById(idContentCreator)
        return self.recv_GetContentCreatorById()

    def send_GetContentCreatorById(self, idContentCreator):
        self._oprot.writeMessageBegin('GetContentCreatorById', TMessageType.CALL, self._seqid)
        args = GetContentCreatorById_args()
        args.idContentCreator = idContentCreator
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetContentCreatorById(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetContentCreatorById_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetContentCreatorById failed: unknown result")

    def GetContentCreatorByLibraryId(self, idLibrary):
        """
        Get ContentCreator by Library Id

        @param idLibrary
            The Library Id to be obtained.

        @return ContentCreator list
            list<ContentCreator>


        Parameters:
         - idLibrary

        """
        self.send_GetContentCreatorByLibraryId(idLibrary)
        return self.recv_GetContentCreatorByLibraryId()

    def send_GetContentCreatorByLibraryId(self, idLibrary):
        self._oprot.writeMessageBegin('GetContentCreatorByLibraryId', TMessageType.CALL, self._seqid)
        args = GetContentCreatorByLibraryId_args()
        args.idLibrary = idLibrary
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetContentCreatorByLibraryId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetContentCreatorByLibraryId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetContentCreatorByLibraryId failed: unknown result")

    def GetContentCreatorByEmail(self, email):
        """
        Get ContentCreator by email

        @param email
            The ContentCreator email to be obtained.

        @return bool
            bool object


        Parameters:
         - email

        """
        self.send_GetContentCreatorByEmail(email)
        return self.recv_GetContentCreatorByEmail()

    def send_GetContentCreatorByEmail(self, email):
        self._oprot.writeMessageBegin('GetContentCreatorByEmail', TMessageType.CALL, self._seqid)
        args = GetContentCreatorByEmail_args()
        args.email = email
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetContentCreatorByEmail(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetContentCreatorByEmail_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetContentCreatorByEmail failed: unknown result")

    def GetContentCreatorByStageName(self, email):
        """
        Get ContentCreator by email

        @param email
            The ContentCreator email to be obtained.

        @return bool
            bool object


        Parameters:
         - email

        """
        self.send_GetContentCreatorByStageName(email)
        return self.recv_GetContentCreatorByStageName()

    def send_GetContentCreatorByStageName(self, email):
        self._oprot.writeMessageBegin('GetContentCreatorByStageName', TMessageType.CALL, self._seqid)
        args = GetContentCreatorByStageName_args()
        args.email = email
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetContentCreatorByStageName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetContentCreatorByStageName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetContentCreatorByStageName failed: unknown result")

    def AddContentCreator(self, newContentCreator):
        """
        Register a Content Creator.

        @param newContentCreator

        @return ContentCreator
            ContentCreator object added


        Parameters:
         - newContentCreator

        """
        self.send_AddContentCreator(newContentCreator)
        return self.recv_AddContentCreator()

    def send_AddContentCreator(self, newContentCreator):
        self._oprot.writeMessageBegin('AddContentCreator', TMessageType.CALL, self._seqid)
        args = AddContentCreator_args()
        args.newContentCreator = newContentCreator
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddContentCreator(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddContentCreator_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddContentCreator failed: unknown result")

    def DeleteContentCreator(self, email):
        """
        Delete a ContentCreator

        @param email
            The Content Creator email of the Content Creator to be deleted.

        @return Id
            The Content Creator Id of the Content Creator deleted.


        Parameters:
         - email

        """
        self.send_DeleteContentCreator(email)
        return self.recv_DeleteContentCreator()

    def send_DeleteContentCreator(self, email):
        self._oprot.writeMessageBegin('DeleteContentCreator', TMessageType.CALL, self._seqid)
        args = DeleteContentCreator_args()
        args.email = email
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteContentCreator(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteContentCreator_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteContentCreator failed: unknown result")

    def UpdateContentCreatorPassword(self, email, newPassword):
        """
         
        Update previously registered Content Creator password.

        @param email
            The Content Creator Email of the Consumer which require an update password.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - newPassword

        """
        self.send_UpdateContentCreatorPassword(email, newPassword)
        return self.recv_UpdateContentCreatorPassword()

    def send_UpdateContentCreatorPassword(self, email, newPassword):
        self._oprot.writeMessageBegin('UpdateContentCreatorPassword', TMessageType.CALL, self._seqid)
        args = UpdateContentCreatorPassword_args()
        args.email = email
        args.newPassword = newPassword
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateContentCreatorPassword(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateContentCreatorPassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateContentCreatorPassword failed: unknown result")

    def UpdateContentCreatorImage(self, email, fileName):
        """
         
        Update previously registered Content Creator image.

        @param email
            The Content Creator Email of the Consumer which require an update image.

        @return bool
            True or False


        Parameters:
         - email
         - fileName

        """
        self.send_UpdateContentCreatorImage(email, fileName)
        return self.recv_UpdateContentCreatorImage()

    def send_UpdateContentCreatorImage(self, email, fileName):
        self._oprot.writeMessageBegin('UpdateContentCreatorImage', TMessageType.CALL, self._seqid)
        args = UpdateContentCreatorImage_args()
        args.email = email
        args.fileName = fileName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateContentCreatorImage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateContentCreatorImage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateContentCreatorImage failed: unknown result")

    def UpdateContentCreatorStageName(self, email, currentPassword, newStageName):
        """
         
        Update previously registered Content Creator stage name.

        @param email
            The Content Creator Email of the Consumer which require an update stage name.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - currentPassword
         - newStageName

        """
        self.send_UpdateContentCreatorStageName(email, currentPassword, newStageName)
        return self.recv_UpdateContentCreatorStageName()

    def send_UpdateContentCreatorStageName(self, email, currentPassword, newStageName):
        self._oprot.writeMessageBegin('UpdateContentCreatorStageName', TMessageType.CALL, self._seqid)
        args = UpdateContentCreatorStageName_args()
        args.email = email
        args.currentPassword = currentPassword
        args.newStageName = newStageName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateContentCreatorStageName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateContentCreatorStageName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateContentCreatorStageName failed: unknown result")

    def UpdateContentCreatorDescription(self, email, currentPassword, newDescription):
        """
         
        Update previously registered Content Creator description.

        @param email
            The Content Creator Email of the Consumer which require an update description.

        @return ContentCreator
            Modified Content Creator obejct


        Parameters:
         - email
         - currentPassword
         - newDescription

        """
        self.send_UpdateContentCreatorDescription(email, currentPassword, newDescription)
        return self.recv_UpdateContentCreatorDescription()

    def send_UpdateContentCreatorDescription(self, email, currentPassword, newDescription):
        self._oprot.writeMessageBegin('UpdateContentCreatorDescription', TMessageType.CALL, self._seqid)
        args = UpdateContentCreatorDescription_args()
        args.email = email
        args.currentPassword = currentPassword
        args.newDescription = newDescription
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateContentCreatorDescription(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateContentCreatorDescription_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateContentCreatorDescription failed: unknown result")

    def LoginContentCreator(self, email, password):
        """
        Allows the login of a content creator

        @param email
            The Conntent Creator email

        @param password
            The Email password of the content creator

        @return Content Creator
            Content Creator object


        Parameters:
         - email
         - password

        """
        self.send_LoginContentCreator(email, password)
        return self.recv_LoginContentCreator()

    def send_LoginContentCreator(self, email, password):
        self._oprot.writeMessageBegin('LoginContentCreator', TMessageType.CALL, self._seqid)
        args = LoginContentCreator_args()
        args.email = email
        args.password = password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_LoginContentCreator(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = LoginContentCreator_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "LoginContentCreator failed: unknown result")

    def AddContentCreatorToLibrary(self, idLibrary, idContenCreator):
        """
        Add a ContentCreator to Library.

        @param idLibrary
            The Library Id to which a content creator will be added

        @param newContentCreator

        @return ContentCreator
            ContentCreator object added


        Parameters:
         - idLibrary
         - idContenCreator

        """
        self.send_AddContentCreatorToLibrary(idLibrary, idContenCreator)
        return self.recv_AddContentCreatorToLibrary()

    def send_AddContentCreatorToLibrary(self, idLibrary, idContenCreator):
        self._oprot.writeMessageBegin('AddContentCreatorToLibrary', TMessageType.CALL, self._seqid)
        args = AddContentCreatorToLibrary_args()
        args.idLibrary = idLibrary
        args.idContenCreator = idContenCreator
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddContentCreatorToLibrary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddContentCreatorToLibrary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddContentCreatorToLibrary failed: unknown result")

    def DeleteLibraryContentCreator(self, idLibrary, idContentCreator):
        """
        Delete a Content Creator from a Library

        @param idLibrary
            The Library Id which a content creator will be deleted.

        @param idContentCreator
            The Content Creator Id which will be deleted

        @return Id
            The Content Creator Id of the Content Creator deleted.


        Parameters:
         - idLibrary
         - idContentCreator

        """
        self.send_DeleteLibraryContentCreator(idLibrary, idContentCreator)
        return self.recv_DeleteLibraryContentCreator()

    def send_DeleteLibraryContentCreator(self, idLibrary, idContentCreator):
        self._oprot.writeMessageBegin('DeleteLibraryContentCreator', TMessageType.CALL, self._seqid)
        args = DeleteLibraryContentCreator_args()
        args.idLibrary = idLibrary
        args.idContentCreator = idContentCreator
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteLibraryContentCreator(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteLibraryContentCreator_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteLibraryContentCreator failed: unknown result")

    def GetContentCreatorByQuery(self, query):
        """
        Get ContentCreator by Query

        @param query
            The query to be obtained

        @return ContentCreator
            list<contentCreator>


        Parameters:
         - query

        """
        self.send_GetContentCreatorByQuery(query)
        return self.recv_GetContentCreatorByQuery()

    def send_GetContentCreatorByQuery(self, query):
        self._oprot.writeMessageBegin('GetContentCreatorByQuery', TMessageType.CALL, self._seqid)
        args = GetContentCreatorByQuery_args()
        args.query = query
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetContentCreatorByQuery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetContentCreatorByQuery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetContentCreatorByQuery failed: unknown result")

    def AddImageToMedia(self, fileName, image):
        """
        Add image file binary

        @param binary image
            The binary number that will be keep.

        @return bool
            true or false.


        Parameters:
         - fileName
         - image

        """
        self.send_AddImageToMedia(fileName, image)
        return self.recv_AddImageToMedia()

    def send_AddImageToMedia(self, fileName, image):
        self._oprot.writeMessageBegin('AddImageToMedia', TMessageType.CALL, self._seqid)
        args = AddImageToMedia_args()
        args.fileName = fileName
        args.image = image
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddImageToMedia(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddImageToMedia_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddImageToMedia failed: unknown result")

    def GetImageToMedia(self, fileName):
        """
        Get image file binary

        @param binary image
            The binary number that will be keep.

        @return binary
            binary image.


        Parameters:
         - fileName

        """
        self.send_GetImageToMedia(fileName)
        return self.recv_GetImageToMedia()

    def send_GetImageToMedia(self, fileName):
        self._oprot.writeMessageBegin('GetImageToMedia', TMessageType.CALL, self._seqid)
        args = GetImageToMedia_args()
        args.fileName = fileName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetImageToMedia(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetImageToMedia_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetImageToMedia failed: unknown result")

    def DeleteImageToMedia(self, fileName):
        """
        Delete image file binary

        @param fileName
            The fileName of file that will be delete.

        @return bool
            True or False


        Parameters:
         - fileName

        """
        self.send_DeleteImageToMedia(fileName)
        return self.recv_DeleteImageToMedia()

    def send_DeleteImageToMedia(self, fileName):
        self._oprot.writeMessageBegin('DeleteImageToMedia', TMessageType.CALL, self._seqid)
        args = DeleteImageToMedia_args()
        args.fileName = fileName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteImageToMedia(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteImageToMedia_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteImageToMedia failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["GetContentCreators"] = Processor.process_GetContentCreators
        self._processMap["GetContentCreatorById"] = Processor.process_GetContentCreatorById
        self._processMap["GetContentCreatorByLibraryId"] = Processor.process_GetContentCreatorByLibraryId
        self._processMap["GetContentCreatorByEmail"] = Processor.process_GetContentCreatorByEmail
        self._processMap["GetContentCreatorByStageName"] = Processor.process_GetContentCreatorByStageName
        self._processMap["AddContentCreator"] = Processor.process_AddContentCreator
        self._processMap["DeleteContentCreator"] = Processor.process_DeleteContentCreator
        self._processMap["UpdateContentCreatorPassword"] = Processor.process_UpdateContentCreatorPassword
        self._processMap["UpdateContentCreatorImage"] = Processor.process_UpdateContentCreatorImage
        self._processMap["UpdateContentCreatorStageName"] = Processor.process_UpdateContentCreatorStageName
        self._processMap["UpdateContentCreatorDescription"] = Processor.process_UpdateContentCreatorDescription
        self._processMap["LoginContentCreator"] = Processor.process_LoginContentCreator
        self._processMap["AddContentCreatorToLibrary"] = Processor.process_AddContentCreatorToLibrary
        self._processMap["DeleteLibraryContentCreator"] = Processor.process_DeleteLibraryContentCreator
        self._processMap["GetContentCreatorByQuery"] = Processor.process_GetContentCreatorByQuery
        self._processMap["AddImageToMedia"] = Processor.process_AddImageToMedia
        self._processMap["GetImageToMedia"] = Processor.process_GetImageToMedia
        self._processMap["DeleteImageToMedia"] = Processor.process_DeleteImageToMedia
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_GetContentCreators(self, seqid, iprot, oprot):
        args = GetContentCreators_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetContentCreators_result()
        try:
            result.success = self._handler.GetContentCreators()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetContentCreators", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetContentCreatorById(self, seqid, iprot, oprot):
        args = GetContentCreatorById_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetContentCreatorById_result()
        try:
            result.success = self._handler.GetContentCreatorById(args.idContentCreator)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetContentCreatorById", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetContentCreatorByLibraryId(self, seqid, iprot, oprot):
        args = GetContentCreatorByLibraryId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetContentCreatorByLibraryId_result()
        try:
            result.success = self._handler.GetContentCreatorByLibraryId(args.idLibrary)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetContentCreatorByLibraryId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetContentCreatorByEmail(self, seqid, iprot, oprot):
        args = GetContentCreatorByEmail_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetContentCreatorByEmail_result()
        try:
            result.success = self._handler.GetContentCreatorByEmail(args.email)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetContentCreatorByEmail", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetContentCreatorByStageName(self, seqid, iprot, oprot):
        args = GetContentCreatorByStageName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetContentCreatorByStageName_result()
        try:
            result.success = self._handler.GetContentCreatorByStageName(args.email)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetContentCreatorByStageName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddContentCreator(self, seqid, iprot, oprot):
        args = AddContentCreator_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddContentCreator_result()
        try:
            result.success = self._handler.AddContentCreator(args.newContentCreator)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddContentCreator", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteContentCreator(self, seqid, iprot, oprot):
        args = DeleteContentCreator_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteContentCreator_result()
        try:
            result.success = self._handler.DeleteContentCreator(args.email)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteContentCreator", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateContentCreatorPassword(self, seqid, iprot, oprot):
        args = UpdateContentCreatorPassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateContentCreatorPassword_result()
        try:
            result.success = self._handler.UpdateContentCreatorPassword(args.email, args.newPassword)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateContentCreatorPassword", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateContentCreatorImage(self, seqid, iprot, oprot):
        args = UpdateContentCreatorImage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateContentCreatorImage_result()
        try:
            result.success = self._handler.UpdateContentCreatorImage(args.email, args.fileName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateContentCreatorImage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateContentCreatorStageName(self, seqid, iprot, oprot):
        args = UpdateContentCreatorStageName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateContentCreatorStageName_result()
        try:
            result.success = self._handler.UpdateContentCreatorStageName(args.email, args.currentPassword, args.newStageName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateContentCreatorStageName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateContentCreatorDescription(self, seqid, iprot, oprot):
        args = UpdateContentCreatorDescription_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateContentCreatorDescription_result()
        try:
            result.success = self._handler.UpdateContentCreatorDescription(args.email, args.currentPassword, args.newDescription)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateContentCreatorDescription", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_LoginContentCreator(self, seqid, iprot, oprot):
        args = LoginContentCreator_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = LoginContentCreator_result()
        try:
            result.success = self._handler.LoginContentCreator(args.email, args.password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("LoginContentCreator", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddContentCreatorToLibrary(self, seqid, iprot, oprot):
        args = AddContentCreatorToLibrary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddContentCreatorToLibrary_result()
        try:
            result.success = self._handler.AddContentCreatorToLibrary(args.idLibrary, args.idContenCreator)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddContentCreatorToLibrary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteLibraryContentCreator(self, seqid, iprot, oprot):
        args = DeleteLibraryContentCreator_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteLibraryContentCreator_result()
        try:
            result.success = self._handler.DeleteLibraryContentCreator(args.idLibrary, args.idContentCreator)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteLibraryContentCreator", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetContentCreatorByQuery(self, seqid, iprot, oprot):
        args = GetContentCreatorByQuery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetContentCreatorByQuery_result()
        try:
            result.success = self._handler.GetContentCreatorByQuery(args.query)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetContentCreatorByQuery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddImageToMedia(self, seqid, iprot, oprot):
        args = AddImageToMedia_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddImageToMedia_result()
        try:
            result.success = self._handler.AddImageToMedia(args.fileName, args.image)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddImageToMedia", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetImageToMedia(self, seqid, iprot, oprot):
        args = GetImageToMedia_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetImageToMedia_result()
        try:
            result.success = self._handler.GetImageToMedia(args.fileName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetImageToMedia", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteImageToMedia(self, seqid, iprot, oprot):
        args = DeleteImageToMedia_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteImageToMedia_result()
        try:
            result.success = self._handler.DeleteImageToMedia(args.fileName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteImageToMedia", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class GetContentCreators_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreators_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreators_args)
GetContentCreators_args.thrift_spec = (
)


class GetContentCreators_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = SpotifakeManagement.ttypes.ContentCreator()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreators_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreators_result)
GetContentCreators_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SpotifakeManagement.ttypes.ContentCreator, None], False), None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class GetContentCreatorById_args(object):
    """
    Attributes:
     - idContentCreator

    """


    def __init__(self, idContentCreator=None,):
        self.idContentCreator = idContentCreator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idContentCreator = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorById_args')
        if self.idContentCreator is not None:
            oprot.writeFieldBegin('idContentCreator', TType.I16, 1)
            oprot.writeI16(self.idContentCreator)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorById_args)
GetContentCreatorById_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idContentCreator', None, None, ),  # 1
)


class GetContentCreatorById_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorById_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorById_result)
GetContentCreatorById_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class GetContentCreatorByLibraryId_args(object):
    """
    Attributes:
     - idLibrary

    """


    def __init__(self, idLibrary=None,):
        self.idLibrary = idLibrary

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorByLibraryId_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorByLibraryId_args)
GetContentCreatorByLibraryId_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
)


class GetContentCreatorByLibraryId_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = SpotifakeManagement.ttypes.ContentCreator()
                        _elem12.read(iprot)
                        self.success.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorByLibraryId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter13 in self.success:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorByLibraryId_result)
GetContentCreatorByLibraryId_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SpotifakeManagement.ttypes.ContentCreator, None], False), None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class GetContentCreatorByEmail_args(object):
    """
    Attributes:
     - email

    """


    def __init__(self, email=None,):
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorByEmail_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorByEmail_args)
GetContentCreatorByEmail_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
)


class GetContentCreatorByEmail_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorByEmail_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorByEmail_result)
GetContentCreatorByEmail_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class GetContentCreatorByStageName_args(object):
    """
    Attributes:
     - email

    """


    def __init__(self, email=None,):
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorByStageName_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorByStageName_args)
GetContentCreatorByStageName_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
)


class GetContentCreatorByStageName_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorByStageName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorByStageName_result)
GetContentCreatorByStageName_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class AddContentCreator_args(object):
    """
    Attributes:
     - newContentCreator

    """


    def __init__(self, newContentCreator=None,):
        self.newContentCreator = newContentCreator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.newContentCreator = SpotifakeManagement.ttypes.ContentCreator()
                    self.newContentCreator.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddContentCreator_args')
        if self.newContentCreator is not None:
            oprot.writeFieldBegin('newContentCreator', TType.STRUCT, 1)
            self.newContentCreator.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddContentCreator_args)
AddContentCreator_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'newContentCreator', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 1
)


class AddContentCreator_result(object):
    """
    Attributes:
     - success
     - sErrorUserE

    """


    def __init__(self, success=None, sErrorUserE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddContentCreator_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddContentCreator_result)
AddContentCreator_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
)


class DeleteContentCreator_args(object):
    """
    Attributes:
     - email

    """


    def __init__(self, email=None,):
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteContentCreator_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteContentCreator_args)
DeleteContentCreator_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
)


class DeleteContentCreator_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteContentCreator_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteContentCreator_result)
DeleteContentCreator_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class UpdateContentCreatorPassword_args(object):
    """
    Attributes:
     - email
     - newPassword

    """


    def __init__(self, email=None, newPassword=None,):
        self.email = email
        self.newPassword = newPassword

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorPassword_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.newPassword is not None:
            oprot.writeFieldBegin('newPassword', TType.STRING, 2)
            oprot.writeString(self.newPassword.encode('utf-8') if sys.version_info[0] == 2 else self.newPassword)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorPassword_args)
UpdateContentCreatorPassword_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'newPassword', 'UTF8', None, ),  # 2
)


class UpdateContentCreatorPassword_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorPassword_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorPassword_result)
UpdateContentCreatorPassword_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateContentCreatorImage_args(object):
    """
    Attributes:
     - email
     - fileName

    """


    def __init__(self, email=None, fileName=None,):
        self.email = email
        self.fileName = fileName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorImage_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 2)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorImage_args)
UpdateContentCreatorImage_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'fileName', 'UTF8', None, ),  # 2
)


class UpdateContentCreatorImage_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorImage_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorImage_result)
UpdateContentCreatorImage_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateContentCreatorStageName_args(object):
    """
    Attributes:
     - email
     - currentPassword
     - newStageName

    """


    def __init__(self, email=None, currentPassword=None, newStageName=None,):
        self.email = email
        self.currentPassword = currentPassword
        self.newStageName = newStageName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currentPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newStageName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorStageName_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.currentPassword is not None:
            oprot.writeFieldBegin('currentPassword', TType.STRING, 2)
            oprot.writeString(self.currentPassword.encode('utf-8') if sys.version_info[0] == 2 else self.currentPassword)
            oprot.writeFieldEnd()
        if self.newStageName is not None:
            oprot.writeFieldBegin('newStageName', TType.STRING, 3)
            oprot.writeString(self.newStageName.encode('utf-8') if sys.version_info[0] == 2 else self.newStageName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorStageName_args)
UpdateContentCreatorStageName_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'currentPassword', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newStageName', 'UTF8', None, ),  # 3
)


class UpdateContentCreatorStageName_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorStageName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorStageName_result)
UpdateContentCreatorStageName_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateContentCreatorDescription_args(object):
    """
    Attributes:
     - email
     - currentPassword
     - newDescription

    """


    def __init__(self, email=None, currentPassword=None, newDescription=None,):
        self.email = email
        self.currentPassword = currentPassword
        self.newDescription = newDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currentPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorDescription_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.currentPassword is not None:
            oprot.writeFieldBegin('currentPassword', TType.STRING, 2)
            oprot.writeString(self.currentPassword.encode('utf-8') if sys.version_info[0] == 2 else self.currentPassword)
            oprot.writeFieldEnd()
        if self.newDescription is not None:
            oprot.writeFieldBegin('newDescription', TType.STRING, 3)
            oprot.writeString(self.newDescription.encode('utf-8') if sys.version_info[0] == 2 else self.newDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorDescription_args)
UpdateContentCreatorDescription_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'currentPassword', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newDescription', 'UTF8', None, ),  # 3
)


class UpdateContentCreatorDescription_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorDescription_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorDescription_result)
UpdateContentCreatorDescription_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class LoginContentCreator_args(object):
    """
    Attributes:
     - email
     - password

    """


    def __init__(self, email=None, password=None,):
        self.email = email
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginContentCreator_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LoginContentCreator_args)
LoginContentCreator_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)


class LoginContentCreator_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginContentCreator_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LoginContentCreator_result)
LoginContentCreator_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddContentCreatorToLibrary_args(object):
    """
    Attributes:
     - idLibrary
     - idContenCreator

    """


    def __init__(self, idLibrary=None, idContenCreator=None,):
        self.idLibrary = idLibrary
        self.idContenCreator = idContenCreator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.idContenCreator = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddContentCreatorToLibrary_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.idContenCreator is not None:
            oprot.writeFieldBegin('idContenCreator', TType.I16, 2)
            oprot.writeI16(self.idContenCreator)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddContentCreatorToLibrary_args)
AddContentCreatorToLibrary_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.I16, 'idContenCreator', None, None, ),  # 2
)


class AddContentCreatorToLibrary_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddContentCreatorToLibrary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddContentCreatorToLibrary_result)
AddContentCreatorToLibrary_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteLibraryContentCreator_args(object):
    """
    Attributes:
     - idLibrary
     - idContentCreator

    """


    def __init__(self, idLibrary=None, idContentCreator=None,):
        self.idLibrary = idLibrary
        self.idContentCreator = idContentCreator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.idContentCreator = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryContentCreator_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.idContentCreator is not None:
            oprot.writeFieldBegin('idContentCreator', TType.I16, 2)
            oprot.writeI16(self.idContentCreator)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryContentCreator_args)
DeleteLibraryContentCreator_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.I16, 'idContentCreator', None, None, ),  # 2
)


class DeleteLibraryContentCreator_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryContentCreator_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryContentCreator_result)
DeleteLibraryContentCreator_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class GetContentCreatorByQuery_args(object):
    """
    Attributes:
     - query

    """


    def __init__(self, query=None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.query = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorByQuery_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRING, 1)
            oprot.writeString(self.query.encode('utf-8') if sys.version_info[0] == 2 else self.query)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorByQuery_args)
GetContentCreatorByQuery_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'query', 'UTF8', None, ),  # 1
)


class GetContentCreatorByQuery_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = SpotifakeManagement.ttypes.ContentCreator()
                        _elem19.read(iprot)
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorByQuery_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter20 in self.success:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorByQuery_result)
GetContentCreatorByQuery_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SpotifakeManagement.ttypes.ContentCreator, None], False), None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddImageToMedia_args(object):
    """
    Attributes:
     - fileName
     - image

    """


    def __init__(self, fileName=None, image=None,):
        self.fileName = fileName
        self.image = image

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.image = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddImageToMedia_args')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 2)
            oprot.writeBinary(self.image)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddImageToMedia_args)
AddImageToMedia_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'image', 'BINARY', None, ),  # 2
)


class AddImageToMedia_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddImageToMedia_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddImageToMedia_result)
AddImageToMedia_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class GetImageToMedia_args(object):
    """
    Attributes:
     - fileName

    """


    def __init__(self, fileName=None,):
        self.fileName = fileName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetImageToMedia_args')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetImageToMedia_args)
GetImageToMedia_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
)


class GetImageToMedia_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetImageToMedia_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetImageToMedia_result)
GetImageToMedia_result.thrift_spec = (
    (0, TType.STRING, 'success', 'BINARY', None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteImageToMedia_args(object):
    """
    Attributes:
     - fileName

    """


    def __init__(self, fileName=None,):
        self.fileName = fileName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteImageToMedia_args')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteImageToMedia_args)
DeleteImageToMedia_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
)


class DeleteImageToMedia_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteImageToMedia_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteImageToMedia_result)
DeleteImageToMedia_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

