#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    """
    This file describes the services
    that needs to be passed to the API methods in order to
    manage Consumer and Content Creator users and Content.


    """
    def GetConsumerById(self, idConsumer):
        """
        Get Consumer by Id

        @param idConsumer
            The Consumer Id to be obtained.

        @return Consumer
            Consumer object


        Parameters:
         - idConsumer

        """
        pass

    def GetContentCreatorById(self, idContentCreator):
        """
        Get ContentCreator by Id

        @param idContentCreator
            The ContentCreator Id to be obtained.

        @return ContentCreator
            ContentCreator object


        Parameters:
         - idContentCreator

        """
        pass

    def AddConsumer(self, newConsumer):
        """
        Register a Consumer.

        @param newconsumer

        @return Consumer
          Consumer object added


        Parameters:
         - newConsumer

        """
        pass

    def AddConContentCreator(self, newContentCreator):
        """
        Register a Content Creator.

        @param newContentCreator

        @return ContentCreator
          ContentCreator object added


        Parameters:
         - newContentCreator

        """
        pass

    def DeleteConsumer(self, email):
        """
        Delete a Consumer

        @param email
            The Consumer email of the Consumer to be deleted.

        @return Id
            The Consumer Id of the Consumer deleted.


        Parameters:
         - email

        """
        pass

    def DeleteContentCreator(self, email):
        """
        Delete a ContentCreator

        @param email
            The Content Creator email of the Content Creator to be deleted.

        @return Id
            The Content Creator Id of the Content Creator deleted.


        Parameters:
         - email

        """
        pass

    def UpdateConsumerName(self, email, currentPassword, newName, newLastName):
        """
         
        Update previously registered Consumer name.

        @param email
            The Consumer Email of the Consumer which require an update name.

        @return Consumer
            Modified Consumer obejct.


        Parameters:
         - email
         - currentPassword
         - newName
         - newLastName

        """
        pass

    def UpdateConsumerPassword(self, email, currentPassword, newPassword):
        """
         
        Update previously registered Consumer password.

        @param email
            The Consumer Email of the Consumer which require an update password.

        @return Consumer
            Modified Consumer obejct.


        Parameters:
         - email
         - currentPassword
         - newPassword

        """
        pass

    def UpdateConsumerImage(self, email, newImageStoragePath):
        """
         
        Update previously registered Consumer image.

        @param email
            The Consumer Email of the Consumer which require an update image.

        @return Consumer
            Modified Consumer obejct.


        Parameters:
         - email
         - newImageStoragePath

        """
        pass

    def UpdateContentCreatorName(self, email, currentPassword, newName, newLastName):
        """
         
        Update previously registered Content Creator name.

        @param email
            The Content Creator Email of the Consumer which require an update name.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - currentPassword
         - newName
         - newLastName

        """
        pass

    def UpdateContentCreatorPassword(self, email, currentPassword, newPassword):
        """
         
        Update previously registered Content Creator password.

        @param email
            The Content Creator Email of the Consumer which require an update password.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - currentPassword
         - newPassword

        """
        pass

    def UpdateContentCreatorImage(self, email, newImageStoragePath):
        """
         
        Update previously registered Content Creator image.

        @param email
            The Content Creator Email of the Consumer which require an update image.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - newImageStoragePath

        """
        pass

    def UpdateContentCreatorStageName(self, email, currentPassword, newStageName):
        """
         
        Update previously registered Content Creator stage name.

        @param email
            The Content Creator Email of the Consumer which require an update stage name.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - currentPassword
         - newStageName

        """
        pass

    def UpdateContentCreatorDescription(self, email, currentPassword, newDescription):
        """
         
        Update previously registered Content Creator description.

        @param email
            The Content Creator Email of the Consumer which require an update description.

        @return ContentCreator
            Modified Content Creator obejct


        Parameters:
         - email
         - currentPassword
         - newDescription

        """
        pass

    def isConsumer(self, email):
        """
        Verify if User is a Consumer

        @param email
            The User email

        @return boolean
            True / False


        Parameters:
         - email

        """
        pass

    def LoginConsumer(self, email, password):
        """
        Allows the login of a consumer

        @param email
            The Consumer email

        @param password
            The Email password of the consumer

        @return Consumer
            Consumer object


        Parameters:
         - email
         - password

        """
        pass

    def LoginContentCreator(self, email, password):
        """
        Allows the login of a content creator

        @param email
            The Conntent Creator email

        @param password
            The Email password of the content creator

        @return Content Creator
            Content Creator object


        Parameters:
         - email
         - password

        """
        pass

    def GetAlbumByTitle(self, title):
        """
        Get Album by Title

        @param title
            The Album Title to be obtained

        @return Album
            Album object


        Parameters:
         - title

        """
        pass

    def GetTrackByTitle(self, title):
        """
        Get Track by Title

        @param title
            The Track Title to be obtained

        @return Track
            Track object


        Parameters:
         - title

        """
        pass

    def GetPlaylistByTitle(self, title):
        """
        Get Playlist by Title

        @param title
            The Playlist Title to be obtained

        @return Playlist
            Playlist object


        Parameters:
         - title

        """
        pass

    def AddAlbum(self, newAlbum):
        """
        Register an Album.

        @param newAlbum

        @return Album
          Album object added


        Parameters:
         - newAlbum

        """
        pass

    def DeleteAlbum(self, idAlbum):
        """
        Delete a Album

        @param idAlbum
            The Album Id of the Album to be deleted.

        @return Id
            The Album Id of the Album deleted.


        Parameters:
         - idAlbum

        """
        pass

    def UpdateAlbumTitle(self, idAlbum, newAlbumTitle):
        """
         
        Update previously registered Album title.

        @param idAlbum
            The Album Id of the Album which require an update title.

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - newAlbumTitle

        """
        pass

    def UpdateAlbumCover(self, idAlbum, newImageStoragePath):
        """
         
        Update previously registered Album cover.

        @param idAlbum
            The Album Id of the Album which require an update cover.

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - newImageStoragePath

        """
        pass

    def UpdateAlbumFeaturing(self, idAlbum, newFeaturing):
        """
         
        Update previously registered Album featuring.

        @param idAlbum
            The Album Id of the Album which require an update featuring.

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - newFeaturing

        """
        pass

    def AddTrackToAlbum(self, idAlbum, newTrack):
        """
        Add a Track to an Album.

        @param idAlbum
            The Album Id which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idAlbum
         - newTrack

        """
        pass

    def DeleteAlbumTrack(self, idAlbum, trackNumber):
        """
        Delete a Track from an Album

        @param idAlbum
            The Album Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idAlbum
         - trackNumber

        """
        pass

    def UpdateAlbumTrackTitle(self, idAlbum, trackNumber, newAlbumTrackTitle):
        """
         
        Update previously registered Album track title.

        @param idAlbum
            The Album Id of the Album which require an update track title.

        @param trackNumber
            The Track number of the Track which require an update title

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - trackNumber
         - newAlbumTrackTitle

        """
        pass

    def UpdateAlbumTrackFeaturing(self, idAlbum, trackNumber, newFeaturing):
        """
         
        Update previously registered Album track featuring.

        @param idAlbum
            The Album Id of the Album which require an update track featuring.

        @param trackNumber
            The Track number of the Track which require an update featuring

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - trackNumber
         - newFeaturing

        """
        pass

    def AddTrackToLibrary(self, idLibrary, newTrack):
        """
        Add a Track to Library.

        @param idLibrary
            The Library Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idLibrary
         - newTrack

        """
        pass

    def DeleteLibraryTrack(self, idLibrary, trackNumber):
        """
        Delete a Track from a Library

        @param idLibrary
            The Library Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idLibrary
         - trackNumber

        """
        pass

    def AddAlbumToLibrary(self, idLibrary, newAlbum):
        """
        Add an Album to Library.

        @param idLibrary
            The Library Id to which an album will be added

        @param newAlbum

        @return Album
            Album object added


        Parameters:
         - idLibrary
         - newAlbum

        """
        pass

    def DeleteLibraryAlbum(self, idLibrary, idAlbum):
        """
        Delete an Album from a Library

        @param idLibrary
            The Library Id which an album will be deleted.

        @param idAlbum
            The Album Id which will be deleted

        @return Id
            The Album Id of the Album deleted.


        Parameters:
         - idLibrary
         - idAlbum

        """
        pass

    def AddPlaylistToLibrary(self, idLibrary, newPlaylist):
        """
        Add a Playlist to Library.

        @param idLibrary
            The Library Id to which a playlist will be added

        @param newPlaylist

        @return Playlist
            Playlist object added


        Parameters:
         - idLibrary
         - newPlaylist

        """
        pass

    def DeleteLibraryPlaylist(self, idLibrary, idPlaylist):
        """
        Delete a Playlist from a Library

        @param idLibrary
            The Library Id which a playlist will be deleted.

        @param idPlaylist
            The Playlist Id which will be deleted

        @return Id
            The Playlist Id of the Playlist deleted.


        Parameters:
         - idLibrary
         - idPlaylist

        """
        pass

    def AddContentCreatorToLibrary(self, idLibrary, newContentCreator):
        """
        Add a ContentCreator to Library.

        @param idLibrary
            The Library Id to which a content creator will be added

        @param newContentCreator

        @return ContentCreator
            ContentCreator object added


        Parameters:
         - idLibrary
         - newContentCreator

        """
        pass

    def DeleteLibraryContentCreator(self, idLibrary, idContentCreator):
        """
        Delete a Content Creator from a Library

        @param idLibrary
            The Library Id which a content creator will be deleted.

        @param idContentCreator
            The Content Creator Id which will be deleted

        @return Id
            The Content Creator Id of the Content Creator deleted.


        Parameters:
         - idLibrary
         - idContentCreator

        """
        pass

    def getContent(self, query):
        """
        Get Content

        @param query
            The query introduced by user

        @return RelatedResult
            Related result to the query


        Parameters:
         - query

        """
        pass

    def UpdatePlaylistTitle(self, idPlaylist, newPlaylistTitle):
        """
         
        Update previously registered Playlist title.

        @param playlistId
            The Playlist Id of the Playlist which require an update title.

        @return Playlist
            Modified Playlist obejct.


        Parameters:
         - idPlaylist
         - newPlaylistTitle

        """
        pass

    def UpdatePlaylistCover(self, idPlaylist, newImageStoragePath):
        """
         
        Update previously registered Playlist cover.

        @param playlistId
            The Playlist Id of the Playlist which require an update cover.

        @return Playlist
            Modified Playlist obejct.


        Parameters:
         - idPlaylist
         - newImageStoragePath

        """
        pass

    def UpdatePlaylistDescription(self, idPlaylist, newDescription):
        """
         
        Update previously registered Playlist description.

        @param playlistId
            The Playlist Id of the Playlist which require an update description.

        @return Playlist
            Modified Playlist obejct.


        Parameters:
         - idPlaylist
         - newDescription

        """
        pass

    def AddTrackToPlaylist(self, idPlaylist, newtrack):
        """
        Add a Track to Playlist.

        @param idPlaylist
            The Playlist Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idPlaylist
         - newtrack

        """
        pass

    def DeletePlaylistTrack(self, idPlaylist, trackNumber):
        """
        Delete a Track from a Playlist

        @param idPlaylist
            The Playlist Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idPlaylist
         - trackNumber

        """
        pass

    def AddTrackToPlayQueue(self, idPlayQueu, newTrack):
        """
        Add a Track to PlayQueue.

        @param idPlayQueue
            The PlayQueue Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idPlayQueu
         - newTrack

        """
        pass

    def DeletePlayQueueTrack(self, idPlayQueu, trackNumber):
        """
        Delete a Track from a PlayQueue

        @param idPlayQueue
            The PlayQueue Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idPlayQueu
         - trackNumber

        """
        pass

    def GenerateRadioStation(self, gender):
        """
        Generate a Radio Station

        @param gender
            The gender which the radio station will be generated.

        @return tracks
            List of tracks which belong to the gender entered.


        Parameters:
         - gender

        """
        pass


class Client(Iface):
    """
    This file describes the services
    that needs to be passed to the API methods in order to
    manage Consumer and Content Creator users and Content.


    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def GetConsumerById(self, idConsumer):
        """
        Get Consumer by Id

        @param idConsumer
            The Consumer Id to be obtained.

        @return Consumer
            Consumer object


        Parameters:
         - idConsumer

        """
        self.send_GetConsumerById(idConsumer)
        return self.recv_GetConsumerById()

    def send_GetConsumerById(self, idConsumer):
        self._oprot.writeMessageBegin('GetConsumerById', TMessageType.CALL, self._seqid)
        args = GetConsumerById_args()
        args.idConsumer = idConsumer
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetConsumerById(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetConsumerById_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetConsumerById failed: unknown result")

    def GetContentCreatorById(self, idContentCreator):
        """
        Get ContentCreator by Id

        @param idContentCreator
            The ContentCreator Id to be obtained.

        @return ContentCreator
            ContentCreator object


        Parameters:
         - idContentCreator

        """
        self.send_GetContentCreatorById(idContentCreator)
        return self.recv_GetContentCreatorById()

    def send_GetContentCreatorById(self, idContentCreator):
        self._oprot.writeMessageBegin('GetContentCreatorById', TMessageType.CALL, self._seqid)
        args = GetContentCreatorById_args()
        args.idContentCreator = idContentCreator
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetContentCreatorById(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetContentCreatorById_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetContentCreatorById failed: unknown result")

    def AddConsumer(self, newConsumer):
        """
        Register a Consumer.

        @param newconsumer

        @return Consumer
          Consumer object added


        Parameters:
         - newConsumer

        """
        self.send_AddConsumer(newConsumer)
        return self.recv_AddConsumer()

    def send_AddConsumer(self, newConsumer):
        self._oprot.writeMessageBegin('AddConsumer', TMessageType.CALL, self._seqid)
        args = AddConsumer_args()
        args.newConsumer = newConsumer
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddConsumer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddConsumer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddConsumer failed: unknown result")

    def AddConContentCreator(self, newContentCreator):
        """
        Register a Content Creator.

        @param newContentCreator

        @return ContentCreator
          ContentCreator object added


        Parameters:
         - newContentCreator

        """
        self.send_AddConContentCreator(newContentCreator)
        return self.recv_AddConContentCreator()

    def send_AddConContentCreator(self, newContentCreator):
        self._oprot.writeMessageBegin('AddConContentCreator', TMessageType.CALL, self._seqid)
        args = AddConContentCreator_args()
        args.newContentCreator = newContentCreator
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddConContentCreator(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddConContentCreator_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddConContentCreator failed: unknown result")

    def DeleteConsumer(self, email):
        """
        Delete a Consumer

        @param email
            The Consumer email of the Consumer to be deleted.

        @return Id
            The Consumer Id of the Consumer deleted.


        Parameters:
         - email

        """
        self.send_DeleteConsumer(email)
        return self.recv_DeleteConsumer()

    def send_DeleteConsumer(self, email):
        self._oprot.writeMessageBegin('DeleteConsumer', TMessageType.CALL, self._seqid)
        args = DeleteConsumer_args()
        args.email = email
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteConsumer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteConsumer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteConsumer failed: unknown result")

    def DeleteContentCreator(self, email):
        """
        Delete a ContentCreator

        @param email
            The Content Creator email of the Content Creator to be deleted.

        @return Id
            The Content Creator Id of the Content Creator deleted.


        Parameters:
         - email

        """
        self.send_DeleteContentCreator(email)
        return self.recv_DeleteContentCreator()

    def send_DeleteContentCreator(self, email):
        self._oprot.writeMessageBegin('DeleteContentCreator', TMessageType.CALL, self._seqid)
        args = DeleteContentCreator_args()
        args.email = email
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteContentCreator(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteContentCreator_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteContentCreator failed: unknown result")

    def UpdateConsumerName(self, email, currentPassword, newName, newLastName):
        """
         
        Update previously registered Consumer name.

        @param email
            The Consumer Email of the Consumer which require an update name.

        @return Consumer
            Modified Consumer obejct.


        Parameters:
         - email
         - currentPassword
         - newName
         - newLastName

        """
        self.send_UpdateConsumerName(email, currentPassword, newName, newLastName)
        return self.recv_UpdateConsumerName()

    def send_UpdateConsumerName(self, email, currentPassword, newName, newLastName):
        self._oprot.writeMessageBegin('UpdateConsumerName', TMessageType.CALL, self._seqid)
        args = UpdateConsumerName_args()
        args.email = email
        args.currentPassword = currentPassword
        args.newName = newName
        args.newLastName = newLastName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateConsumerName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateConsumerName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateConsumerName failed: unknown result")

    def UpdateConsumerPassword(self, email, currentPassword, newPassword):
        """
         
        Update previously registered Consumer password.

        @param email
            The Consumer Email of the Consumer which require an update password.

        @return Consumer
            Modified Consumer obejct.


        Parameters:
         - email
         - currentPassword
         - newPassword

        """
        self.send_UpdateConsumerPassword(email, currentPassword, newPassword)
        return self.recv_UpdateConsumerPassword()

    def send_UpdateConsumerPassword(self, email, currentPassword, newPassword):
        self._oprot.writeMessageBegin('UpdateConsumerPassword', TMessageType.CALL, self._seqid)
        args = UpdateConsumerPassword_args()
        args.email = email
        args.currentPassword = currentPassword
        args.newPassword = newPassword
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateConsumerPassword(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateConsumerPassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateConsumerPassword failed: unknown result")

    def UpdateConsumerImage(self, email, newImageStoragePath):
        """
         
        Update previously registered Consumer image.

        @param email
            The Consumer Email of the Consumer which require an update image.

        @return Consumer
            Modified Consumer obejct.


        Parameters:
         - email
         - newImageStoragePath

        """
        self.send_UpdateConsumerImage(email, newImageStoragePath)
        return self.recv_UpdateConsumerImage()

    def send_UpdateConsumerImage(self, email, newImageStoragePath):
        self._oprot.writeMessageBegin('UpdateConsumerImage', TMessageType.CALL, self._seqid)
        args = UpdateConsumerImage_args()
        args.email = email
        args.newImageStoragePath = newImageStoragePath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateConsumerImage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateConsumerImage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateConsumerImage failed: unknown result")

    def UpdateContentCreatorName(self, email, currentPassword, newName, newLastName):
        """
         
        Update previously registered Content Creator name.

        @param email
            The Content Creator Email of the Consumer which require an update name.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - currentPassword
         - newName
         - newLastName

        """
        self.send_UpdateContentCreatorName(email, currentPassword, newName, newLastName)
        return self.recv_UpdateContentCreatorName()

    def send_UpdateContentCreatorName(self, email, currentPassword, newName, newLastName):
        self._oprot.writeMessageBegin('UpdateContentCreatorName', TMessageType.CALL, self._seqid)
        args = UpdateContentCreatorName_args()
        args.email = email
        args.currentPassword = currentPassword
        args.newName = newName
        args.newLastName = newLastName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateContentCreatorName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateContentCreatorName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateContentCreatorName failed: unknown result")

    def UpdateContentCreatorPassword(self, email, currentPassword, newPassword):
        """
         
        Update previously registered Content Creator password.

        @param email
            The Content Creator Email of the Consumer which require an update password.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - currentPassword
         - newPassword

        """
        self.send_UpdateContentCreatorPassword(email, currentPassword, newPassword)
        return self.recv_UpdateContentCreatorPassword()

    def send_UpdateContentCreatorPassword(self, email, currentPassword, newPassword):
        self._oprot.writeMessageBegin('UpdateContentCreatorPassword', TMessageType.CALL, self._seqid)
        args = UpdateContentCreatorPassword_args()
        args.email = email
        args.currentPassword = currentPassword
        args.newPassword = newPassword
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateContentCreatorPassword(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateContentCreatorPassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateContentCreatorPassword failed: unknown result")

    def UpdateContentCreatorImage(self, email, newImageStoragePath):
        """
         
        Update previously registered Content Creator image.

        @param email
            The Content Creator Email of the Consumer which require an update image.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - newImageStoragePath

        """
        self.send_UpdateContentCreatorImage(email, newImageStoragePath)
        return self.recv_UpdateContentCreatorImage()

    def send_UpdateContentCreatorImage(self, email, newImageStoragePath):
        self._oprot.writeMessageBegin('UpdateContentCreatorImage', TMessageType.CALL, self._seqid)
        args = UpdateContentCreatorImage_args()
        args.email = email
        args.newImageStoragePath = newImageStoragePath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateContentCreatorImage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateContentCreatorImage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateContentCreatorImage failed: unknown result")

    def UpdateContentCreatorStageName(self, email, currentPassword, newStageName):
        """
         
        Update previously registered Content Creator stage name.

        @param email
            The Content Creator Email of the Consumer which require an update stage name.

        @return ContentCreator
            Modified Content Creator obejct.


        Parameters:
         - email
         - currentPassword
         - newStageName

        """
        self.send_UpdateContentCreatorStageName(email, currentPassword, newStageName)
        return self.recv_UpdateContentCreatorStageName()

    def send_UpdateContentCreatorStageName(self, email, currentPassword, newStageName):
        self._oprot.writeMessageBegin('UpdateContentCreatorStageName', TMessageType.CALL, self._seqid)
        args = UpdateContentCreatorStageName_args()
        args.email = email
        args.currentPassword = currentPassword
        args.newStageName = newStageName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateContentCreatorStageName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateContentCreatorStageName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateContentCreatorStageName failed: unknown result")

    def UpdateContentCreatorDescription(self, email, currentPassword, newDescription):
        """
         
        Update previously registered Content Creator description.

        @param email
            The Content Creator Email of the Consumer which require an update description.

        @return ContentCreator
            Modified Content Creator obejct


        Parameters:
         - email
         - currentPassword
         - newDescription

        """
        self.send_UpdateContentCreatorDescription(email, currentPassword, newDescription)
        return self.recv_UpdateContentCreatorDescription()

    def send_UpdateContentCreatorDescription(self, email, currentPassword, newDescription):
        self._oprot.writeMessageBegin('UpdateContentCreatorDescription', TMessageType.CALL, self._seqid)
        args = UpdateContentCreatorDescription_args()
        args.email = email
        args.currentPassword = currentPassword
        args.newDescription = newDescription
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateContentCreatorDescription(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateContentCreatorDescription_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateContentCreatorDescription failed: unknown result")

    def isConsumer(self, email):
        """
        Verify if User is a Consumer

        @param email
            The User email

        @return boolean
            True / False


        Parameters:
         - email

        """
        self.send_isConsumer(email)
        return self.recv_isConsumer()

    def send_isConsumer(self, email):
        self._oprot.writeMessageBegin('isConsumer', TMessageType.CALL, self._seqid)
        args = isConsumer_args()
        args.email = email
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isConsumer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isConsumer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isConsumer failed: unknown result")

    def LoginConsumer(self, email, password):
        """
        Allows the login of a consumer

        @param email
            The Consumer email

        @param password
            The Email password of the consumer

        @return Consumer
            Consumer object


        Parameters:
         - email
         - password

        """
        self.send_LoginConsumer(email, password)
        return self.recv_LoginConsumer()

    def send_LoginConsumer(self, email, password):
        self._oprot.writeMessageBegin('LoginConsumer', TMessageType.CALL, self._seqid)
        args = LoginConsumer_args()
        args.email = email
        args.password = password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_LoginConsumer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = LoginConsumer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "LoginConsumer failed: unknown result")

    def LoginContentCreator(self, email, password):
        """
        Allows the login of a content creator

        @param email
            The Conntent Creator email

        @param password
            The Email password of the content creator

        @return Content Creator
            Content Creator object


        Parameters:
         - email
         - password

        """
        self.send_LoginContentCreator(email, password)
        return self.recv_LoginContentCreator()

    def send_LoginContentCreator(self, email, password):
        self._oprot.writeMessageBegin('LoginContentCreator', TMessageType.CALL, self._seqid)
        args = LoginContentCreator_args()
        args.email = email
        args.password = password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_LoginContentCreator(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = LoginContentCreator_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorUserE is not None:
            raise result.sErrorUserE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "LoginContentCreator failed: unknown result")

    def GetAlbumByTitle(self, title):
        """
        Get Album by Title

        @param title
            The Album Title to be obtained

        @return Album
            Album object


        Parameters:
         - title

        """
        self.send_GetAlbumByTitle(title)
        return self.recv_GetAlbumByTitle()

    def send_GetAlbumByTitle(self, title):
        self._oprot.writeMessageBegin('GetAlbumByTitle', TMessageType.CALL, self._seqid)
        args = GetAlbumByTitle_args()
        args.title = title
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetAlbumByTitle(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetAlbumByTitle_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetAlbumByTitle failed: unknown result")

    def GetTrackByTitle(self, title):
        """
        Get Track by Title

        @param title
            The Track Title to be obtained

        @return Track
            Track object


        Parameters:
         - title

        """
        self.send_GetTrackByTitle(title)
        return self.recv_GetTrackByTitle()

    def send_GetTrackByTitle(self, title):
        self._oprot.writeMessageBegin('GetTrackByTitle', TMessageType.CALL, self._seqid)
        args = GetTrackByTitle_args()
        args.title = title
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetTrackByTitle(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetTrackByTitle_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetTrackByTitle failed: unknown result")

    def GetPlaylistByTitle(self, title):
        """
        Get Playlist by Title

        @param title
            The Playlist Title to be obtained

        @return Playlist
            Playlist object


        Parameters:
         - title

        """
        self.send_GetPlaylistByTitle(title)
        return self.recv_GetPlaylistByTitle()

    def send_GetPlaylistByTitle(self, title):
        self._oprot.writeMessageBegin('GetPlaylistByTitle', TMessageType.CALL, self._seqid)
        args = GetPlaylistByTitle_args()
        args.title = title
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetPlaylistByTitle(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetPlaylistByTitle_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystem is not None:
            raise result.sErrorSystem
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetPlaylistByTitle failed: unknown result")

    def AddAlbum(self, newAlbum):
        """
        Register an Album.

        @param newAlbum

        @return Album
          Album object added


        Parameters:
         - newAlbum

        """
        self.send_AddAlbum(newAlbum)
        return self.recv_AddAlbum()

    def send_AddAlbum(self, newAlbum):
        self._oprot.writeMessageBegin('AddAlbum', TMessageType.CALL, self._seqid)
        args = AddAlbum_args()
        args.newAlbum = newAlbum
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddAlbum(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddAlbum_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddAlbum failed: unknown result")

    def DeleteAlbum(self, idAlbum):
        """
        Delete a Album

        @param idAlbum
            The Album Id of the Album to be deleted.

        @return Id
            The Album Id of the Album deleted.


        Parameters:
         - idAlbum

        """
        self.send_DeleteAlbum(idAlbum)
        return self.recv_DeleteAlbum()

    def send_DeleteAlbum(self, idAlbum):
        self._oprot.writeMessageBegin('DeleteAlbum', TMessageType.CALL, self._seqid)
        args = DeleteAlbum_args()
        args.idAlbum = idAlbum
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteAlbum(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteAlbum_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteAlbum failed: unknown result")

    def UpdateAlbumTitle(self, idAlbum, newAlbumTitle):
        """
         
        Update previously registered Album title.

        @param idAlbum
            The Album Id of the Album which require an update title.

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - newAlbumTitle

        """
        self.send_UpdateAlbumTitle(idAlbum, newAlbumTitle)
        return self.recv_UpdateAlbumTitle()

    def send_UpdateAlbumTitle(self, idAlbum, newAlbumTitle):
        self._oprot.writeMessageBegin('UpdateAlbumTitle', TMessageType.CALL, self._seqid)
        args = UpdateAlbumTitle_args()
        args.idAlbum = idAlbum
        args.newAlbumTitle = newAlbumTitle
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateAlbumTitle(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateAlbumTitle_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateAlbumTitle failed: unknown result")

    def UpdateAlbumCover(self, idAlbum, newImageStoragePath):
        """
         
        Update previously registered Album cover.

        @param idAlbum
            The Album Id of the Album which require an update cover.

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - newImageStoragePath

        """
        self.send_UpdateAlbumCover(idAlbum, newImageStoragePath)
        return self.recv_UpdateAlbumCover()

    def send_UpdateAlbumCover(self, idAlbum, newImageStoragePath):
        self._oprot.writeMessageBegin('UpdateAlbumCover', TMessageType.CALL, self._seqid)
        args = UpdateAlbumCover_args()
        args.idAlbum = idAlbum
        args.newImageStoragePath = newImageStoragePath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateAlbumCover(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateAlbumCover_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateAlbumCover failed: unknown result")

    def UpdateAlbumFeaturing(self, idAlbum, newFeaturing):
        """
         
        Update previously registered Album featuring.

        @param idAlbum
            The Album Id of the Album which require an update featuring.

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - newFeaturing

        """
        self.send_UpdateAlbumFeaturing(idAlbum, newFeaturing)
        return self.recv_UpdateAlbumFeaturing()

    def send_UpdateAlbumFeaturing(self, idAlbum, newFeaturing):
        self._oprot.writeMessageBegin('UpdateAlbumFeaturing', TMessageType.CALL, self._seqid)
        args = UpdateAlbumFeaturing_args()
        args.idAlbum = idAlbum
        args.newFeaturing = newFeaturing
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateAlbumFeaturing(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateAlbumFeaturing_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateAlbumFeaturing failed: unknown result")

    def AddTrackToAlbum(self, idAlbum, newTrack):
        """
        Add a Track to an Album.

        @param idAlbum
            The Album Id which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idAlbum
         - newTrack

        """
        self.send_AddTrackToAlbum(idAlbum, newTrack)
        return self.recv_AddTrackToAlbum()

    def send_AddTrackToAlbum(self, idAlbum, newTrack):
        self._oprot.writeMessageBegin('AddTrackToAlbum', TMessageType.CALL, self._seqid)
        args = AddTrackToAlbum_args()
        args.idAlbum = idAlbum
        args.newTrack = newTrack
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddTrackToAlbum(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddTrackToAlbum_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddTrackToAlbum failed: unknown result")

    def DeleteAlbumTrack(self, idAlbum, trackNumber):
        """
        Delete a Track from an Album

        @param idAlbum
            The Album Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idAlbum
         - trackNumber

        """
        self.send_DeleteAlbumTrack(idAlbum, trackNumber)
        return self.recv_DeleteAlbumTrack()

    def send_DeleteAlbumTrack(self, idAlbum, trackNumber):
        self._oprot.writeMessageBegin('DeleteAlbumTrack', TMessageType.CALL, self._seqid)
        args = DeleteAlbumTrack_args()
        args.idAlbum = idAlbum
        args.trackNumber = trackNumber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteAlbumTrack(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteAlbumTrack_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteAlbumTrack failed: unknown result")

    def UpdateAlbumTrackTitle(self, idAlbum, trackNumber, newAlbumTrackTitle):
        """
         
        Update previously registered Album track title.

        @param idAlbum
            The Album Id of the Album which require an update track title.

        @param trackNumber
            The Track number of the Track which require an update title

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - trackNumber
         - newAlbumTrackTitle

        """
        self.send_UpdateAlbumTrackTitle(idAlbum, trackNumber, newAlbumTrackTitle)
        return self.recv_UpdateAlbumTrackTitle()

    def send_UpdateAlbumTrackTitle(self, idAlbum, trackNumber, newAlbumTrackTitle):
        self._oprot.writeMessageBegin('UpdateAlbumTrackTitle', TMessageType.CALL, self._seqid)
        args = UpdateAlbumTrackTitle_args()
        args.idAlbum = idAlbum
        args.trackNumber = trackNumber
        args.newAlbumTrackTitle = newAlbumTrackTitle
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateAlbumTrackTitle(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateAlbumTrackTitle_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateAlbumTrackTitle failed: unknown result")

    def UpdateAlbumTrackFeaturing(self, idAlbum, trackNumber, newFeaturing):
        """
         
        Update previously registered Album track featuring.

        @param idAlbum
            The Album Id of the Album which require an update track featuring.

        @param trackNumber
            The Track number of the Track which require an update featuring

        @return Album
            Modified Album obejct.


        Parameters:
         - idAlbum
         - trackNumber
         - newFeaturing

        """
        self.send_UpdateAlbumTrackFeaturing(idAlbum, trackNumber, newFeaturing)
        return self.recv_UpdateAlbumTrackFeaturing()

    def send_UpdateAlbumTrackFeaturing(self, idAlbum, trackNumber, newFeaturing):
        self._oprot.writeMessageBegin('UpdateAlbumTrackFeaturing', TMessageType.CALL, self._seqid)
        args = UpdateAlbumTrackFeaturing_args()
        args.idAlbum = idAlbum
        args.trackNumber = trackNumber
        args.newFeaturing = newFeaturing
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateAlbumTrackFeaturing(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateAlbumTrackFeaturing_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        if result.sErrorInvalidRequestE is not None:
            raise result.sErrorInvalidRequestE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateAlbumTrackFeaturing failed: unknown result")

    def AddTrackToLibrary(self, idLibrary, newTrack):
        """
        Add a Track to Library.

        @param idLibrary
            The Library Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idLibrary
         - newTrack

        """
        self.send_AddTrackToLibrary(idLibrary, newTrack)
        return self.recv_AddTrackToLibrary()

    def send_AddTrackToLibrary(self, idLibrary, newTrack):
        self._oprot.writeMessageBegin('AddTrackToLibrary', TMessageType.CALL, self._seqid)
        args = AddTrackToLibrary_args()
        args.idLibrary = idLibrary
        args.newTrack = newTrack
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddTrackToLibrary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddTrackToLibrary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddTrackToLibrary failed: unknown result")

    def DeleteLibraryTrack(self, idLibrary, trackNumber):
        """
        Delete a Track from a Library

        @param idLibrary
            The Library Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idLibrary
         - trackNumber

        """
        self.send_DeleteLibraryTrack(idLibrary, trackNumber)
        return self.recv_DeleteLibraryTrack()

    def send_DeleteLibraryTrack(self, idLibrary, trackNumber):
        self._oprot.writeMessageBegin('DeleteLibraryTrack', TMessageType.CALL, self._seqid)
        args = DeleteLibraryTrack_args()
        args.idLibrary = idLibrary
        args.trackNumber = trackNumber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteLibraryTrack(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteLibraryTrack_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteLibraryTrack failed: unknown result")

    def AddAlbumToLibrary(self, idLibrary, newAlbum):
        """
        Add an Album to Library.

        @param idLibrary
            The Library Id to which an album will be added

        @param newAlbum

        @return Album
            Album object added


        Parameters:
         - idLibrary
         - newAlbum

        """
        self.send_AddAlbumToLibrary(idLibrary, newAlbum)
        return self.recv_AddAlbumToLibrary()

    def send_AddAlbumToLibrary(self, idLibrary, newAlbum):
        self._oprot.writeMessageBegin('AddAlbumToLibrary', TMessageType.CALL, self._seqid)
        args = AddAlbumToLibrary_args()
        args.idLibrary = idLibrary
        args.newAlbum = newAlbum
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddAlbumToLibrary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddAlbumToLibrary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddAlbumToLibrary failed: unknown result")

    def DeleteLibraryAlbum(self, idLibrary, idAlbum):
        """
        Delete an Album from a Library

        @param idLibrary
            The Library Id which an album will be deleted.

        @param idAlbum
            The Album Id which will be deleted

        @return Id
            The Album Id of the Album deleted.


        Parameters:
         - idLibrary
         - idAlbum

        """
        self.send_DeleteLibraryAlbum(idLibrary, idAlbum)
        return self.recv_DeleteLibraryAlbum()

    def send_DeleteLibraryAlbum(self, idLibrary, idAlbum):
        self._oprot.writeMessageBegin('DeleteLibraryAlbum', TMessageType.CALL, self._seqid)
        args = DeleteLibraryAlbum_args()
        args.idLibrary = idLibrary
        args.idAlbum = idAlbum
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteLibraryAlbum(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteLibraryAlbum_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteLibraryAlbum failed: unknown result")

    def AddPlaylistToLibrary(self, idLibrary, newPlaylist):
        """
        Add a Playlist to Library.

        @param idLibrary
            The Library Id to which a playlist will be added

        @param newPlaylist

        @return Playlist
            Playlist object added


        Parameters:
         - idLibrary
         - newPlaylist

        """
        self.send_AddPlaylistToLibrary(idLibrary, newPlaylist)
        return self.recv_AddPlaylistToLibrary()

    def send_AddPlaylistToLibrary(self, idLibrary, newPlaylist):
        self._oprot.writeMessageBegin('AddPlaylistToLibrary', TMessageType.CALL, self._seqid)
        args = AddPlaylistToLibrary_args()
        args.idLibrary = idLibrary
        args.newPlaylist = newPlaylist
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddPlaylistToLibrary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddPlaylistToLibrary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddPlaylistToLibrary failed: unknown result")

    def DeleteLibraryPlaylist(self, idLibrary, idPlaylist):
        """
        Delete a Playlist from a Library

        @param idLibrary
            The Library Id which a playlist will be deleted.

        @param idPlaylist
            The Playlist Id which will be deleted

        @return Id
            The Playlist Id of the Playlist deleted.


        Parameters:
         - idLibrary
         - idPlaylist

        """
        self.send_DeleteLibraryPlaylist(idLibrary, idPlaylist)
        return self.recv_DeleteLibraryPlaylist()

    def send_DeleteLibraryPlaylist(self, idLibrary, idPlaylist):
        self._oprot.writeMessageBegin('DeleteLibraryPlaylist', TMessageType.CALL, self._seqid)
        args = DeleteLibraryPlaylist_args()
        args.idLibrary = idLibrary
        args.idPlaylist = idPlaylist
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteLibraryPlaylist(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteLibraryPlaylist_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteLibraryPlaylist failed: unknown result")

    def AddContentCreatorToLibrary(self, idLibrary, newContentCreator):
        """
        Add a ContentCreator to Library.

        @param idLibrary
            The Library Id to which a content creator will be added

        @param newContentCreator

        @return ContentCreator
            ContentCreator object added


        Parameters:
         - idLibrary
         - newContentCreator

        """
        self.send_AddContentCreatorToLibrary(idLibrary, newContentCreator)
        return self.recv_AddContentCreatorToLibrary()

    def send_AddContentCreatorToLibrary(self, idLibrary, newContentCreator):
        self._oprot.writeMessageBegin('AddContentCreatorToLibrary', TMessageType.CALL, self._seqid)
        args = AddContentCreatorToLibrary_args()
        args.idLibrary = idLibrary
        args.newContentCreator = newContentCreator
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddContentCreatorToLibrary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddContentCreatorToLibrary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddContentCreatorToLibrary failed: unknown result")

    def DeleteLibraryContentCreator(self, idLibrary, idContentCreator):
        """
        Delete a Content Creator from a Library

        @param idLibrary
            The Library Id which a content creator will be deleted.

        @param idContentCreator
            The Content Creator Id which will be deleted

        @return Id
            The Content Creator Id of the Content Creator deleted.


        Parameters:
         - idLibrary
         - idContentCreator

        """
        self.send_DeleteLibraryContentCreator(idLibrary, idContentCreator)
        return self.recv_DeleteLibraryContentCreator()

    def send_DeleteLibraryContentCreator(self, idLibrary, idContentCreator):
        self._oprot.writeMessageBegin('DeleteLibraryContentCreator', TMessageType.CALL, self._seqid)
        args = DeleteLibraryContentCreator_args()
        args.idLibrary = idLibrary
        args.idContentCreator = idContentCreator
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeleteLibraryContentCreator(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeleteLibraryContentCreator_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeleteLibraryContentCreator failed: unknown result")

    def getContent(self, query):
        """
        Get Content

        @param query
            The query introduced by user

        @return RelatedResult
            Related result to the query


        Parameters:
         - query

        """
        self.send_getContent(query)
        return self.recv_getContent()

    def send_getContent(self, query):
        self._oprot.writeMessageBegin('getContent', TMessageType.CALL, self._seqid)
        args = getContent_args()
        args.query = query
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getContent(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getContent_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getContent failed: unknown result")

    def UpdatePlaylistTitle(self, idPlaylist, newPlaylistTitle):
        """
         
        Update previously registered Playlist title.

        @param playlistId
            The Playlist Id of the Playlist which require an update title.

        @return Playlist
            Modified Playlist obejct.


        Parameters:
         - idPlaylist
         - newPlaylistTitle

        """
        self.send_UpdatePlaylistTitle(idPlaylist, newPlaylistTitle)
        return self.recv_UpdatePlaylistTitle()

    def send_UpdatePlaylistTitle(self, idPlaylist, newPlaylistTitle):
        self._oprot.writeMessageBegin('UpdatePlaylistTitle', TMessageType.CALL, self._seqid)
        args = UpdatePlaylistTitle_args()
        args.idPlaylist = idPlaylist
        args.newPlaylistTitle = newPlaylistTitle
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdatePlaylistTitle(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdatePlaylistTitle_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdatePlaylistTitle failed: unknown result")

    def UpdatePlaylistCover(self, idPlaylist, newImageStoragePath):
        """
         
        Update previously registered Playlist cover.

        @param playlistId
            The Playlist Id of the Playlist which require an update cover.

        @return Playlist
            Modified Playlist obejct.


        Parameters:
         - idPlaylist
         - newImageStoragePath

        """
        self.send_UpdatePlaylistCover(idPlaylist, newImageStoragePath)
        return self.recv_UpdatePlaylistCover()

    def send_UpdatePlaylistCover(self, idPlaylist, newImageStoragePath):
        self._oprot.writeMessageBegin('UpdatePlaylistCover', TMessageType.CALL, self._seqid)
        args = UpdatePlaylistCover_args()
        args.idPlaylist = idPlaylist
        args.newImageStoragePath = newImageStoragePath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdatePlaylistCover(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdatePlaylistCover_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdatePlaylistCover failed: unknown result")

    def UpdatePlaylistDescription(self, idPlaylist, newDescription):
        """
         
        Update previously registered Playlist description.

        @param playlistId
            The Playlist Id of the Playlist which require an update description.

        @return Playlist
            Modified Playlist obejct.


        Parameters:
         - idPlaylist
         - newDescription

        """
        self.send_UpdatePlaylistDescription(idPlaylist, newDescription)
        return self.recv_UpdatePlaylistDescription()

    def send_UpdatePlaylistDescription(self, idPlaylist, newDescription):
        self._oprot.writeMessageBegin('UpdatePlaylistDescription', TMessageType.CALL, self._seqid)
        args = UpdatePlaylistDescription_args()
        args.idPlaylist = idPlaylist
        args.newDescription = newDescription
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdatePlaylistDescription(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdatePlaylistDescription_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdatePlaylistDescription failed: unknown result")

    def AddTrackToPlaylist(self, idPlaylist, newtrack):
        """
        Add a Track to Playlist.

        @param idPlaylist
            The Playlist Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idPlaylist
         - newtrack

        """
        self.send_AddTrackToPlaylist(idPlaylist, newtrack)
        return self.recv_AddTrackToPlaylist()

    def send_AddTrackToPlaylist(self, idPlaylist, newtrack):
        self._oprot.writeMessageBegin('AddTrackToPlaylist', TMessageType.CALL, self._seqid)
        args = AddTrackToPlaylist_args()
        args.idPlaylist = idPlaylist
        args.newtrack = newtrack
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddTrackToPlaylist(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddTrackToPlaylist_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddTrackToPlaylist failed: unknown result")

    def DeletePlaylistTrack(self, idPlaylist, trackNumber):
        """
        Delete a Track from a Playlist

        @param idPlaylist
            The Playlist Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idPlaylist
         - trackNumber

        """
        self.send_DeletePlaylistTrack(idPlaylist, trackNumber)
        return self.recv_DeletePlaylistTrack()

    def send_DeletePlaylistTrack(self, idPlaylist, trackNumber):
        self._oprot.writeMessageBegin('DeletePlaylistTrack', TMessageType.CALL, self._seqid)
        args = DeletePlaylistTrack_args()
        args.idPlaylist = idPlaylist
        args.trackNumber = trackNumber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeletePlaylistTrack(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeletePlaylistTrack_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeletePlaylistTrack failed: unknown result")

    def AddTrackToPlayQueue(self, idPlayQueu, newTrack):
        """
        Add a Track to PlayQueue.

        @param idPlayQueue
            The PlayQueue Id to which a track will be added

        @param newTrack

        @return Track
            Track object added


        Parameters:
         - idPlayQueu
         - newTrack

        """
        self.send_AddTrackToPlayQueue(idPlayQueu, newTrack)
        return self.recv_AddTrackToPlayQueue()

    def send_AddTrackToPlayQueue(self, idPlayQueu, newTrack):
        self._oprot.writeMessageBegin('AddTrackToPlayQueue', TMessageType.CALL, self._seqid)
        args = AddTrackToPlayQueue_args()
        args.idPlayQueu = idPlayQueu
        args.newTrack = newTrack
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_AddTrackToPlayQueue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = AddTrackToPlayQueue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "AddTrackToPlayQueue failed: unknown result")

    def DeletePlayQueueTrack(self, idPlayQueu, trackNumber):
        """
        Delete a Track from a PlayQueue

        @param idPlayQueue
            The PlayQueue Id which a track will be deleted.

        @param trackNumber
            The Track number which will be deleted

        @return Id
            The Track Id of the Track deleted.


        Parameters:
         - idPlayQueu
         - trackNumber

        """
        self.send_DeletePlayQueueTrack(idPlayQueu, trackNumber)
        return self.recv_DeletePlayQueueTrack()

    def send_DeletePlayQueueTrack(self, idPlayQueu, trackNumber):
        self._oprot.writeMessageBegin('DeletePlayQueueTrack', TMessageType.CALL, self._seqid)
        args = DeletePlayQueueTrack_args()
        args.idPlayQueu = idPlayQueu
        args.trackNumber = trackNumber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_DeletePlayQueueTrack(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = DeletePlayQueueTrack_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorNotFoundE is not None:
            raise result.sErrorNotFoundE
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "DeletePlayQueueTrack failed: unknown result")

    def GenerateRadioStation(self, gender):
        """
        Generate a Radio Station

        @param gender
            The gender which the radio station will be generated.

        @return tracks
            List of tracks which belong to the gender entered.


        Parameters:
         - gender

        """
        self.send_GenerateRadioStation(gender)
        return self.recv_GenerateRadioStation()

    def send_GenerateRadioStation(self, gender):
        self._oprot.writeMessageBegin('GenerateRadioStation', TMessageType.CALL, self._seqid)
        args = GenerateRadioStation_args()
        args.gender = gender
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GenerateRadioStation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GenerateRadioStation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.sErrorSystemE is not None:
            raise result.sErrorSystemE
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GenerateRadioStation failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["GetConsumerById"] = Processor.process_GetConsumerById
        self._processMap["GetContentCreatorById"] = Processor.process_GetContentCreatorById
        self._processMap["AddConsumer"] = Processor.process_AddConsumer
        self._processMap["AddConContentCreator"] = Processor.process_AddConContentCreator
        self._processMap["DeleteConsumer"] = Processor.process_DeleteConsumer
        self._processMap["DeleteContentCreator"] = Processor.process_DeleteContentCreator
        self._processMap["UpdateConsumerName"] = Processor.process_UpdateConsumerName
        self._processMap["UpdateConsumerPassword"] = Processor.process_UpdateConsumerPassword
        self._processMap["UpdateConsumerImage"] = Processor.process_UpdateConsumerImage
        self._processMap["UpdateContentCreatorName"] = Processor.process_UpdateContentCreatorName
        self._processMap["UpdateContentCreatorPassword"] = Processor.process_UpdateContentCreatorPassword
        self._processMap["UpdateContentCreatorImage"] = Processor.process_UpdateContentCreatorImage
        self._processMap["UpdateContentCreatorStageName"] = Processor.process_UpdateContentCreatorStageName
        self._processMap["UpdateContentCreatorDescription"] = Processor.process_UpdateContentCreatorDescription
        self._processMap["isConsumer"] = Processor.process_isConsumer
        self._processMap["LoginConsumer"] = Processor.process_LoginConsumer
        self._processMap["LoginContentCreator"] = Processor.process_LoginContentCreator
        self._processMap["GetAlbumByTitle"] = Processor.process_GetAlbumByTitle
        self._processMap["GetTrackByTitle"] = Processor.process_GetTrackByTitle
        self._processMap["GetPlaylistByTitle"] = Processor.process_GetPlaylistByTitle
        self._processMap["AddAlbum"] = Processor.process_AddAlbum
        self._processMap["DeleteAlbum"] = Processor.process_DeleteAlbum
        self._processMap["UpdateAlbumTitle"] = Processor.process_UpdateAlbumTitle
        self._processMap["UpdateAlbumCover"] = Processor.process_UpdateAlbumCover
        self._processMap["UpdateAlbumFeaturing"] = Processor.process_UpdateAlbumFeaturing
        self._processMap["AddTrackToAlbum"] = Processor.process_AddTrackToAlbum
        self._processMap["DeleteAlbumTrack"] = Processor.process_DeleteAlbumTrack
        self._processMap["UpdateAlbumTrackTitle"] = Processor.process_UpdateAlbumTrackTitle
        self._processMap["UpdateAlbumTrackFeaturing"] = Processor.process_UpdateAlbumTrackFeaturing
        self._processMap["AddTrackToLibrary"] = Processor.process_AddTrackToLibrary
        self._processMap["DeleteLibraryTrack"] = Processor.process_DeleteLibraryTrack
        self._processMap["AddAlbumToLibrary"] = Processor.process_AddAlbumToLibrary
        self._processMap["DeleteLibraryAlbum"] = Processor.process_DeleteLibraryAlbum
        self._processMap["AddPlaylistToLibrary"] = Processor.process_AddPlaylistToLibrary
        self._processMap["DeleteLibraryPlaylist"] = Processor.process_DeleteLibraryPlaylist
        self._processMap["AddContentCreatorToLibrary"] = Processor.process_AddContentCreatorToLibrary
        self._processMap["DeleteLibraryContentCreator"] = Processor.process_DeleteLibraryContentCreator
        self._processMap["getContent"] = Processor.process_getContent
        self._processMap["UpdatePlaylistTitle"] = Processor.process_UpdatePlaylistTitle
        self._processMap["UpdatePlaylistCover"] = Processor.process_UpdatePlaylistCover
        self._processMap["UpdatePlaylistDescription"] = Processor.process_UpdatePlaylistDescription
        self._processMap["AddTrackToPlaylist"] = Processor.process_AddTrackToPlaylist
        self._processMap["DeletePlaylistTrack"] = Processor.process_DeletePlaylistTrack
        self._processMap["AddTrackToPlayQueue"] = Processor.process_AddTrackToPlayQueue
        self._processMap["DeletePlayQueueTrack"] = Processor.process_DeletePlayQueueTrack
        self._processMap["GenerateRadioStation"] = Processor.process_GenerateRadioStation
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_GetConsumerById(self, seqid, iprot, oprot):
        args = GetConsumerById_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetConsumerById_result()
        try:
            result.success = self._handler.GetConsumerById(args.idConsumer)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetConsumerById", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetContentCreatorById(self, seqid, iprot, oprot):
        args = GetContentCreatorById_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetContentCreatorById_result()
        try:
            result.success = self._handler.GetContentCreatorById(args.idContentCreator)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetContentCreatorById", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddConsumer(self, seqid, iprot, oprot):
        args = AddConsumer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddConsumer_result()
        try:
            result.success = self._handler.AddConsumer(args.newConsumer)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddConsumer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddConContentCreator(self, seqid, iprot, oprot):
        args = AddConContentCreator_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddConContentCreator_result()
        try:
            result.success = self._handler.AddConContentCreator(args.newContentCreator)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddConContentCreator", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteConsumer(self, seqid, iprot, oprot):
        args = DeleteConsumer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteConsumer_result()
        try:
            result.success = self._handler.DeleteConsumer(args.email)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteConsumer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteContentCreator(self, seqid, iprot, oprot):
        args = DeleteContentCreator_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteContentCreator_result()
        try:
            result.success = self._handler.DeleteContentCreator(args.email)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteContentCreator", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateConsumerName(self, seqid, iprot, oprot):
        args = UpdateConsumerName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateConsumerName_result()
        try:
            result.success = self._handler.UpdateConsumerName(args.email, args.currentPassword, args.newName, args.newLastName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateConsumerName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateConsumerPassword(self, seqid, iprot, oprot):
        args = UpdateConsumerPassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateConsumerPassword_result()
        try:
            result.success = self._handler.UpdateConsumerPassword(args.email, args.currentPassword, args.newPassword)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateConsumerPassword", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateConsumerImage(self, seqid, iprot, oprot):
        args = UpdateConsumerImage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateConsumerImage_result()
        try:
            result.success = self._handler.UpdateConsumerImage(args.email, args.newImageStoragePath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateConsumerImage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateContentCreatorName(self, seqid, iprot, oprot):
        args = UpdateContentCreatorName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateContentCreatorName_result()
        try:
            result.success = self._handler.UpdateContentCreatorName(args.email, args.currentPassword, args.newName, args.newLastName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateContentCreatorName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateContentCreatorPassword(self, seqid, iprot, oprot):
        args = UpdateContentCreatorPassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateContentCreatorPassword_result()
        try:
            result.success = self._handler.UpdateContentCreatorPassword(args.email, args.currentPassword, args.newPassword)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateContentCreatorPassword", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateContentCreatorImage(self, seqid, iprot, oprot):
        args = UpdateContentCreatorImage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateContentCreatorImage_result()
        try:
            result.success = self._handler.UpdateContentCreatorImage(args.email, args.newImageStoragePath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateContentCreatorImage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateContentCreatorStageName(self, seqid, iprot, oprot):
        args = UpdateContentCreatorStageName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateContentCreatorStageName_result()
        try:
            result.success = self._handler.UpdateContentCreatorStageName(args.email, args.currentPassword, args.newStageName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateContentCreatorStageName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateContentCreatorDescription(self, seqid, iprot, oprot):
        args = UpdateContentCreatorDescription_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateContentCreatorDescription_result()
        try:
            result.success = self._handler.UpdateContentCreatorDescription(args.email, args.currentPassword, args.newDescription)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateContentCreatorDescription", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_isConsumer(self, seqid, iprot, oprot):
        args = isConsumer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = isConsumer_result()
        try:
            result.success = self._handler.isConsumer(args.email)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("isConsumer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_LoginConsumer(self, seqid, iprot, oprot):
        args = LoginConsumer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = LoginConsumer_result()
        try:
            result.success = self._handler.LoginConsumer(args.email, args.password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("LoginConsumer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_LoginContentCreator(self, seqid, iprot, oprot):
        args = LoginContentCreator_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = LoginContentCreator_result()
        try:
            result.success = self._handler.LoginContentCreator(args.email, args.password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorUserException as sErrorUserE:
            msg_type = TMessageType.REPLY
            result.sErrorUserE = sErrorUserE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("LoginContentCreator", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetAlbumByTitle(self, seqid, iprot, oprot):
        args = GetAlbumByTitle_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetAlbumByTitle_result()
        try:
            result.success = self._handler.GetAlbumByTitle(args.title)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetAlbumByTitle", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetTrackByTitle(self, seqid, iprot, oprot):
        args = GetTrackByTitle_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetTrackByTitle_result()
        try:
            result.success = self._handler.GetTrackByTitle(args.title)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetTrackByTitle", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetPlaylistByTitle(self, seqid, iprot, oprot):
        args = GetPlaylistByTitle_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetPlaylistByTitle_result()
        try:
            result.success = self._handler.GetPlaylistByTitle(args.title)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystem:
            msg_type = TMessageType.REPLY
            result.sErrorSystem = sErrorSystem
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetPlaylistByTitle", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddAlbum(self, seqid, iprot, oprot):
        args = AddAlbum_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddAlbum_result()
        try:
            result.success = self._handler.AddAlbum(args.newAlbum)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddAlbum", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteAlbum(self, seqid, iprot, oprot):
        args = DeleteAlbum_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteAlbum_result()
        try:
            result.success = self._handler.DeleteAlbum(args.idAlbum)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteAlbum", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateAlbumTitle(self, seqid, iprot, oprot):
        args = UpdateAlbumTitle_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateAlbumTitle_result()
        try:
            result.success = self._handler.UpdateAlbumTitle(args.idAlbum, args.newAlbumTitle)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateAlbumTitle", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateAlbumCover(self, seqid, iprot, oprot):
        args = UpdateAlbumCover_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateAlbumCover_result()
        try:
            result.success = self._handler.UpdateAlbumCover(args.idAlbum, args.newImageStoragePath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateAlbumCover", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateAlbumFeaturing(self, seqid, iprot, oprot):
        args = UpdateAlbumFeaturing_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateAlbumFeaturing_result()
        try:
            result.success = self._handler.UpdateAlbumFeaturing(args.idAlbum, args.newFeaturing)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateAlbumFeaturing", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddTrackToAlbum(self, seqid, iprot, oprot):
        args = AddTrackToAlbum_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddTrackToAlbum_result()
        try:
            result.success = self._handler.AddTrackToAlbum(args.idAlbum, args.newTrack)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddTrackToAlbum", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteAlbumTrack(self, seqid, iprot, oprot):
        args = DeleteAlbumTrack_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteAlbumTrack_result()
        try:
            result.success = self._handler.DeleteAlbumTrack(args.idAlbum, args.trackNumber)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteAlbumTrack", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateAlbumTrackTitle(self, seqid, iprot, oprot):
        args = UpdateAlbumTrackTitle_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateAlbumTrackTitle_result()
        try:
            result.success = self._handler.UpdateAlbumTrackTitle(args.idAlbum, args.trackNumber, args.newAlbumTrackTitle)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateAlbumTrackTitle", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateAlbumTrackFeaturing(self, seqid, iprot, oprot):
        args = UpdateAlbumTrackFeaturing_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateAlbumTrackFeaturing_result()
        try:
            result.success = self._handler.UpdateAlbumTrackFeaturing(args.idAlbum, args.trackNumber, args.newFeaturing)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except SpotifakeManagement.ttypes.SErrorInvalidRequestException as sErrorInvalidRequestE:
            msg_type = TMessageType.REPLY
            result.sErrorInvalidRequestE = sErrorInvalidRequestE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateAlbumTrackFeaturing", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddTrackToLibrary(self, seqid, iprot, oprot):
        args = AddTrackToLibrary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddTrackToLibrary_result()
        try:
            result.success = self._handler.AddTrackToLibrary(args.idLibrary, args.newTrack)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddTrackToLibrary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteLibraryTrack(self, seqid, iprot, oprot):
        args = DeleteLibraryTrack_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteLibraryTrack_result()
        try:
            result.success = self._handler.DeleteLibraryTrack(args.idLibrary, args.trackNumber)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteLibraryTrack", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddAlbumToLibrary(self, seqid, iprot, oprot):
        args = AddAlbumToLibrary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddAlbumToLibrary_result()
        try:
            result.success = self._handler.AddAlbumToLibrary(args.idLibrary, args.newAlbum)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddAlbumToLibrary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteLibraryAlbum(self, seqid, iprot, oprot):
        args = DeleteLibraryAlbum_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteLibraryAlbum_result()
        try:
            result.success = self._handler.DeleteLibraryAlbum(args.idLibrary, args.idAlbum)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteLibraryAlbum", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddPlaylistToLibrary(self, seqid, iprot, oprot):
        args = AddPlaylistToLibrary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddPlaylistToLibrary_result()
        try:
            result.success = self._handler.AddPlaylistToLibrary(args.idLibrary, args.newPlaylist)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddPlaylistToLibrary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteLibraryPlaylist(self, seqid, iprot, oprot):
        args = DeleteLibraryPlaylist_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteLibraryPlaylist_result()
        try:
            result.success = self._handler.DeleteLibraryPlaylist(args.idLibrary, args.idPlaylist)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteLibraryPlaylist", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddContentCreatorToLibrary(self, seqid, iprot, oprot):
        args = AddContentCreatorToLibrary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddContentCreatorToLibrary_result()
        try:
            result.success = self._handler.AddContentCreatorToLibrary(args.idLibrary, args.newContentCreator)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddContentCreatorToLibrary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeleteLibraryContentCreator(self, seqid, iprot, oprot):
        args = DeleteLibraryContentCreator_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeleteLibraryContentCreator_result()
        try:
            result.success = self._handler.DeleteLibraryContentCreator(args.idLibrary, args.idContentCreator)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeleteLibraryContentCreator", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getContent(self, seqid, iprot, oprot):
        args = getContent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getContent_result()
        try:
            result.success = self._handler.getContent(args.query)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getContent", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdatePlaylistTitle(self, seqid, iprot, oprot):
        args = UpdatePlaylistTitle_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdatePlaylistTitle_result()
        try:
            result.success = self._handler.UpdatePlaylistTitle(args.idPlaylist, args.newPlaylistTitle)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdatePlaylistTitle", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdatePlaylistCover(self, seqid, iprot, oprot):
        args = UpdatePlaylistCover_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdatePlaylistCover_result()
        try:
            result.success = self._handler.UpdatePlaylistCover(args.idPlaylist, args.newImageStoragePath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdatePlaylistCover", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdatePlaylistDescription(self, seqid, iprot, oprot):
        args = UpdatePlaylistDescription_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdatePlaylistDescription_result()
        try:
            result.success = self._handler.UpdatePlaylistDescription(args.idPlaylist, args.newDescription)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdatePlaylistDescription", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddTrackToPlaylist(self, seqid, iprot, oprot):
        args = AddTrackToPlaylist_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddTrackToPlaylist_result()
        try:
            result.success = self._handler.AddTrackToPlaylist(args.idPlaylist, args.newtrack)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddTrackToPlaylist", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeletePlaylistTrack(self, seqid, iprot, oprot):
        args = DeletePlaylistTrack_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeletePlaylistTrack_result()
        try:
            result.success = self._handler.DeletePlaylistTrack(args.idPlaylist, args.trackNumber)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeletePlaylistTrack", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_AddTrackToPlayQueue(self, seqid, iprot, oprot):
        args = AddTrackToPlayQueue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = AddTrackToPlayQueue_result()
        try:
            result.success = self._handler.AddTrackToPlayQueue(args.idPlayQueu, args.newTrack)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("AddTrackToPlayQueue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_DeletePlayQueueTrack(self, seqid, iprot, oprot):
        args = DeletePlayQueueTrack_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = DeletePlayQueueTrack_result()
        try:
            result.success = self._handler.DeletePlayQueueTrack(args.idPlayQueu, args.trackNumber)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorNotFoundException as sErrorNotFoundE:
            msg_type = TMessageType.REPLY
            result.sErrorNotFoundE = sErrorNotFoundE
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("DeletePlayQueueTrack", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GenerateRadioStation(self, seqid, iprot, oprot):
        args = GenerateRadioStation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GenerateRadioStation_result()
        try:
            result.success = self._handler.GenerateRadioStation(args.gender)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SpotifakeManagement.ttypes.SErrorSystemException as sErrorSystemE:
            msg_type = TMessageType.REPLY
            result.sErrorSystemE = sErrorSystemE
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GenerateRadioStation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class GetConsumerById_args(object):
    """
    Attributes:
     - idConsumer

    """


    def __init__(self, idConsumer=None,):
        self.idConsumer = idConsumer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idConsumer = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetConsumerById_args')
        if self.idConsumer is not None:
            oprot.writeFieldBegin('idConsumer', TType.I16, 1)
            oprot.writeI16(self.idConsumer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetConsumerById_args)
GetConsumerById_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idConsumer', None, None, ),  # 1
)


class GetConsumerById_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Consumer()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetConsumerById_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetConsumerById_result)
GetConsumerById_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class GetContentCreatorById_args(object):
    """
    Attributes:
     - idContentCreator

    """


    def __init__(self, idContentCreator=None,):
        self.idContentCreator = idContentCreator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idContentCreator = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorById_args')
        if self.idContentCreator is not None:
            oprot.writeFieldBegin('idContentCreator', TType.I16, 1)
            oprot.writeI16(self.idContentCreator)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorById_args)
GetContentCreatorById_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idContentCreator', None, None, ),  # 1
)


class GetContentCreatorById_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetContentCreatorById_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetContentCreatorById_result)
GetContentCreatorById_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class AddConsumer_args(object):
    """
    Attributes:
     - newConsumer

    """


    def __init__(self, newConsumer=None,):
        self.newConsumer = newConsumer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.newConsumer = SpotifakeManagement.ttypes.Consumer()
                    self.newConsumer.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddConsumer_args')
        if self.newConsumer is not None:
            oprot.writeFieldBegin('newConsumer', TType.STRUCT, 1)
            self.newConsumer.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddConsumer_args)
AddConsumer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'newConsumer', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 1
)


class AddConsumer_result(object):
    """
    Attributes:
     - success
     - sErrorUserE

    """


    def __init__(self, success=None, sErrorUserE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Consumer()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddConsumer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddConsumer_result)
AddConsumer_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
)


class AddConContentCreator_args(object):
    """
    Attributes:
     - newContentCreator

    """


    def __init__(self, newContentCreator=None,):
        self.newContentCreator = newContentCreator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.newContentCreator = SpotifakeManagement.ttypes.ContentCreator()
                    self.newContentCreator.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddConContentCreator_args')
        if self.newContentCreator is not None:
            oprot.writeFieldBegin('newContentCreator', TType.STRUCT, 1)
            self.newContentCreator.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddConContentCreator_args)
AddConContentCreator_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'newContentCreator', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 1
)


class AddConContentCreator_result(object):
    """
    Attributes:
     - success
     - sErrorUserE

    """


    def __init__(self, success=None, sErrorUserE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddConContentCreator_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddConContentCreator_result)
AddConContentCreator_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
)


class DeleteConsumer_args(object):
    """
    Attributes:
     - email

    """


    def __init__(self, email=None,):
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteConsumer_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteConsumer_args)
DeleteConsumer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
)


class DeleteConsumer_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteConsumer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteConsumer_result)
DeleteConsumer_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class DeleteContentCreator_args(object):
    """
    Attributes:
     - email

    """


    def __init__(self, email=None,):
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteContentCreator_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteContentCreator_args)
DeleteContentCreator_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
)


class DeleteContentCreator_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteContentCreator_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteContentCreator_result)
DeleteContentCreator_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class UpdateConsumerName_args(object):
    """
    Attributes:
     - email
     - currentPassword
     - newName
     - newLastName

    """


    def __init__(self, email=None, currentPassword=None, newName=None, newLastName=None,):
        self.email = email
        self.currentPassword = currentPassword
        self.newName = newName
        self.newLastName = newLastName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currentPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.newLastName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateConsumerName_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.currentPassword is not None:
            oprot.writeFieldBegin('currentPassword', TType.STRING, 2)
            oprot.writeString(self.currentPassword.encode('utf-8') if sys.version_info[0] == 2 else self.currentPassword)
            oprot.writeFieldEnd()
        if self.newName is not None:
            oprot.writeFieldBegin('newName', TType.STRING, 3)
            oprot.writeString(self.newName.encode('utf-8') if sys.version_info[0] == 2 else self.newName)
            oprot.writeFieldEnd()
        if self.newLastName is not None:
            oprot.writeFieldBegin('newLastName', TType.STRING, 4)
            oprot.writeString(self.newLastName.encode('utf-8') if sys.version_info[0] == 2 else self.newLastName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateConsumerName_args)
UpdateConsumerName_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'currentPassword', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'newLastName', 'UTF8', None, ),  # 4
)


class UpdateConsumerName_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Consumer()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateConsumerName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateConsumerName_result)
UpdateConsumerName_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateConsumerPassword_args(object):
    """
    Attributes:
     - email
     - currentPassword
     - newPassword

    """


    def __init__(self, email=None, currentPassword=None, newPassword=None,):
        self.email = email
        self.currentPassword = currentPassword
        self.newPassword = newPassword

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currentPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateConsumerPassword_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.currentPassword is not None:
            oprot.writeFieldBegin('currentPassword', TType.STRING, 2)
            oprot.writeString(self.currentPassword.encode('utf-8') if sys.version_info[0] == 2 else self.currentPassword)
            oprot.writeFieldEnd()
        if self.newPassword is not None:
            oprot.writeFieldBegin('newPassword', TType.STRING, 3)
            oprot.writeString(self.newPassword.encode('utf-8') if sys.version_info[0] == 2 else self.newPassword)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateConsumerPassword_args)
UpdateConsumerPassword_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'currentPassword', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newPassword', 'UTF8', None, ),  # 3
)


class UpdateConsumerPassword_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Consumer()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateConsumerPassword_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateConsumerPassword_result)
UpdateConsumerPassword_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateConsumerImage_args(object):
    """
    Attributes:
     - email
     - newImageStoragePath

    """


    def __init__(self, email=None, newImageStoragePath=None,):
        self.email = email
        self.newImageStoragePath = newImageStoragePath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newImageStoragePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateConsumerImage_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.newImageStoragePath is not None:
            oprot.writeFieldBegin('newImageStoragePath', TType.STRING, 2)
            oprot.writeString(self.newImageStoragePath.encode('utf-8') if sys.version_info[0] == 2 else self.newImageStoragePath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateConsumerImage_args)
UpdateConsumerImage_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'newImageStoragePath', 'UTF8', None, ),  # 2
)


class UpdateConsumerImage_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Consumer()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateConsumerImage_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateConsumerImage_result)
UpdateConsumerImage_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateContentCreatorName_args(object):
    """
    Attributes:
     - email
     - currentPassword
     - newName
     - newLastName

    """


    def __init__(self, email=None, currentPassword=None, newName=None, newLastName=None,):
        self.email = email
        self.currentPassword = currentPassword
        self.newName = newName
        self.newLastName = newLastName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currentPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.newLastName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorName_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.currentPassword is not None:
            oprot.writeFieldBegin('currentPassword', TType.STRING, 2)
            oprot.writeString(self.currentPassword.encode('utf-8') if sys.version_info[0] == 2 else self.currentPassword)
            oprot.writeFieldEnd()
        if self.newName is not None:
            oprot.writeFieldBegin('newName', TType.STRING, 3)
            oprot.writeString(self.newName.encode('utf-8') if sys.version_info[0] == 2 else self.newName)
            oprot.writeFieldEnd()
        if self.newLastName is not None:
            oprot.writeFieldBegin('newLastName', TType.STRING, 4)
            oprot.writeString(self.newLastName.encode('utf-8') if sys.version_info[0] == 2 else self.newLastName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorName_args)
UpdateContentCreatorName_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'currentPassword', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'newLastName', 'UTF8', None, ),  # 4
)


class UpdateContentCreatorName_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorName_result)
UpdateContentCreatorName_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateContentCreatorPassword_args(object):
    """
    Attributes:
     - email
     - currentPassword
     - newPassword

    """


    def __init__(self, email=None, currentPassword=None, newPassword=None,):
        self.email = email
        self.currentPassword = currentPassword
        self.newPassword = newPassword

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currentPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorPassword_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.currentPassword is not None:
            oprot.writeFieldBegin('currentPassword', TType.STRING, 2)
            oprot.writeString(self.currentPassword.encode('utf-8') if sys.version_info[0] == 2 else self.currentPassword)
            oprot.writeFieldEnd()
        if self.newPassword is not None:
            oprot.writeFieldBegin('newPassword', TType.STRING, 3)
            oprot.writeString(self.newPassword.encode('utf-8') if sys.version_info[0] == 2 else self.newPassword)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorPassword_args)
UpdateContentCreatorPassword_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'currentPassword', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newPassword', 'UTF8', None, ),  # 3
)


class UpdateContentCreatorPassword_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorPassword_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorPassword_result)
UpdateContentCreatorPassword_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateContentCreatorImage_args(object):
    """
    Attributes:
     - email
     - newImageStoragePath

    """


    def __init__(self, email=None, newImageStoragePath=None,):
        self.email = email
        self.newImageStoragePath = newImageStoragePath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newImageStoragePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorImage_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.newImageStoragePath is not None:
            oprot.writeFieldBegin('newImageStoragePath', TType.STRING, 2)
            oprot.writeString(self.newImageStoragePath.encode('utf-8') if sys.version_info[0] == 2 else self.newImageStoragePath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorImage_args)
UpdateContentCreatorImage_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'newImageStoragePath', 'UTF8', None, ),  # 2
)


class UpdateContentCreatorImage_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorImage_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorImage_result)
UpdateContentCreatorImage_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateContentCreatorStageName_args(object):
    """
    Attributes:
     - email
     - currentPassword
     - newStageName

    """


    def __init__(self, email=None, currentPassword=None, newStageName=None,):
        self.email = email
        self.currentPassword = currentPassword
        self.newStageName = newStageName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currentPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newStageName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorStageName_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.currentPassword is not None:
            oprot.writeFieldBegin('currentPassword', TType.STRING, 2)
            oprot.writeString(self.currentPassword.encode('utf-8') if sys.version_info[0] == 2 else self.currentPassword)
            oprot.writeFieldEnd()
        if self.newStageName is not None:
            oprot.writeFieldBegin('newStageName', TType.STRING, 3)
            oprot.writeString(self.newStageName.encode('utf-8') if sys.version_info[0] == 2 else self.newStageName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorStageName_args)
UpdateContentCreatorStageName_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'currentPassword', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newStageName', 'UTF8', None, ),  # 3
)


class UpdateContentCreatorStageName_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorStageName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorStageName_result)
UpdateContentCreatorStageName_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class UpdateContentCreatorDescription_args(object):
    """
    Attributes:
     - email
     - currentPassword
     - newDescription

    """


    def __init__(self, email=None, currentPassword=None, newDescription=None,):
        self.email = email
        self.currentPassword = currentPassword
        self.newDescription = newDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currentPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorDescription_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.currentPassword is not None:
            oprot.writeFieldBegin('currentPassword', TType.STRING, 2)
            oprot.writeString(self.currentPassword.encode('utf-8') if sys.version_info[0] == 2 else self.currentPassword)
            oprot.writeFieldEnd()
        if self.newDescription is not None:
            oprot.writeFieldBegin('newDescription', TType.STRING, 3)
            oprot.writeString(self.newDescription.encode('utf-8') if sys.version_info[0] == 2 else self.newDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorDescription_args)
UpdateContentCreatorDescription_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'currentPassword', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newDescription', 'UTF8', None, ),  # 3
)


class UpdateContentCreatorDescription_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateContentCreatorDescription_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 2)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 3)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 4)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateContentCreatorDescription_result)
UpdateContentCreatorDescription_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 3
    (4, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 4
)


class isConsumer_args(object):
    """
    Attributes:
     - email

    """


    def __init__(self, email=None,):
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('isConsumer_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(isConsumer_args)
isConsumer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
)


class isConsumer_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('isConsumer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(isConsumer_result)
isConsumer_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class LoginConsumer_args(object):
    """
    Attributes:
     - email
     - password

    """


    def __init__(self, email=None, password=None,):
        self.email = email
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginConsumer_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LoginConsumer_args)
LoginConsumer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)


class LoginConsumer_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Consumer()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginConsumer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LoginConsumer_result)
LoginConsumer_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Consumer, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class LoginContentCreator_args(object):
    """
    Attributes:
     - email
     - password

    """


    def __init__(self, email=None, password=None,):
        self.email = email
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginContentCreator_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LoginContentCreator_args)
LoginContentCreator_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)


class LoginContentCreator_result(object):
    """
    Attributes:
     - success
     - sErrorUserE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorUserE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorUserE = sErrorUserE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorUserE = SpotifakeManagement.ttypes.SErrorUserException()
                    self.sErrorUserE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginContentCreator_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorUserE is not None:
            oprot.writeFieldBegin('sErrorUserE', TType.STRUCT, 1)
            self.sErrorUserE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LoginContentCreator_result)
LoginContentCreator_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorUserE', [SpotifakeManagement.ttypes.SErrorUserException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class GetAlbumByTitle_args(object):
    """
    Attributes:
     - title

    """


    def __init__(self, title=None,):
        self.title = title

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAlbumByTitle_args')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetAlbumByTitle_args)
GetAlbumByTitle_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
)


class GetAlbumByTitle_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Album()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAlbumByTitle_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetAlbumByTitle_result)
GetAlbumByTitle_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Album, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class GetTrackByTitle_args(object):
    """
    Attributes:
     - title

    """


    def __init__(self, title=None,):
        self.title = title

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByTitle_args')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByTitle_args)
GetTrackByTitle_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
)


class GetTrackByTitle_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTrackByTitle_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetTrackByTitle_result)
GetTrackByTitle_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class GetPlaylistByTitle_args(object):
    """
    Attributes:
     - title

    """


    def __init__(self, title=None,):
        self.title = title

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetPlaylistByTitle_args')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetPlaylistByTitle_args)
GetPlaylistByTitle_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
)


class GetPlaylistByTitle_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystem
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystem=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystem = sErrorSystem
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Playlist()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystem = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetPlaylistByTitle_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystem is not None:
            oprot.writeFieldBegin('sErrorSystem', TType.STRUCT, 2)
            self.sErrorSystem.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetPlaylistByTitle_result)
GetPlaylistByTitle_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Playlist, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystem', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class AddAlbum_args(object):
    """
    Attributes:
     - newAlbum

    """


    def __init__(self, newAlbum=None,):
        self.newAlbum = newAlbum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.newAlbum = SpotifakeManagement.ttypes.Album()
                    self.newAlbum.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddAlbum_args')
        if self.newAlbum is not None:
            oprot.writeFieldBegin('newAlbum', TType.STRUCT, 1)
            self.newAlbum.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddAlbum_args)
AddAlbum_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'newAlbum', [SpotifakeManagement.ttypes.Album, None], None, ),  # 1
)


class AddAlbum_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Album()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddAlbum_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddAlbum_result)
AddAlbum_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Album, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteAlbum_args(object):
    """
    Attributes:
     - idAlbum

    """


    def __init__(self, idAlbum=None,):
        self.idAlbum = idAlbum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteAlbum_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteAlbum_args)
DeleteAlbum_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
)


class DeleteAlbum_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteAlbum_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteAlbum_result)
DeleteAlbum_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class UpdateAlbumTitle_args(object):
    """
    Attributes:
     - idAlbum
     - newAlbumTitle

    """


    def __init__(self, idAlbum=None, newAlbumTitle=None,):
        self.idAlbum = idAlbum
        self.newAlbumTitle = newAlbumTitle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newAlbumTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumTitle_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.newAlbumTitle is not None:
            oprot.writeFieldBegin('newAlbumTitle', TType.STRING, 2)
            oprot.writeString(self.newAlbumTitle.encode('utf-8') if sys.version_info[0] == 2 else self.newAlbumTitle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumTitle_args)
UpdateAlbumTitle_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.STRING, 'newAlbumTitle', 'UTF8', None, ),  # 2
)


class UpdateAlbumTitle_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Album()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumTitle_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumTitle_result)
UpdateAlbumTitle_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Album, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class UpdateAlbumCover_args(object):
    """
    Attributes:
     - idAlbum
     - newImageStoragePath

    """


    def __init__(self, idAlbum=None, newImageStoragePath=None,):
        self.idAlbum = idAlbum
        self.newImageStoragePath = newImageStoragePath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newImageStoragePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumCover_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.newImageStoragePath is not None:
            oprot.writeFieldBegin('newImageStoragePath', TType.STRING, 2)
            oprot.writeString(self.newImageStoragePath.encode('utf-8') if sys.version_info[0] == 2 else self.newImageStoragePath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumCover_args)
UpdateAlbumCover_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.STRING, 'newImageStoragePath', 'UTF8', None, ),  # 2
)


class UpdateAlbumCover_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Album()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumCover_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumCover_result)
UpdateAlbumCover_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Album, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class UpdateAlbumFeaturing_args(object):
    """
    Attributes:
     - idAlbum
     - newFeaturing

    """


    def __init__(self, idAlbum=None, newFeaturing=None,):
        self.idAlbum = idAlbum
        self.newFeaturing = newFeaturing

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newFeaturing = SpotifakeManagement.ttypes.Interpreter()
                    self.newFeaturing.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumFeaturing_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.newFeaturing is not None:
            oprot.writeFieldBegin('newFeaturing', TType.STRUCT, 2)
            self.newFeaturing.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumFeaturing_args)
UpdateAlbumFeaturing_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.STRUCT, 'newFeaturing', [SpotifakeManagement.ttypes.Interpreter, None], None, ),  # 2
)


class UpdateAlbumFeaturing_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Album()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumFeaturing_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumFeaturing_result)
UpdateAlbumFeaturing_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Album, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class AddTrackToAlbum_args(object):
    """
    Attributes:
     - idAlbum
     - newTrack

    """


    def __init__(self, idAlbum=None, newTrack=None,):
        self.idAlbum = idAlbum
        self.newTrack = newTrack

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newTrack = SpotifakeManagement.ttypes.Track()
                    self.newTrack.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToAlbum_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.newTrack is not None:
            oprot.writeFieldBegin('newTrack', TType.STRUCT, 2)
            self.newTrack.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToAlbum_args)
AddTrackToAlbum_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.STRUCT, 'newTrack', [SpotifakeManagement.ttypes.Track, None], None, ),  # 2
)


class AddTrackToAlbum_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToAlbum_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToAlbum_result)
AddTrackToAlbum_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteAlbumTrack_args(object):
    """
    Attributes:
     - idAlbum
     - trackNumber

    """


    def __init__(self, idAlbum=None, trackNumber=None,):
        self.idAlbum = idAlbum
        self.trackNumber = trackNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteAlbumTrack_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteAlbumTrack_args)
DeleteAlbumTrack_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
)


class DeleteAlbumTrack_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteAlbumTrack_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteAlbumTrack_result)
DeleteAlbumTrack_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class UpdateAlbumTrackTitle_args(object):
    """
    Attributes:
     - idAlbum
     - trackNumber
     - newAlbumTrackTitle

    """


    def __init__(self, idAlbum=None, trackNumber=None, newAlbumTrackTitle=None,):
        self.idAlbum = idAlbum
        self.trackNumber = trackNumber
        self.newAlbumTrackTitle = newAlbumTrackTitle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newAlbumTrackTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumTrackTitle_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        if self.newAlbumTrackTitle is not None:
            oprot.writeFieldBegin('newAlbumTrackTitle', TType.STRING, 3)
            oprot.writeString(self.newAlbumTrackTitle.encode('utf-8') if sys.version_info[0] == 2 else self.newAlbumTrackTitle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumTrackTitle_args)
UpdateAlbumTrackTitle_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
    (3, TType.STRING, 'newAlbumTrackTitle', 'UTF8', None, ),  # 3
)


class UpdateAlbumTrackTitle_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumTrackTitle_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumTrackTitle_result)
UpdateAlbumTrackTitle_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class UpdateAlbumTrackFeaturing_args(object):
    """
    Attributes:
     - idAlbum
     - trackNumber
     - newFeaturing

    """


    def __init__(self, idAlbum=None, trackNumber=None, newFeaturing=None,):
        self.idAlbum = idAlbum
        self.trackNumber = trackNumber
        self.newFeaturing = newFeaturing

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.newFeaturing = SpotifakeManagement.ttypes.Interpreter()
                    self.newFeaturing.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumTrackFeaturing_args')
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 1)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        if self.newFeaturing is not None:
            oprot.writeFieldBegin('newFeaturing', TType.STRUCT, 3)
            self.newFeaturing.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumTrackFeaturing_args)
UpdateAlbumTrackFeaturing_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idAlbum', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
    (3, TType.STRUCT, 'newFeaturing', [SpotifakeManagement.ttypes.Interpreter, None], None, ),  # 3
)


class UpdateAlbumTrackFeaturing_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE
     - sErrorInvalidRequestE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None, sErrorInvalidRequestE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE
        self.sErrorInvalidRequestE = sErrorInvalidRequestE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sErrorInvalidRequestE = SpotifakeManagement.ttypes.SErrorInvalidRequestException()
                    self.sErrorInvalidRequestE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateAlbumTrackFeaturing_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorInvalidRequestE is not None:
            oprot.writeFieldBegin('sErrorInvalidRequestE', TType.STRUCT, 3)
            self.sErrorInvalidRequestE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdateAlbumTrackFeaturing_result)
UpdateAlbumTrackFeaturing_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
    (3, TType.STRUCT, 'sErrorInvalidRequestE', [SpotifakeManagement.ttypes.SErrorInvalidRequestException, None], None, ),  # 3
)


class AddTrackToLibrary_args(object):
    """
    Attributes:
     - idLibrary
     - newTrack

    """


    def __init__(self, idLibrary=None, newTrack=None,):
        self.idLibrary = idLibrary
        self.newTrack = newTrack

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newTrack = SpotifakeManagement.ttypes.Track()
                    self.newTrack.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToLibrary_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.newTrack is not None:
            oprot.writeFieldBegin('newTrack', TType.STRUCT, 2)
            self.newTrack.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToLibrary_args)
AddTrackToLibrary_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.STRUCT, 'newTrack', [SpotifakeManagement.ttypes.Track, None], None, ),  # 2
)


class AddTrackToLibrary_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToLibrary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToLibrary_result)
AddTrackToLibrary_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteLibraryTrack_args(object):
    """
    Attributes:
     - idLibrary
     - trackNumber

    """


    def __init__(self, idLibrary=None, trackNumber=None,):
        self.idLibrary = idLibrary
        self.trackNumber = trackNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryTrack_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryTrack_args)
DeleteLibraryTrack_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
)


class DeleteLibraryTrack_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryTrack_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryTrack_result)
DeleteLibraryTrack_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddAlbumToLibrary_args(object):
    """
    Attributes:
     - idLibrary
     - newAlbum

    """


    def __init__(self, idLibrary=None, newAlbum=None,):
        self.idLibrary = idLibrary
        self.newAlbum = newAlbum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newAlbum = SpotifakeManagement.ttypes.Album()
                    self.newAlbum.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddAlbumToLibrary_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.newAlbum is not None:
            oprot.writeFieldBegin('newAlbum', TType.STRUCT, 2)
            self.newAlbum.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddAlbumToLibrary_args)
AddAlbumToLibrary_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.STRUCT, 'newAlbum', [SpotifakeManagement.ttypes.Album, None], None, ),  # 2
)


class AddAlbumToLibrary_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Album()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddAlbumToLibrary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddAlbumToLibrary_result)
AddAlbumToLibrary_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Album, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteLibraryAlbum_args(object):
    """
    Attributes:
     - idLibrary
     - idAlbum

    """


    def __init__(self, idLibrary=None, idAlbum=None,):
        self.idLibrary = idLibrary
        self.idAlbum = idAlbum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.idAlbum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryAlbum_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.idAlbum is not None:
            oprot.writeFieldBegin('idAlbum', TType.I16, 2)
            oprot.writeI16(self.idAlbum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryAlbum_args)
DeleteLibraryAlbum_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.I16, 'idAlbum', None, None, ),  # 2
)


class DeleteLibraryAlbum_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryAlbum_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryAlbum_result)
DeleteLibraryAlbum_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddPlaylistToLibrary_args(object):
    """
    Attributes:
     - idLibrary
     - newPlaylist

    """


    def __init__(self, idLibrary=None, newPlaylist=None,):
        self.idLibrary = idLibrary
        self.newPlaylist = newPlaylist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newPlaylist = SpotifakeManagement.ttypes.Playlist()
                    self.newPlaylist.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddPlaylistToLibrary_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.newPlaylist is not None:
            oprot.writeFieldBegin('newPlaylist', TType.STRUCT, 2)
            self.newPlaylist.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddPlaylistToLibrary_args)
AddPlaylistToLibrary_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.STRUCT, 'newPlaylist', [SpotifakeManagement.ttypes.Playlist, None], None, ),  # 2
)


class AddPlaylistToLibrary_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Playlist()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddPlaylistToLibrary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddPlaylistToLibrary_result)
AddPlaylistToLibrary_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Playlist, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteLibraryPlaylist_args(object):
    """
    Attributes:
     - idLibrary
     - idPlaylist

    """


    def __init__(self, idLibrary=None, idPlaylist=None,):
        self.idLibrary = idLibrary
        self.idPlaylist = idPlaylist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.idPlaylist = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryPlaylist_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.idPlaylist is not None:
            oprot.writeFieldBegin('idPlaylist', TType.I16, 2)
            oprot.writeI16(self.idPlaylist)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryPlaylist_args)
DeleteLibraryPlaylist_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.I16, 'idPlaylist', None, None, ),  # 2
)


class DeleteLibraryPlaylist_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryPlaylist_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryPlaylist_result)
DeleteLibraryPlaylist_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddContentCreatorToLibrary_args(object):
    """
    Attributes:
     - idLibrary
     - newContentCreator

    """


    def __init__(self, idLibrary=None, newContentCreator=None,):
        self.idLibrary = idLibrary
        self.newContentCreator = newContentCreator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newContentCreator = SpotifakeManagement.ttypes.ContentCreator()
                    self.newContentCreator.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddContentCreatorToLibrary_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.newContentCreator is not None:
            oprot.writeFieldBegin('newContentCreator', TType.STRUCT, 2)
            self.newContentCreator.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddContentCreatorToLibrary_args)
AddContentCreatorToLibrary_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.STRUCT, 'newContentCreator', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 2
)


class AddContentCreatorToLibrary_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.ContentCreator()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddContentCreatorToLibrary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddContentCreatorToLibrary_result)
AddContentCreatorToLibrary_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.ContentCreator, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeleteLibraryContentCreator_args(object):
    """
    Attributes:
     - idLibrary
     - idContentCreator

    """


    def __init__(self, idLibrary=None, idContentCreator=None,):
        self.idLibrary = idLibrary
        self.idContentCreator = idContentCreator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idLibrary = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.idContentCreator = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryContentCreator_args')
        if self.idLibrary is not None:
            oprot.writeFieldBegin('idLibrary', TType.I16, 1)
            oprot.writeI16(self.idLibrary)
            oprot.writeFieldEnd()
        if self.idContentCreator is not None:
            oprot.writeFieldBegin('idContentCreator', TType.I16, 2)
            oprot.writeI16(self.idContentCreator)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryContentCreator_args)
DeleteLibraryContentCreator_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idLibrary', None, None, ),  # 1
    (2, TType.I16, 'idContentCreator', None, None, ),  # 2
)


class DeleteLibraryContentCreator_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteLibraryContentCreator_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeleteLibraryContentCreator_result)
DeleteLibraryContentCreator_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class getContent_args(object):
    """
    Attributes:
     - query

    """


    def __init__(self, query=None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.query = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getContent_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRING, 1)
            oprot.writeString(self.query.encode('utf-8') if sys.version_info[0] == 2 else self.query)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getContent_args)
getContent_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'query', 'UTF8', None, ),  # 1
)


class getContent_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.RelatedResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getContent_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getContent_result)
getContent_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.RelatedResult, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class UpdatePlaylistTitle_args(object):
    """
    Attributes:
     - idPlaylist
     - newPlaylistTitle

    """


    def __init__(self, idPlaylist=None, newPlaylistTitle=None,):
        self.idPlaylist = idPlaylist
        self.newPlaylistTitle = newPlaylistTitle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlaylist = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newPlaylistTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdatePlaylistTitle_args')
        if self.idPlaylist is not None:
            oprot.writeFieldBegin('idPlaylist', TType.I16, 1)
            oprot.writeI16(self.idPlaylist)
            oprot.writeFieldEnd()
        if self.newPlaylistTitle is not None:
            oprot.writeFieldBegin('newPlaylistTitle', TType.STRING, 2)
            oprot.writeString(self.newPlaylistTitle.encode('utf-8') if sys.version_info[0] == 2 else self.newPlaylistTitle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdatePlaylistTitle_args)
UpdatePlaylistTitle_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlaylist', None, None, ),  # 1
    (2, TType.STRING, 'newPlaylistTitle', 'UTF8', None, ),  # 2
)


class UpdatePlaylistTitle_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Playlist()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdatePlaylistTitle_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdatePlaylistTitle_result)
UpdatePlaylistTitle_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Playlist, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class UpdatePlaylistCover_args(object):
    """
    Attributes:
     - idPlaylist
     - newImageStoragePath

    """


    def __init__(self, idPlaylist=None, newImageStoragePath=None,):
        self.idPlaylist = idPlaylist
        self.newImageStoragePath = newImageStoragePath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlaylist = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newImageStoragePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdatePlaylistCover_args')
        if self.idPlaylist is not None:
            oprot.writeFieldBegin('idPlaylist', TType.I16, 1)
            oprot.writeI16(self.idPlaylist)
            oprot.writeFieldEnd()
        if self.newImageStoragePath is not None:
            oprot.writeFieldBegin('newImageStoragePath', TType.STRING, 2)
            oprot.writeString(self.newImageStoragePath.encode('utf-8') if sys.version_info[0] == 2 else self.newImageStoragePath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdatePlaylistCover_args)
UpdatePlaylistCover_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlaylist', None, None, ),  # 1
    (2, TType.STRING, 'newImageStoragePath', 'UTF8', None, ),  # 2
)


class UpdatePlaylistCover_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Album()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdatePlaylistCover_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdatePlaylistCover_result)
UpdatePlaylistCover_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Album, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class UpdatePlaylistDescription_args(object):
    """
    Attributes:
     - idPlaylist
     - newDescription

    """


    def __init__(self, idPlaylist=None, newDescription=None,):
        self.idPlaylist = idPlaylist
        self.newDescription = newDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlaylist = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdatePlaylistDescription_args')
        if self.idPlaylist is not None:
            oprot.writeFieldBegin('idPlaylist', TType.I16, 1)
            oprot.writeI16(self.idPlaylist)
            oprot.writeFieldEnd()
        if self.newDescription is not None:
            oprot.writeFieldBegin('newDescription', TType.STRING, 2)
            oprot.writeString(self.newDescription.encode('utf-8') if sys.version_info[0] == 2 else self.newDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdatePlaylistDescription_args)
UpdatePlaylistDescription_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlaylist', None, None, ),  # 1
    (2, TType.STRING, 'newDescription', 'UTF8', None, ),  # 2
)


class UpdatePlaylistDescription_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Playlist()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdatePlaylistDescription_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpdatePlaylistDescription_result)
UpdatePlaylistDescription_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Playlist, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddTrackToPlaylist_args(object):
    """
    Attributes:
     - idPlaylist
     - newtrack

    """


    def __init__(self, idPlaylist=None, newtrack=None,):
        self.idPlaylist = idPlaylist
        self.newtrack = newtrack

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlaylist = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newtrack = SpotifakeManagement.ttypes.Track()
                    self.newtrack.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToPlaylist_args')
        if self.idPlaylist is not None:
            oprot.writeFieldBegin('idPlaylist', TType.I16, 1)
            oprot.writeI16(self.idPlaylist)
            oprot.writeFieldEnd()
        if self.newtrack is not None:
            oprot.writeFieldBegin('newtrack', TType.STRUCT, 2)
            self.newtrack.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToPlaylist_args)
AddTrackToPlaylist_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlaylist', None, None, ),  # 1
    (2, TType.STRUCT, 'newtrack', [SpotifakeManagement.ttypes.Track, None], None, ),  # 2
)


class AddTrackToPlaylist_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToPlaylist_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToPlaylist_result)
AddTrackToPlaylist_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeletePlaylistTrack_args(object):
    """
    Attributes:
     - idPlaylist
     - trackNumber

    """


    def __init__(self, idPlaylist=None, trackNumber=None,):
        self.idPlaylist = idPlaylist
        self.trackNumber = trackNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlaylist = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeletePlaylistTrack_args')
        if self.idPlaylist is not None:
            oprot.writeFieldBegin('idPlaylist', TType.I16, 1)
            oprot.writeI16(self.idPlaylist)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeletePlaylistTrack_args)
DeletePlaylistTrack_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlaylist', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
)


class DeletePlaylistTrack_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeletePlaylistTrack_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeletePlaylistTrack_result)
DeletePlaylistTrack_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class AddTrackToPlayQueue_args(object):
    """
    Attributes:
     - idPlayQueu
     - newTrack

    """


    def __init__(self, idPlayQueu=None, newTrack=None,):
        self.idPlayQueu = idPlayQueu
        self.newTrack = newTrack

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlayQueu = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newTrack = SpotifakeManagement.ttypes.Track()
                    self.newTrack.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToPlayQueue_args')
        if self.idPlayQueu is not None:
            oprot.writeFieldBegin('idPlayQueu', TType.I16, 1)
            oprot.writeI16(self.idPlayQueu)
            oprot.writeFieldEnd()
        if self.newTrack is not None:
            oprot.writeFieldBegin('newTrack', TType.STRUCT, 2)
            self.newTrack.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToPlayQueue_args)
AddTrackToPlayQueue_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlayQueu', None, None, ),  # 1
    (2, TType.STRUCT, 'newTrack', [SpotifakeManagement.ttypes.Track, None], None, ),  # 2
)


class AddTrackToPlayQueue_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SpotifakeManagement.ttypes.Track()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddTrackToPlayQueue_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AddTrackToPlayQueue_result)
AddTrackToPlayQueue_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SpotifakeManagement.ttypes.Track, None], None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)


class DeletePlayQueueTrack_args(object):
    """
    Attributes:
     - idPlayQueu
     - trackNumber

    """


    def __init__(self, idPlayQueu=None, trackNumber=None,):
        self.idPlayQueu = idPlayQueu
        self.trackNumber = trackNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.idPlayQueu = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.trackNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeletePlayQueueTrack_args')
        if self.idPlayQueu is not None:
            oprot.writeFieldBegin('idPlayQueu', TType.I16, 1)
            oprot.writeI16(self.idPlayQueu)
            oprot.writeFieldEnd()
        if self.trackNumber is not None:
            oprot.writeFieldBegin('trackNumber', TType.I16, 2)
            oprot.writeI16(self.trackNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeletePlayQueueTrack_args)
DeletePlayQueueTrack_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'idPlayQueu', None, None, ),  # 1
    (2, TType.I16, 'trackNumber', None, None, ),  # 2
)


class DeletePlayQueueTrack_result(object):
    """
    Attributes:
     - success
     - sErrorNotFoundE
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorNotFoundE=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorNotFoundE = sErrorNotFoundE
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorNotFoundE = SpotifakeManagement.ttypes.SErrorNotFoundException()
                    self.sErrorNotFoundE.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeletePlayQueueTrack_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.sErrorNotFoundE is not None:
            oprot.writeFieldBegin('sErrorNotFoundE', TType.STRUCT, 1)
            self.sErrorNotFoundE.write(oprot)
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 2)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DeletePlayQueueTrack_result)
DeletePlayQueueTrack_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'sErrorNotFoundE', [SpotifakeManagement.ttypes.SErrorNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 2
)


class GenerateRadioStation_args(object):
    """
    Attributes:
     - gender

    """


    def __init__(self, gender=None,):
        self.gender = gender

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.gender = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GenerateRadioStation_args')
        if self.gender is not None:
            oprot.writeFieldBegin('gender', TType.I32, 1)
            oprot.writeI32(self.gender)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GenerateRadioStation_args)
GenerateRadioStation_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'gender', None, None, ),  # 1
)


class GenerateRadioStation_result(object):
    """
    Attributes:
     - success
     - sErrorSystemE

    """


    def __init__(self, success=None, sErrorSystemE=None,):
        self.success = success
        self.sErrorSystemE = sErrorSystemE

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = SpotifakeManagement.ttypes.Track()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.sErrorSystemE = SpotifakeManagement.ttypes.SErrorSystemException()
                    self.sErrorSystemE.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GenerateRadioStation_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sErrorSystemE is not None:
            oprot.writeFieldBegin('sErrorSystemE', TType.STRUCT, 1)
            self.sErrorSystemE.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GenerateRadioStation_result)
GenerateRadioStation_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SpotifakeManagement.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'sErrorSystemE', [SpotifakeManagement.ttypes.SErrorSystemException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

